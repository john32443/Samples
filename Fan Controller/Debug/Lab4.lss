
Lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000012a  00800100  000018c0  00001954  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  0080022a  0080022a  00001a7e  2**0
                  ALLOC
  3 .stab         00001be4  00000000  00000000  00001a80  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010ad  00000000  00000000  00003664  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00004711  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001b6  00000000  00000000  00004871  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001f0d  00000000  00000000  00004a27  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000010d2  00000000  00000000  00006934  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000fae  00000000  00000000  00007a06  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  000089b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000031f  00000000  00000000  00008b34  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008f6  00000000  00000000  00008e53  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009749  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 ad 03 	jmp	0x75a	; 0x75a <__vector_7>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 c7 03 	jmp	0x78e	; 0x78e <__vector_13>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 2f 04 	jmp	0x85e	; 0x85e <__vector_24>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	12 e0       	ldi	r17, 0x02	; 2
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	e0 ec       	ldi	r30, 0xC0	; 192
      90:	f8 e1       	ldi	r31, 0x18	; 24
      92:	02 c0       	rjmp	.+4      	; 0x98 <.do_copy_data_start>

00000094 <.do_copy_data_loop>:
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0

00000098 <.do_copy_data_start>:
      98:	aa 32       	cpi	r26, 0x2A	; 42
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <.do_copy_data_loop>

0000009e <__do_clear_bss>:
      9e:	12 e0       	ldi	r17, 0x02	; 2
      a0:	aa e2       	ldi	r26, 0x2A	; 42
      a2:	b2 e0       	ldi	r27, 0x02	; 2
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a2 33       	cpi	r26, 0x32	; 50
      aa:	b1 07       	cpc	r27, r17
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 59 04 	call	0x8b2	; 0x8b2 <main>
      b2:	0c 94 5e 0c 	jmp	0x18bc	; 0x18bc <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <toggle_e>:


#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
      ba:	df 93       	push	r29
      bc:	cf 93       	push	r28
      be:	cd b7       	in	r28, 0x3d	; 61
      c0:	de b7       	in	r29, 0x3e	; 62
    lcd_e_high();
      c2:	a8 e2       	ldi	r26, 0x28	; 40
      c4:	b0 e0       	ldi	r27, 0x00	; 0
      c6:	e8 e2       	ldi	r30, 0x28	; 40
      c8:	f0 e0       	ldi	r31, 0x00	; 0
      ca:	80 81       	ld	r24, Z
      cc:	84 60       	ori	r24, 0x04	; 4
      ce:	8c 93       	st	X, r24
    lcd_e_delay();
      d0:	00 c0       	rjmp	.+0      	; 0xd2 <toggle_e+0x18>
    lcd_e_low();
      d2:	a8 e2       	ldi	r26, 0x28	; 40
      d4:	b0 e0       	ldi	r27, 0x00	; 0
      d6:	e8 e2       	ldi	r30, 0x28	; 40
      d8:	f0 e0       	ldi	r31, 0x00	; 0
      da:	80 81       	ld	r24, Z
      dc:	8b 7f       	andi	r24, 0xFB	; 251
      de:	8c 93       	st	X, r24
}
      e0:	cf 91       	pop	r28
      e2:	df 91       	pop	r29
      e4:	08 95       	ret

000000e6 <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs)
{
      e6:	df 93       	push	r29
      e8:	cf 93       	push	r28
      ea:	00 d0       	rcall	.+0      	; 0xec <lcd_write+0x6>
      ec:	0f 92       	push	r0
      ee:	cd b7       	in	r28, 0x3d	; 61
      f0:	de b7       	in	r29, 0x3e	; 62
      f2:	8a 83       	std	Y+2, r24	; 0x02
      f4:	6b 83       	std	Y+3, r22	; 0x03
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
      f6:	8b 81       	ldd	r24, Y+3	; 0x03
      f8:	88 23       	and	r24, r24
      fa:	41 f0       	breq	.+16     	; 0x10c <lcd_write+0x26>
       lcd_rs_high();
      fc:	a8 e2       	ldi	r26, 0x28	; 40
      fe:	b0 e0       	ldi	r27, 0x00	; 0
     100:	e8 e2       	ldi	r30, 0x28	; 40
     102:	f0 e0       	ldi	r31, 0x00	; 0
     104:	80 81       	ld	r24, Z
     106:	81 60       	ori	r24, 0x01	; 1
     108:	8c 93       	st	X, r24
     10a:	07 c0       	rjmp	.+14     	; 0x11a <lcd_write+0x34>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
     10c:	a8 e2       	ldi	r26, 0x28	; 40
     10e:	b0 e0       	ldi	r27, 0x00	; 0
     110:	e8 e2       	ldi	r30, 0x28	; 40
     112:	f0 e0       	ldi	r31, 0x00	; 0
     114:	80 81       	ld	r24, Z
     116:	8e 7f       	andi	r24, 0xFE	; 254
     118:	8c 93       	st	X, r24
    }
    lcd_rw_low();
     11a:	a8 e2       	ldi	r26, 0x28	; 40
     11c:	b0 e0       	ldi	r27, 0x00	; 0
     11e:	e8 e2       	ldi	r30, 0x28	; 40
     120:	f0 e0       	ldi	r31, 0x00	; 0
     122:	80 81       	ld	r24, Z
     124:	8d 7f       	andi	r24, 0xFD	; 253
     126:	8c 93       	st	X, r24
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     128:	a7 e2       	ldi	r26, 0x27	; 39
     12a:	b0 e0       	ldi	r27, 0x00	; 0
     12c:	e7 e2       	ldi	r30, 0x27	; 39
     12e:	f0 e0       	ldi	r31, 0x00	; 0
     130:	80 81       	ld	r24, Z
     132:	80 61       	ori	r24, 0x10	; 16
     134:	8c 93       	st	X, r24
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     136:	a7 e2       	ldi	r26, 0x27	; 39
     138:	b0 e0       	ldi	r27, 0x00	; 0
     13a:	e7 e2       	ldi	r30, 0x27	; 39
     13c:	f0 e0       	ldi	r31, 0x00	; 0
     13e:	80 81       	ld	r24, Z
     140:	80 62       	ori	r24, 0x20	; 32
     142:	8c 93       	st	X, r24
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     144:	a7 e2       	ldi	r26, 0x27	; 39
     146:	b0 e0       	ldi	r27, 0x00	; 0
     148:	e7 e2       	ldi	r30, 0x27	; 39
     14a:	f0 e0       	ldi	r31, 0x00	; 0
     14c:	80 81       	ld	r24, Z
     14e:	80 64       	ori	r24, 0x40	; 64
     150:	8c 93       	st	X, r24
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     152:	a7 e2       	ldi	r26, 0x27	; 39
     154:	b0 e0       	ldi	r27, 0x00	; 0
     156:	e7 e2       	ldi	r30, 0x27	; 39
     158:	f0 e0       	ldi	r31, 0x00	; 0
     15a:	80 81       	ld	r24, Z
     15c:	80 68       	ori	r24, 0x80	; 128
     15e:	8c 93       	st	X, r24

        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
     160:	a8 e2       	ldi	r26, 0x28	; 40
     162:	b0 e0       	ldi	r27, 0x00	; 0
     164:	e8 e2       	ldi	r30, 0x28	; 40
     166:	f0 e0       	ldi	r31, 0x00	; 0
     168:	80 81       	ld	r24, Z
     16a:	8f 77       	andi	r24, 0x7F	; 127
     16c:	8c 93       	st	X, r24
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
     16e:	a8 e2       	ldi	r26, 0x28	; 40
     170:	b0 e0       	ldi	r27, 0x00	; 0
     172:	e8 e2       	ldi	r30, 0x28	; 40
     174:	f0 e0       	ldi	r31, 0x00	; 0
     176:	80 81       	ld	r24, Z
     178:	8f 7b       	andi	r24, 0xBF	; 191
     17a:	8c 93       	st	X, r24
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
     17c:	a8 e2       	ldi	r26, 0x28	; 40
     17e:	b0 e0       	ldi	r27, 0x00	; 0
     180:	e8 e2       	ldi	r30, 0x28	; 40
     182:	f0 e0       	ldi	r31, 0x00	; 0
     184:	80 81       	ld	r24, Z
     186:	8f 7d       	andi	r24, 0xDF	; 223
     188:	8c 93       	st	X, r24
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
     18a:	a8 e2       	ldi	r26, 0x28	; 40
     18c:	b0 e0       	ldi	r27, 0x00	; 0
     18e:	e8 e2       	ldi	r30, 0x28	; 40
     190:	f0 e0       	ldi	r31, 0x00	; 0
     192:	80 81       	ld	r24, Z
     194:	8f 7e       	andi	r24, 0xEF	; 239
     196:	8c 93       	st	X, r24
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     198:	8a 81       	ldd	r24, Y+2	; 0x02
     19a:	88 23       	and	r24, r24
     19c:	3c f4       	brge	.+14     	; 0x1ac <lcd_write+0xc6>
     19e:	a8 e2       	ldi	r26, 0x28	; 40
     1a0:	b0 e0       	ldi	r27, 0x00	; 0
     1a2:	e8 e2       	ldi	r30, 0x28	; 40
     1a4:	f0 e0       	ldi	r31, 0x00	; 0
     1a6:	80 81       	ld	r24, Z
     1a8:	80 68       	ori	r24, 0x80	; 128
     1aa:	8c 93       	st	X, r24
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     1ac:	8a 81       	ldd	r24, Y+2	; 0x02
     1ae:	88 2f       	mov	r24, r24
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	80 74       	andi	r24, 0x40	; 64
     1b4:	90 70       	andi	r25, 0x00	; 0
     1b6:	00 97       	sbiw	r24, 0x00	; 0
     1b8:	39 f0       	breq	.+14     	; 0x1c8 <lcd_write+0xe2>
     1ba:	a8 e2       	ldi	r26, 0x28	; 40
     1bc:	b0 e0       	ldi	r27, 0x00	; 0
     1be:	e8 e2       	ldi	r30, 0x28	; 40
     1c0:	f0 e0       	ldi	r31, 0x00	; 0
     1c2:	80 81       	ld	r24, Z
     1c4:	80 64       	ori	r24, 0x40	; 64
     1c6:	8c 93       	st	X, r24
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     1c8:	8a 81       	ldd	r24, Y+2	; 0x02
     1ca:	88 2f       	mov	r24, r24
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	80 72       	andi	r24, 0x20	; 32
     1d0:	90 70       	andi	r25, 0x00	; 0
     1d2:	00 97       	sbiw	r24, 0x00	; 0
     1d4:	39 f0       	breq	.+14     	; 0x1e4 <lcd_write+0xfe>
     1d6:	a8 e2       	ldi	r26, 0x28	; 40
     1d8:	b0 e0       	ldi	r27, 0x00	; 0
     1da:	e8 e2       	ldi	r30, 0x28	; 40
     1dc:	f0 e0       	ldi	r31, 0x00	; 0
     1de:	80 81       	ld	r24, Z
     1e0:	80 62       	ori	r24, 0x20	; 32
     1e2:	8c 93       	st	X, r24
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
     1e4:	8a 81       	ldd	r24, Y+2	; 0x02
     1e6:	88 2f       	mov	r24, r24
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	80 71       	andi	r24, 0x10	; 16
     1ec:	90 70       	andi	r25, 0x00	; 0
     1ee:	00 97       	sbiw	r24, 0x00	; 0
     1f0:	39 f0       	breq	.+14     	; 0x200 <lcd_write+0x11a>
     1f2:	a8 e2       	ldi	r26, 0x28	; 40
     1f4:	b0 e0       	ldi	r27, 0x00	; 0
     1f6:	e8 e2       	ldi	r30, 0x28	; 40
     1f8:	f0 e0       	ldi	r31, 0x00	; 0
     1fa:	80 81       	ld	r24, Z
     1fc:	80 61       	ori	r24, 0x10	; 16
     1fe:	8c 93       	st	X, r24
        lcd_e_toggle();
     200:	0e 94 5d 00 	call	0xba	; 0xba <toggle_e>

        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
     204:	a8 e2       	ldi	r26, 0x28	; 40
     206:	b0 e0       	ldi	r27, 0x00	; 0
     208:	e8 e2       	ldi	r30, 0x28	; 40
     20a:	f0 e0       	ldi	r31, 0x00	; 0
     20c:	80 81       	ld	r24, Z
     20e:	8f 77       	andi	r24, 0x7F	; 127
     210:	8c 93       	st	X, r24
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
     212:	a8 e2       	ldi	r26, 0x28	; 40
     214:	b0 e0       	ldi	r27, 0x00	; 0
     216:	e8 e2       	ldi	r30, 0x28	; 40
     218:	f0 e0       	ldi	r31, 0x00	; 0
     21a:	80 81       	ld	r24, Z
     21c:	8f 7b       	andi	r24, 0xBF	; 191
     21e:	8c 93       	st	X, r24
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
     220:	a8 e2       	ldi	r26, 0x28	; 40
     222:	b0 e0       	ldi	r27, 0x00	; 0
     224:	e8 e2       	ldi	r30, 0x28	; 40
     226:	f0 e0       	ldi	r31, 0x00	; 0
     228:	80 81       	ld	r24, Z
     22a:	8f 7d       	andi	r24, 0xDF	; 223
     22c:	8c 93       	st	X, r24
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
     22e:	a8 e2       	ldi	r26, 0x28	; 40
     230:	b0 e0       	ldi	r27, 0x00	; 0
     232:	e8 e2       	ldi	r30, 0x28	; 40
     234:	f0 e0       	ldi	r31, 0x00	; 0
     236:	80 81       	ld	r24, Z
     238:	8f 7e       	andi	r24, 0xEF	; 239
     23a:	8c 93       	st	X, r24
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     23c:	8a 81       	ldd	r24, Y+2	; 0x02
     23e:	88 2f       	mov	r24, r24
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	88 70       	andi	r24, 0x08	; 8
     244:	90 70       	andi	r25, 0x00	; 0
     246:	00 97       	sbiw	r24, 0x00	; 0
     248:	39 f0       	breq	.+14     	; 0x258 <lcd_write+0x172>
     24a:	a8 e2       	ldi	r26, 0x28	; 40
     24c:	b0 e0       	ldi	r27, 0x00	; 0
     24e:	e8 e2       	ldi	r30, 0x28	; 40
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	80 81       	ld	r24, Z
     254:	80 68       	ori	r24, 0x80	; 128
     256:	8c 93       	st	X, r24
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     258:	8a 81       	ldd	r24, Y+2	; 0x02
     25a:	88 2f       	mov	r24, r24
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	84 70       	andi	r24, 0x04	; 4
     260:	90 70       	andi	r25, 0x00	; 0
     262:	00 97       	sbiw	r24, 0x00	; 0
     264:	39 f0       	breq	.+14     	; 0x274 <lcd_write+0x18e>
     266:	a8 e2       	ldi	r26, 0x28	; 40
     268:	b0 e0       	ldi	r27, 0x00	; 0
     26a:	e8 e2       	ldi	r30, 0x28	; 40
     26c:	f0 e0       	ldi	r31, 0x00	; 0
     26e:	80 81       	ld	r24, Z
     270:	80 64       	ori	r24, 0x40	; 64
     272:	8c 93       	st	X, r24
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     274:	8a 81       	ldd	r24, Y+2	; 0x02
     276:	88 2f       	mov	r24, r24
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	82 70       	andi	r24, 0x02	; 2
     27c:	90 70       	andi	r25, 0x00	; 0
     27e:	00 97       	sbiw	r24, 0x00	; 0
     280:	39 f0       	breq	.+14     	; 0x290 <lcd_write+0x1aa>
     282:	a8 e2       	ldi	r26, 0x28	; 40
     284:	b0 e0       	ldi	r27, 0x00	; 0
     286:	e8 e2       	ldi	r30, 0x28	; 40
     288:	f0 e0       	ldi	r31, 0x00	; 0
     28a:	80 81       	ld	r24, Z
     28c:	80 62       	ori	r24, 0x20	; 32
     28e:	8c 93       	st	X, r24
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
     290:	8a 81       	ldd	r24, Y+2	; 0x02
     292:	88 2f       	mov	r24, r24
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	81 70       	andi	r24, 0x01	; 1
     298:	90 70       	andi	r25, 0x00	; 0
     29a:	88 23       	and	r24, r24
     29c:	39 f0       	breq	.+14     	; 0x2ac <lcd_write+0x1c6>
     29e:	a8 e2       	ldi	r26, 0x28	; 40
     2a0:	b0 e0       	ldi	r27, 0x00	; 0
     2a2:	e8 e2       	ldi	r30, 0x28	; 40
     2a4:	f0 e0       	ldi	r31, 0x00	; 0
     2a6:	80 81       	ld	r24, Z
     2a8:	80 61       	ori	r24, 0x10	; 16
     2aa:	8c 93       	st	X, r24
        lcd_e_toggle();
     2ac:	0e 94 5d 00 	call	0xba	; 0xba <toggle_e>

        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
     2b0:	a8 e2       	ldi	r26, 0x28	; 40
     2b2:	b0 e0       	ldi	r27, 0x00	; 0
     2b4:	e8 e2       	ldi	r30, 0x28	; 40
     2b6:	f0 e0       	ldi	r31, 0x00	; 0
     2b8:	80 81       	ld	r24, Z
     2ba:	80 61       	ori	r24, 0x10	; 16
     2bc:	8c 93       	st	X, r24
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     2be:	a8 e2       	ldi	r26, 0x28	; 40
     2c0:	b0 e0       	ldi	r27, 0x00	; 0
     2c2:	e8 e2       	ldi	r30, 0x28	; 40
     2c4:	f0 e0       	ldi	r31, 0x00	; 0
     2c6:	80 81       	ld	r24, Z
     2c8:	80 62       	ori	r24, 0x20	; 32
     2ca:	8c 93       	st	X, r24
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     2cc:	a8 e2       	ldi	r26, 0x28	; 40
     2ce:	b0 e0       	ldi	r27, 0x00	; 0
     2d0:	e8 e2       	ldi	r30, 0x28	; 40
     2d2:	f0 e0       	ldi	r31, 0x00	; 0
     2d4:	80 81       	ld	r24, Z
     2d6:	80 64       	ori	r24, 0x40	; 64
     2d8:	8c 93       	st	X, r24
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     2da:	a8 e2       	ldi	r26, 0x28	; 40
     2dc:	b0 e0       	ldi	r27, 0x00	; 0
     2de:	e8 e2       	ldi	r30, 0x28	; 40
     2e0:	f0 e0       	ldi	r31, 0x00	; 0
     2e2:	80 81       	ld	r24, Z
     2e4:	80 68       	ori	r24, 0x80	; 128
     2e6:	8c 93       	st	X, r24
    }
}
     2e8:	0f 90       	pop	r0
     2ea:	0f 90       	pop	r0
     2ec:	0f 90       	pop	r0
     2ee:	cf 91       	pop	r28
     2f0:	df 91       	pop	r29
     2f2:	08 95       	ret

000002f4 <lcd_read>:
                 0: read busy flag / address counter
Returns:  byte read from LCD controller
*************************************************************************/
#if LCD_IO_MODE
static uint8_t lcd_read(uint8_t rs)
{
     2f4:	df 93       	push	r29
     2f6:	cf 93       	push	r28
     2f8:	00 d0       	rcall	.+0      	; 0x2fa <lcd_read+0x6>
     2fa:	cd b7       	in	r28, 0x3d	; 61
     2fc:	de b7       	in	r29, 0x3e	; 62
     2fe:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t data;


    if (rs)
     300:	8a 81       	ldd	r24, Y+2	; 0x02
     302:	88 23       	and	r24, r24
     304:	41 f0       	breq	.+16     	; 0x316 <lcd_read+0x22>
        lcd_rs_high();                       /* RS=1: read data      */
     306:	a8 e2       	ldi	r26, 0x28	; 40
     308:	b0 e0       	ldi	r27, 0x00	; 0
     30a:	e8 e2       	ldi	r30, 0x28	; 40
     30c:	f0 e0       	ldi	r31, 0x00	; 0
     30e:	80 81       	ld	r24, Z
     310:	81 60       	ori	r24, 0x01	; 1
     312:	8c 93       	st	X, r24
     314:	07 c0       	rjmp	.+14     	; 0x324 <lcd_read+0x30>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
     316:	a8 e2       	ldi	r26, 0x28	; 40
     318:	b0 e0       	ldi	r27, 0x00	; 0
     31a:	e8 e2       	ldi	r30, 0x28	; 40
     31c:	f0 e0       	ldi	r31, 0x00	; 0
     31e:	80 81       	ld	r24, Z
     320:	8e 7f       	andi	r24, 0xFE	; 254
     322:	8c 93       	st	X, r24
    lcd_rw_high();                           /* RW=1  read mode      */
     324:	a8 e2       	ldi	r26, 0x28	; 40
     326:	b0 e0       	ldi	r27, 0x00	; 0
     328:	e8 e2       	ldi	r30, 0x28	; 40
     32a:	f0 e0       	ldi	r31, 0x00	; 0
     32c:	80 81       	ld	r24, Z
     32e:	82 60       	ori	r24, 0x02	; 2
     330:	8c 93       	st	X, r24
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
     332:	a7 e2       	ldi	r26, 0x27	; 39
     334:	b0 e0       	ldi	r27, 0x00	; 0
     336:	e7 e2       	ldi	r30, 0x27	; 39
     338:	f0 e0       	ldi	r31, 0x00	; 0
     33a:	80 81       	ld	r24, Z
     33c:	8f 7e       	andi	r24, 0xEF	; 239
     33e:	8c 93       	st	X, r24
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
     340:	a7 e2       	ldi	r26, 0x27	; 39
     342:	b0 e0       	ldi	r27, 0x00	; 0
     344:	e7 e2       	ldi	r30, 0x27	; 39
     346:	f0 e0       	ldi	r31, 0x00	; 0
     348:	80 81       	ld	r24, Z
     34a:	8f 7d       	andi	r24, 0xDF	; 223
     34c:	8c 93       	st	X, r24
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
     34e:	a7 e2       	ldi	r26, 0x27	; 39
     350:	b0 e0       	ldi	r27, 0x00	; 0
     352:	e7 e2       	ldi	r30, 0x27	; 39
     354:	f0 e0       	ldi	r31, 0x00	; 0
     356:	80 81       	ld	r24, Z
     358:	8f 7b       	andi	r24, 0xBF	; 191
     35a:	8c 93       	st	X, r24
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
     35c:	a7 e2       	ldi	r26, 0x27	; 39
     35e:	b0 e0       	ldi	r27, 0x00	; 0
     360:	e7 e2       	ldi	r30, 0x27	; 39
     362:	f0 e0       	ldi	r31, 0x00	; 0
     364:	80 81       	ld	r24, Z
     366:	8f 77       	andi	r24, 0x7F	; 127
     368:	8c 93       	st	X, r24

        /* read high nibble first */
        lcd_e_high();
     36a:	a8 e2       	ldi	r26, 0x28	; 40
     36c:	b0 e0       	ldi	r27, 0x00	; 0
     36e:	e8 e2       	ldi	r30, 0x28	; 40
     370:	f0 e0       	ldi	r31, 0x00	; 0
     372:	80 81       	ld	r24, Z
     374:	84 60       	ori	r24, 0x04	; 4
     376:	8c 93       	st	X, r24
        lcd_e_delay();
     378:	00 c0       	rjmp	.+0      	; 0x37a <lcd_read+0x86>
        data = 0;
     37a:	19 82       	std	Y+1, r1	; 0x01
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
     37c:	e6 e2       	ldi	r30, 0x26	; 38
     37e:	f0 e0       	ldi	r31, 0x00	; 0
     380:	80 81       	ld	r24, Z
     382:	88 2f       	mov	r24, r24
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	80 71       	andi	r24, 0x10	; 16
     388:	90 70       	andi	r25, 0x00	; 0
     38a:	00 97       	sbiw	r24, 0x00	; 0
     38c:	19 f0       	breq	.+6      	; 0x394 <lcd_read+0xa0>
     38e:	89 81       	ldd	r24, Y+1	; 0x01
     390:	80 61       	ori	r24, 0x10	; 16
     392:	89 83       	std	Y+1, r24	; 0x01
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
     394:	e6 e2       	ldi	r30, 0x26	; 38
     396:	f0 e0       	ldi	r31, 0x00	; 0
     398:	80 81       	ld	r24, Z
     39a:	88 2f       	mov	r24, r24
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	80 72       	andi	r24, 0x20	; 32
     3a0:	90 70       	andi	r25, 0x00	; 0
     3a2:	00 97       	sbiw	r24, 0x00	; 0
     3a4:	19 f0       	breq	.+6      	; 0x3ac <lcd_read+0xb8>
     3a6:	89 81       	ldd	r24, Y+1	; 0x01
     3a8:	80 62       	ori	r24, 0x20	; 32
     3aa:	89 83       	std	Y+1, r24	; 0x01
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
     3ac:	e6 e2       	ldi	r30, 0x26	; 38
     3ae:	f0 e0       	ldi	r31, 0x00	; 0
     3b0:	80 81       	ld	r24, Z
     3b2:	88 2f       	mov	r24, r24
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	80 74       	andi	r24, 0x40	; 64
     3b8:	90 70       	andi	r25, 0x00	; 0
     3ba:	00 97       	sbiw	r24, 0x00	; 0
     3bc:	19 f0       	breq	.+6      	; 0x3c4 <lcd_read+0xd0>
     3be:	89 81       	ldd	r24, Y+1	; 0x01
     3c0:	80 64       	ori	r24, 0x40	; 64
     3c2:	89 83       	std	Y+1, r24	; 0x01
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
     3c4:	e6 e2       	ldi	r30, 0x26	; 38
     3c6:	f0 e0       	ldi	r31, 0x00	; 0
     3c8:	80 81       	ld	r24, Z
     3ca:	88 23       	and	r24, r24
     3cc:	1c f4       	brge	.+6      	; 0x3d4 <lcd_read+0xe0>
     3ce:	89 81       	ldd	r24, Y+1	; 0x01
     3d0:	80 68       	ori	r24, 0x80	; 128
     3d2:	89 83       	std	Y+1, r24	; 0x01
        lcd_e_low();
     3d4:	a8 e2       	ldi	r26, 0x28	; 40
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e8 e2       	ldi	r30, 0x28	; 40
     3da:	f0 e0       	ldi	r31, 0x00	; 0
     3dc:	80 81       	ld	r24, Z
     3de:	8b 7f       	andi	r24, 0xFB	; 251
     3e0:	8c 93       	st	X, r24

        lcd_e_delay();                       /* Enable 500ns low       */
     3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <lcd_read+0xf0>

        /* read low nibble */
        lcd_e_high();
     3e4:	a8 e2       	ldi	r26, 0x28	; 40
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 e2       	ldi	r30, 0x28	; 40
     3ea:	f0 e0       	ldi	r31, 0x00	; 0
     3ec:	80 81       	ld	r24, Z
     3ee:	84 60       	ori	r24, 0x04	; 4
     3f0:	8c 93       	st	X, r24
        lcd_e_delay();
     3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <lcd_read+0x100>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
     3f4:	e6 e2       	ldi	r30, 0x26	; 38
     3f6:	f0 e0       	ldi	r31, 0x00	; 0
     3f8:	80 81       	ld	r24, Z
     3fa:	88 2f       	mov	r24, r24
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	80 71       	andi	r24, 0x10	; 16
     400:	90 70       	andi	r25, 0x00	; 0
     402:	00 97       	sbiw	r24, 0x00	; 0
     404:	19 f0       	breq	.+6      	; 0x40c <lcd_read+0x118>
     406:	89 81       	ldd	r24, Y+1	; 0x01
     408:	81 60       	ori	r24, 0x01	; 1
     40a:	89 83       	std	Y+1, r24	; 0x01
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
     40c:	e6 e2       	ldi	r30, 0x26	; 38
     40e:	f0 e0       	ldi	r31, 0x00	; 0
     410:	80 81       	ld	r24, Z
     412:	88 2f       	mov	r24, r24
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	80 72       	andi	r24, 0x20	; 32
     418:	90 70       	andi	r25, 0x00	; 0
     41a:	00 97       	sbiw	r24, 0x00	; 0
     41c:	19 f0       	breq	.+6      	; 0x424 <lcd_read+0x130>
     41e:	89 81       	ldd	r24, Y+1	; 0x01
     420:	82 60       	ori	r24, 0x02	; 2
     422:	89 83       	std	Y+1, r24	; 0x01
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
     424:	e6 e2       	ldi	r30, 0x26	; 38
     426:	f0 e0       	ldi	r31, 0x00	; 0
     428:	80 81       	ld	r24, Z
     42a:	88 2f       	mov	r24, r24
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	80 74       	andi	r24, 0x40	; 64
     430:	90 70       	andi	r25, 0x00	; 0
     432:	00 97       	sbiw	r24, 0x00	; 0
     434:	19 f0       	breq	.+6      	; 0x43c <lcd_read+0x148>
     436:	89 81       	ldd	r24, Y+1	; 0x01
     438:	84 60       	ori	r24, 0x04	; 4
     43a:	89 83       	std	Y+1, r24	; 0x01
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;
     43c:	e6 e2       	ldi	r30, 0x26	; 38
     43e:	f0 e0       	ldi	r31, 0x00	; 0
     440:	80 81       	ld	r24, Z
     442:	88 23       	and	r24, r24
     444:	1c f4       	brge	.+6      	; 0x44c <lcd_read+0x158>
     446:	89 81       	ldd	r24, Y+1	; 0x01
     448:	88 60       	ori	r24, 0x08	; 8
     44a:	89 83       	std	Y+1, r24	; 0x01
        lcd_e_low();
     44c:	a8 e2       	ldi	r26, 0x28	; 40
     44e:	b0 e0       	ldi	r27, 0x00	; 0
     450:	e8 e2       	ldi	r30, 0x28	; 40
     452:	f0 e0       	ldi	r31, 0x00	; 0
     454:	80 81       	ld	r24, Z
     456:	8b 7f       	andi	r24, 0xFB	; 251
     458:	8c 93       	st	X, r24
    }
    return data;
     45a:	89 81       	ldd	r24, Y+1	; 0x01
}
     45c:	0f 90       	pop	r0
     45e:	0f 90       	pop	r0
     460:	cf 91       	pop	r28
     462:	df 91       	pop	r29
     464:	08 95       	ret

00000466 <lcd_waitbusy>:
/*************************************************************************
loops while lcd is busy, returns address counter
*************************************************************************/
static uint8_t lcd_waitbusy(void)

{
     466:	df 93       	push	r29
     468:	cf 93       	push	r28
     46a:	cd b7       	in	r28, 0x3d	; 61
     46c:	de b7       	in	r29, 0x3e	; 62
    register uint8_t c;

    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <lcd_read>
     474:	88 23       	and	r24, r24
     476:	dc f3       	brlt	.-10     	; 0x46e <lcd_waitbusy+0x8>

    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);
     478:	82 e0       	ldi	r24, 0x02	; 2
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	0e 94 46 02 	call	0x48c	; 0x48c <_delayFourCycles>

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
     480:	80 e0       	ldi	r24, 0x00	; 0
     482:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <lcd_read>

}/* lcd_waitbusy */
     486:	cf 91       	pop	r28
     488:	df 91       	pop	r29
     48a:	08 95       	ret

0000048c <_delayFourCycles>:

/*************************************************************************
 delay loop for small accurate delays: 16-bit counter, 4 cycles/loop
*************************************************************************/
static inline void _delayFourCycles(unsigned int __count)
{
     48c:	df 93       	push	r29
     48e:	cf 93       	push	r28
     490:	00 d0       	rcall	.+0      	; 0x492 <_delayFourCycles+0x6>
     492:	cd b7       	in	r28, 0x3d	; 61
     494:	de b7       	in	r29, 0x3e	; 62
     496:	9a 83       	std	Y+2, r25	; 0x02
     498:	89 83       	std	Y+1, r24	; 0x01
    if ( __count == 0 )
     49a:	89 81       	ldd	r24, Y+1	; 0x01
     49c:	9a 81       	ldd	r25, Y+2	; 0x02
     49e:	00 97       	sbiw	r24, 0x00	; 0
     4a0:	11 f4       	brne	.+4      	; 0x4a6 <_delayFourCycles+0x1a>
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
     4a2:	00 c0       	rjmp	.+0      	; 0x4a4 <_delayFourCycles+0x18>
     4a4:	06 c0       	rjmp	.+12     	; 0x4b2 <_delayFourCycles+0x26>
    else
        __asm__ __volatile__ (
     4a6:	89 81       	ldd	r24, Y+1	; 0x01
     4a8:	9a 81       	ldd	r25, Y+2	; 0x02
     4aa:	01 97       	sbiw	r24, 0x01	; 1
     4ac:	f1 f7       	brne	.-4      	; 0x4aa <_delayFourCycles+0x1e>
     4ae:	9a 83       	std	Y+2, r25	; 0x02
     4b0:	89 83       	std	Y+1, r24	; 0x01
    	    "1: sbiw %0,1" "\n\t"
    	    "brne 1b"                              // 4 cycles/loop
    	    : "=w" (__count)
    	    : "0" (__count)
    	   );
}
     4b2:	0f 90       	pop	r0
     4b4:	0f 90       	pop	r0
     4b6:	cf 91       	pop	r28
     4b8:	df 91       	pop	r29
     4ba:	08 95       	ret

000004bc <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
     4bc:	df 93       	push	r29
     4be:	cf 93       	push	r28
     4c0:	0f 92       	push	r0
     4c2:	cd b7       	in	r28, 0x3d	; 61
     4c4:	de b7       	in	r29, 0x3e	; 62
     4c6:	89 83       	std	Y+1, r24	; 0x01
    lcd_waitbusy();
     4c8:	0e 94 33 02 	call	0x466	; 0x466 <lcd_waitbusy>
    lcd_write(cmd,0);
     4cc:	89 81       	ldd	r24, Y+1	; 0x01
     4ce:	60 e0       	ldi	r22, 0x00	; 0
     4d0:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_write>
}
     4d4:	0f 90       	pop	r0
     4d6:	cf 91       	pop	r28
     4d8:	df 91       	pop	r29
     4da:	08 95       	ret

000004dc <lcd_data>:
Send data byte to LCD controller
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
     4dc:	df 93       	push	r29
     4de:	cf 93       	push	r28
     4e0:	0f 92       	push	r0
     4e2:	cd b7       	in	r28, 0x3d	; 61
     4e4:	de b7       	in	r29, 0x3e	; 62
     4e6:	89 83       	std	Y+1, r24	; 0x01
    lcd_waitbusy();
     4e8:	0e 94 33 02 	call	0x466	; 0x466 <lcd_waitbusy>
    lcd_write(data,1);
     4ec:	89 81       	ldd	r24, Y+1	; 0x01
     4ee:	61 e0       	ldi	r22, 0x01	; 1
     4f0:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_write>
}
     4f4:	0f 90       	pop	r0
     4f6:	cf 91       	pop	r28
     4f8:	df 91       	pop	r29
     4fa:	08 95       	ret

000004fc <lcd_gotoxy>:
Input:    x  horizontal position  (0: left most position)
          y  vertical position    (0: first line)
Returns:  none
*************************************************************************/
void lcd_gotoxy(uint8_t x, uint8_t y)
{
     4fc:	df 93       	push	r29
     4fe:	cf 93       	push	r28
     500:	00 d0       	rcall	.+0      	; 0x502 <lcd_gotoxy+0x6>
     502:	cd b7       	in	r28, 0x3d	; 61
     504:	de b7       	in	r29, 0x3e	; 62
     506:	89 83       	std	Y+1, r24	; 0x01
     508:	6a 83       	std	Y+2, r22	; 0x02
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 )
     50a:	8a 81       	ldd	r24, Y+2	; 0x02
     50c:	88 23       	and	r24, r24
     50e:	29 f4       	brne	.+10     	; 0x51a <lcd_gotoxy+0x1e>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
     510:	89 81       	ldd	r24, Y+1	; 0x01
     512:	80 58       	subi	r24, 0x80	; 128
     514:	0e 94 5e 02 	call	0x4bc	; 0x4bc <lcd_command>
     518:	04 c0       	rjmp	.+8      	; 0x522 <lcd_gotoxy+0x26>
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
     51a:	89 81       	ldd	r24, Y+1	; 0x01
     51c:	80 54       	subi	r24, 0x40	; 64
     51e:	0e 94 5e 02 	call	0x4bc	; 0x4bc <lcd_command>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE3+x);
    else /* y==3 */
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE4+x);
#endif

}/* lcd_gotoxy */
     522:	0f 90       	pop	r0
     524:	0f 90       	pop	r0
     526:	cf 91       	pop	r28
     528:	df 91       	pop	r29
     52a:	08 95       	ret

0000052c <lcd_getxy>:


/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
     52c:	df 93       	push	r29
     52e:	cf 93       	push	r28
     530:	cd b7       	in	r28, 0x3d	; 61
     532:	de b7       	in	r29, 0x3e	; 62
    return lcd_waitbusy();
     534:	0e 94 33 02 	call	0x466	; 0x466 <lcd_waitbusy>
     538:	88 2f       	mov	r24, r24
     53a:	90 e0       	ldi	r25, 0x00	; 0
}
     53c:	cf 91       	pop	r28
     53e:	df 91       	pop	r29
     540:	08 95       	ret

00000542 <lcd_clrscr>:

/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
     542:	df 93       	push	r29
     544:	cf 93       	push	r28
     546:	cd b7       	in	r28, 0x3d	; 61
     548:	de b7       	in	r29, 0x3e	; 62
    lcd_command(1<<LCD_CLR);
     54a:	81 e0       	ldi	r24, 0x01	; 1
     54c:	0e 94 5e 02 	call	0x4bc	; 0x4bc <lcd_command>
}
     550:	cf 91       	pop	r28
     552:	df 91       	pop	r29
     554:	08 95       	ret

00000556 <lcd_home>:

/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
     556:	df 93       	push	r29
     558:	cf 93       	push	r28
     55a:	cd b7       	in	r28, 0x3d	; 61
     55c:	de b7       	in	r29, 0x3e	; 62
    lcd_command(1<<LCD_HOME);
     55e:	82 e0       	ldi	r24, 0x02	; 2
     560:	0e 94 5e 02 	call	0x4bc	; 0x4bc <lcd_command>
}
     564:	cf 91       	pop	r28
     566:	df 91       	pop	r29
     568:	08 95       	ret

0000056a <lcd_putc>:
Display character at current cursor position
Input:    character to be displayed
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
     56a:	df 93       	push	r29
     56c:	cf 93       	push	r28
     56e:	00 d0       	rcall	.+0      	; 0x570 <lcd_putc+0x6>
     570:	cd b7       	in	r28, 0x3d	; 61
     572:	de b7       	in	r29, 0x3e	; 62
     574:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
     576:	0e 94 33 02 	call	0x466	; 0x466 <lcd_waitbusy>
     57a:	89 83       	std	Y+1, r24	; 0x01
    if (c=='\n')
     57c:	8a 81       	ldd	r24, Y+2	; 0x02
     57e:	8a 30       	cpi	r24, 0x0A	; 10
     580:	21 f4       	brne	.+8      	; 0x58a <lcd_putc+0x20>
    {
        lcd_newline(pos);
     582:	89 81       	ldd	r24, Y+1	; 0x01
     584:	0e 94 ce 02 	call	0x59c	; 0x59c <lcd_newline>
     588:	04 c0       	rjmp	.+8      	; 0x592 <lcd_putc+0x28>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
     58a:	8a 81       	ldd	r24, Y+2	; 0x02
     58c:	61 e0       	ldi	r22, 0x01	; 1
     58e:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_write>
    }

}/* lcd_putc */
     592:	0f 90       	pop	r0
     594:	0f 90       	pop	r0
     596:	cf 91       	pop	r28
     598:	df 91       	pop	r29
     59a:	08 95       	ret

0000059c <lcd_newline>:
/*************************************************************************
Move cursor to the start of next line or to the first line if the cursor
is already on the last line.
*************************************************************************/
static inline void lcd_newline(uint8_t pos)
{
     59c:	df 93       	push	r29
     59e:	cf 93       	push	r28
     5a0:	00 d0       	rcall	.+0      	; 0x5a2 <lcd_newline+0x6>
     5a2:	cd b7       	in	r28, 0x3d	; 61
     5a4:	de b7       	in	r29, 0x3e	; 62
     5a6:	89 83       	std	Y+1, r24	; 0x01

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
     5a8:	89 81       	ldd	r24, Y+1	; 0x01
     5aa:	80 34       	cpi	r24, 0x40	; 64
     5ac:	18 f4       	brcc	.+6      	; 0x5b4 <lcd_newline+0x18>
        addressCounter = LCD_START_LINE2;
     5ae:	80 e4       	ldi	r24, 0x40	; 64
     5b0:	8a 83       	std	Y+2, r24	; 0x02
     5b2:	01 c0       	rjmp	.+2      	; 0x5b6 <lcd_newline+0x1a>
    else
        addressCounter = LCD_START_LINE1;
     5b4:	1a 82       	std	Y+2, r1	; 0x02
        addressCounter = LCD_START_LINE4;
    else
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
     5b6:	8a 81       	ldd	r24, Y+2	; 0x02
     5b8:	80 58       	subi	r24, 0x80	; 128
     5ba:	0e 94 5e 02 	call	0x4bc	; 0x4bc <lcd_command>

}/* lcd_newline */
     5be:	0f 90       	pop	r0
     5c0:	0f 90       	pop	r0
     5c2:	cf 91       	pop	r28
     5c4:	df 91       	pop	r29
     5c6:	08 95       	ret

000005c8 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
     5c8:	df 93       	push	r29
     5ca:	cf 93       	push	r28
     5cc:	00 d0       	rcall	.+0      	; 0x5ce <lcd_puts+0x6>
     5ce:	00 d0       	rcall	.+0      	; 0x5d0 <lcd_puts+0x8>
     5d0:	cd b7       	in	r28, 0x3d	; 61
     5d2:	de b7       	in	r29, 0x3e	; 62
     5d4:	9a 83       	std	Y+2, r25	; 0x02
     5d6:	89 83       	std	Y+1, r24	; 0x01
     5d8:	03 c0       	rjmp	.+6      	; 0x5e0 <lcd_puts+0x18>
    register char c;

    while ( (c = *s++) ) {
        lcd_putc(c);
     5da:	8b 81       	ldd	r24, Y+3	; 0x03
     5dc:	0e 94 b5 02 	call	0x56a	; 0x56a <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
     5e0:	e9 81       	ldd	r30, Y+1	; 0x01
     5e2:	fa 81       	ldd	r31, Y+2	; 0x02
     5e4:	80 81       	ld	r24, Z
     5e6:	8b 83       	std	Y+3, r24	; 0x03
     5e8:	8b 81       	ldd	r24, Y+3	; 0x03
     5ea:	8c 83       	std	Y+4, r24	; 0x04
     5ec:	8c 81       	ldd	r24, Y+4	; 0x04
     5ee:	88 23       	and	r24, r24
     5f0:	11 f0       	breq	.+4      	; 0x5f6 <lcd_puts+0x2e>
     5f2:	81 e0       	ldi	r24, 0x01	; 1
     5f4:	8c 83       	std	Y+4, r24	; 0x04
     5f6:	8c 81       	ldd	r24, Y+4	; 0x04
     5f8:	29 81       	ldd	r18, Y+1	; 0x01
     5fa:	3a 81       	ldd	r19, Y+2	; 0x02
     5fc:	2f 5f       	subi	r18, 0xFF	; 255
     5fe:	3f 4f       	sbci	r19, 0xFF	; 255
     600:	3a 83       	std	Y+2, r19	; 0x02
     602:	29 83       	std	Y+1, r18	; 0x01
     604:	88 23       	and	r24, r24
     606:	49 f7       	brne	.-46     	; 0x5da <lcd_puts+0x12>
        lcd_putc(c);
    }

}/* lcd_puts */
     608:	0f 90       	pop	r0
     60a:	0f 90       	pop	r0
     60c:	0f 90       	pop	r0
     60e:	0f 90       	pop	r0
     610:	cf 91       	pop	r28
     612:	df 91       	pop	r29
     614:	08 95       	ret

00000616 <lcd_puts_p>:
Input:     string from program memory be be displayed
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
     616:	df 93       	push	r29
     618:	cf 93       	push	r28
     61a:	00 d0       	rcall	.+0      	; 0x61c <lcd_puts_p+0x6>
     61c:	00 d0       	rcall	.+0      	; 0x61e <lcd_puts_p+0x8>
     61e:	00 d0       	rcall	.+0      	; 0x620 <lcd_puts_p+0xa>
     620:	cd b7       	in	r28, 0x3d	; 61
     622:	de b7       	in	r29, 0x3e	; 62
     624:	9d 83       	std	Y+5, r25	; 0x05
     626:	8c 83       	std	Y+4, r24	; 0x04
     628:	03 c0       	rjmp	.+6      	; 0x630 <lcd_puts_p+0x1a>
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
     62a:	8e 81       	ldd	r24, Y+6	; 0x06
     62c:	0e 94 b5 02 	call	0x56a	; 0x56a <lcd_putc>
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
     630:	8c 81       	ldd	r24, Y+4	; 0x04
     632:	9d 81       	ldd	r25, Y+5	; 0x05
     634:	9b 83       	std	Y+3, r25	; 0x03
     636:	8a 83       	std	Y+2, r24	; 0x02
     638:	8c 81       	ldd	r24, Y+4	; 0x04
     63a:	9d 81       	ldd	r25, Y+5	; 0x05
     63c:	01 96       	adiw	r24, 0x01	; 1
     63e:	9d 83       	std	Y+5, r25	; 0x05
     640:	8c 83       	std	Y+4, r24	; 0x04
     642:	ea 81       	ldd	r30, Y+2	; 0x02
     644:	fb 81       	ldd	r31, Y+3	; 0x03
     646:	84 91       	lpm	r24, Z+
     648:	89 83       	std	Y+1, r24	; 0x01
     64a:	89 81       	ldd	r24, Y+1	; 0x01
     64c:	8e 83       	std	Y+6, r24	; 0x06
     64e:	8e 81       	ldd	r24, Y+6	; 0x06
     650:	88 23       	and	r24, r24
     652:	59 f7       	brne	.-42     	; 0x62a <lcd_puts_p+0x14>
        lcd_putc(c);
    }

}/* lcd_puts_p */
     654:	26 96       	adiw	r28, 0x06	; 6
     656:	0f b6       	in	r0, 0x3f	; 63
     658:	f8 94       	cli
     65a:	de bf       	out	0x3e, r29	; 62
     65c:	0f be       	out	0x3f, r0	; 63
     65e:	cd bf       	out	0x3d, r28	; 61
     660:	cf 91       	pop	r28
     662:	df 91       	pop	r29
     664:	08 95       	ret

00000666 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
     666:	df 93       	push	r29
     668:	cf 93       	push	r28
     66a:	0f 92       	push	r0
     66c:	cd b7       	in	r28, 0x3d	; 61
     66e:	de b7       	in	r29, 0x3e	; 62
     670:	89 83       	std	Y+1, r24	; 0x01
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
     672:	a7 e2       	ldi	r26, 0x27	; 39
     674:	b0 e0       	ldi	r27, 0x00	; 0
     676:	e7 e2       	ldi	r30, 0x27	; 39
     678:	f0 e0       	ldi	r31, 0x00	; 0
     67a:	80 81       	ld	r24, Z
     67c:	81 60       	ori	r24, 0x01	; 1
     67e:	8c 93       	st	X, r24
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
     680:	a7 e2       	ldi	r26, 0x27	; 39
     682:	b0 e0       	ldi	r27, 0x00	; 0
     684:	e7 e2       	ldi	r30, 0x27	; 39
     686:	f0 e0       	ldi	r31, 0x00	; 0
     688:	80 81       	ld	r24, Z
     68a:	82 60       	ori	r24, 0x02	; 2
     68c:	8c 93       	st	X, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
     68e:	a7 e2       	ldi	r26, 0x27	; 39
     690:	b0 e0       	ldi	r27, 0x00	; 0
     692:	e7 e2       	ldi	r30, 0x27	; 39
     694:	f0 e0       	ldi	r31, 0x00	; 0
     696:	80 81       	ld	r24, Z
     698:	84 60       	ori	r24, 0x04	; 4
     69a:	8c 93       	st	X, r24
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     69c:	a7 e2       	ldi	r26, 0x27	; 39
     69e:	b0 e0       	ldi	r27, 0x00	; 0
     6a0:	e7 e2       	ldi	r30, 0x27	; 39
     6a2:	f0 e0       	ldi	r31, 0x00	; 0
     6a4:	80 81       	ld	r24, Z
     6a6:	80 61       	ori	r24, 0x10	; 16
     6a8:	8c 93       	st	X, r24
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     6aa:	a7 e2       	ldi	r26, 0x27	; 39
     6ac:	b0 e0       	ldi	r27, 0x00	; 0
     6ae:	e7 e2       	ldi	r30, 0x27	; 39
     6b0:	f0 e0       	ldi	r31, 0x00	; 0
     6b2:	80 81       	ld	r24, Z
     6b4:	80 62       	ori	r24, 0x20	; 32
     6b6:	8c 93       	st	X, r24
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     6b8:	a7 e2       	ldi	r26, 0x27	; 39
     6ba:	b0 e0       	ldi	r27, 0x00	; 0
     6bc:	e7 e2       	ldi	r30, 0x27	; 39
     6be:	f0 e0       	ldi	r31, 0x00	; 0
     6c0:	80 81       	ld	r24, Z
     6c2:	80 64       	ori	r24, 0x40	; 64
     6c4:	8c 93       	st	X, r24
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     6c6:	a7 e2       	ldi	r26, 0x27	; 39
     6c8:	b0 e0       	ldi	r27, 0x00	; 0
     6ca:	e7 e2       	ldi	r30, 0x27	; 39
     6cc:	f0 e0       	ldi	r31, 0x00	; 0
     6ce:	80 81       	ld	r24, Z
     6d0:	80 68       	ori	r24, 0x80	; 128
     6d2:	8c 93       	st	X, r24
    }
    delay(16000);        /* wait 16ms or more after power-on       */
     6d4:	80 e8       	ldi	r24, 0x80	; 128
     6d6:	9e e3       	ldi	r25, 0x3E	; 62
     6d8:	0e 94 46 02 	call	0x48c	; 0x48c <_delayFourCycles>

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
     6dc:	a8 e2       	ldi	r26, 0x28	; 40
     6de:	b0 e0       	ldi	r27, 0x00	; 0
     6e0:	e8 e2       	ldi	r30, 0x28	; 40
     6e2:	f0 e0       	ldi	r31, 0x00	; 0
     6e4:	80 81       	ld	r24, Z
     6e6:	80 62       	ori	r24, 0x20	; 32
     6e8:	8c 93       	st	X, r24
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
     6ea:	a8 e2       	ldi	r26, 0x28	; 40
     6ec:	b0 e0       	ldi	r27, 0x00	; 0
     6ee:	e8 e2       	ldi	r30, 0x28	; 40
     6f0:	f0 e0       	ldi	r31, 0x00	; 0
     6f2:	80 81       	ld	r24, Z
     6f4:	80 61       	ori	r24, 0x10	; 16
     6f6:	8c 93       	st	X, r24
    lcd_e_toggle();
     6f8:	0e 94 5d 00 	call	0xba	; 0xba <toggle_e>
    delay(4992);         /* delay, busy flag can't be checked here */
     6fc:	80 e8       	ldi	r24, 0x80	; 128
     6fe:	93 e1       	ldi	r25, 0x13	; 19
     700:	0e 94 46 02 	call	0x48c	; 0x48c <_delayFourCycles>

    /* repeat last command */
    lcd_e_toggle();
     704:	0e 94 5d 00 	call	0xba	; 0xba <toggle_e>
    delay(64);           /* delay, busy flag can't be checked here */
     708:	80 e4       	ldi	r24, 0x40	; 64
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	0e 94 46 02 	call	0x48c	; 0x48c <_delayFourCycles>

    /* repeat last command a third time */
    lcd_e_toggle();
     710:	0e 94 5d 00 	call	0xba	; 0xba <toggle_e>
    delay(64);           /* delay, busy flag can't be checked here */
     714:	80 e4       	ldi	r24, 0x40	; 64
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	0e 94 46 02 	call	0x48c	; 0x48c <_delayFourCycles>

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
     71c:	a8 e2       	ldi	r26, 0x28	; 40
     71e:	b0 e0       	ldi	r27, 0x00	; 0
     720:	e8 e2       	ldi	r30, 0x28	; 40
     722:	f0 e0       	ldi	r31, 0x00	; 0
     724:	80 81       	ld	r24, Z
     726:	8f 7e       	andi	r24, 0xEF	; 239
     728:	8c 93       	st	X, r24
    lcd_e_toggle();
     72a:	0e 94 5d 00 	call	0xba	; 0xba <toggle_e>
    delay(64);           /* some displays need this additional delay */
     72e:	80 e4       	ldi	r24, 0x40	; 64
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	0e 94 46 02 	call	0x48c	; 0x48c <_delayFourCycles>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
     736:	88 e2       	ldi	r24, 0x28	; 40
     738:	0e 94 5e 02 	call	0x4bc	; 0x4bc <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
     73c:	88 e0       	ldi	r24, 0x08	; 8
     73e:	0e 94 5e 02 	call	0x4bc	; 0x4bc <lcd_command>
    lcd_clrscr();                           /* display clear                */
     742:	0e 94 a1 02 	call	0x542	; 0x542 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
     746:	86 e0       	ldi	r24, 0x06	; 6
     748:	0e 94 5e 02 	call	0x4bc	; 0x4bc <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
     74c:	89 81       	ldd	r24, Y+1	; 0x01
     74e:	0e 94 5e 02 	call	0x4bc	; 0x4bc <lcd_command>

}/* lcd_init */
     752:	0f 90       	pop	r0
     754:	cf 91       	pop	r28
     756:	df 91       	pop	r29
     758:	08 95       	ret

0000075a <__vector_7>:
volatile int holdTime;


// Port D Interrupt service Routine (ISR)
ISR (PCINT3_vect)
{
     75a:	1f 92       	push	r1
     75c:	0f 92       	push	r0
     75e:	0f b6       	in	r0, 0x3f	; 63
     760:	0f 92       	push	r0
     762:	11 24       	eor	r1, r1
     764:	8f 93       	push	r24
     766:	9f 93       	push	r25
     768:	df 93       	push	r29
     76a:	cf 93       	push	r28
     76c:	cd b7       	in	r28, 0x3d	; 61
     76e:	de b7       	in	r29, 0x3e	; 62
	holdTime = 1; //flag stating that a setPoint change is requested
     770:	81 e0       	ldi	r24, 0x01	; 1
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	90 93 2d 02 	sts	0x022D, r25
     778:	80 93 2c 02 	sts	0x022C, r24
}
     77c:	cf 91       	pop	r28
     77e:	df 91       	pop	r29
     780:	9f 91       	pop	r25
     782:	8f 91       	pop	r24
     784:	0f 90       	pop	r0
     786:	0f be       	out	0x3f, r0	; 63
     788:	0f 90       	pop	r0
     78a:	1f 90       	pop	r1
     78c:	18 95       	reti

0000078e <__vector_13>:



ISR(TIMER1_COMPA_vect)
{
     78e:	1f 92       	push	r1
     790:	0f 92       	push	r0
     792:	0f b6       	in	r0, 0x3f	; 63
     794:	0f 92       	push	r0
     796:	11 24       	eor	r1, r1
     798:	2f 93       	push	r18
     79a:	3f 93       	push	r19
     79c:	4f 93       	push	r20
     79e:	5f 93       	push	r21
     7a0:	6f 93       	push	r22
     7a2:	7f 93       	push	r23
     7a4:	8f 93       	push	r24
     7a6:	9f 93       	push	r25
     7a8:	af 93       	push	r26
     7aa:	bf 93       	push	r27
     7ac:	ef 93       	push	r30
     7ae:	ff 93       	push	r31
     7b0:	df 93       	push	r29
     7b2:	cf 93       	push	r28
     7b4:	cd b7       	in	r28, 0x3d	; 61
     7b6:	de b7       	in	r29, 0x3e	; 62
	if((~PINB & 0b00000001)&&(holdTime==1)){ //decreases the currentTemp
     7b8:	e3 e2       	ldi	r30, 0x23	; 35
     7ba:	f0 e0       	ldi	r31, 0x00	; 0
     7bc:	80 81       	ld	r24, Z
     7be:	88 2f       	mov	r24, r24
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	81 70       	andi	r24, 0x01	; 1
     7c4:	90 70       	andi	r25, 0x00	; 0
     7c6:	00 97       	sbiw	r24, 0x00	; 0
     7c8:	b1 f4       	brne	.+44     	; 0x7f6 <__vector_13+0x68>
     7ca:	80 91 2c 02 	lds	r24, 0x022C
     7ce:	90 91 2d 02 	lds	r25, 0x022D
     7d2:	81 30       	cpi	r24, 0x01	; 1
     7d4:	91 05       	cpc	r25, r1
     7d6:	79 f4       	brne	.+30     	; 0x7f6 <__vector_13+0x68>

		setPoint--;
     7d8:	80 91 30 02 	lds	r24, 0x0230
     7dc:	90 91 31 02 	lds	r25, 0x0231
     7e0:	01 97       	sbiw	r24, 0x01	; 1
     7e2:	90 93 31 02 	sts	0x0231, r25
     7e6:	80 93 30 02 	sts	0x0230, r24
		 displaysetPoint ();
     7ea:	0e 94 47 05 	call	0xa8e	; 0xa8e <displaysetPoint>
		holdTime = 0; //clears setPoint change flag
     7ee:	10 92 2d 02 	sts	0x022D, r1
     7f2:	10 92 2c 02 	sts	0x022C, r1
	}

	if((~PINB & 0b10000010)&&(holdTime==1)){ //increases the currentTemp
     7f6:	e3 e2       	ldi	r30, 0x23	; 35
     7f8:	f0 e0       	ldi	r31, 0x00	; 0
     7fa:	80 81       	ld	r24, Z
     7fc:	88 2f       	mov	r24, r24
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	80 95       	com	r24
     802:	90 95       	com	r25
     804:	82 78       	andi	r24, 0x82	; 130
     806:	90 70       	andi	r25, 0x00	; 0
     808:	00 97       	sbiw	r24, 0x00	; 0
     80a:	b1 f0       	breq	.+44     	; 0x838 <__vector_13+0xaa>
     80c:	80 91 2c 02 	lds	r24, 0x022C
     810:	90 91 2d 02 	lds	r25, 0x022D
     814:	81 30       	cpi	r24, 0x01	; 1
     816:	91 05       	cpc	r25, r1
     818:	79 f4       	brne	.+30     	; 0x838 <__vector_13+0xaa>

		setPoint++;
     81a:	80 91 30 02 	lds	r24, 0x0230
     81e:	90 91 31 02 	lds	r25, 0x0231
     822:	01 96       	adiw	r24, 0x01	; 1
     824:	90 93 31 02 	sts	0x0231, r25
     828:	80 93 30 02 	sts	0x0230, r24
		 displaysetPoint ();
     82c:	0e 94 47 05 	call	0xa8e	; 0xa8e <displaysetPoint>
		holdTime = 0;//clears setPoint change flag
     830:	10 92 2d 02 	sts	0x022D, r1
     834:	10 92 2c 02 	sts	0x022C, r1

	}

}
     838:	cf 91       	pop	r28
     83a:	df 91       	pop	r29
     83c:	ff 91       	pop	r31
     83e:	ef 91       	pop	r30
     840:	bf 91       	pop	r27
     842:	af 91       	pop	r26
     844:	9f 91       	pop	r25
     846:	8f 91       	pop	r24
     848:	7f 91       	pop	r23
     84a:	6f 91       	pop	r22
     84c:	5f 91       	pop	r21
     84e:	4f 91       	pop	r20
     850:	3f 91       	pop	r19
     852:	2f 91       	pop	r18
     854:	0f 90       	pop	r0
     856:	0f be       	out	0x3f, r0	; 63
     858:	0f 90       	pop	r0
     85a:	1f 90       	pop	r1
     85c:	18 95       	reti

0000085e <__vector_24>:



ISR (ADC_vect)
{
     85e:	1f 92       	push	r1
     860:	0f 92       	push	r0
     862:	0f b6       	in	r0, 0x3f	; 63
     864:	0f 92       	push	r0
     866:	11 24       	eor	r1, r1
     868:	2f 93       	push	r18
     86a:	3f 93       	push	r19
     86c:	4f 93       	push	r20
     86e:	5f 93       	push	r21
     870:	6f 93       	push	r22
     872:	7f 93       	push	r23
     874:	8f 93       	push	r24
     876:	9f 93       	push	r25
     878:	af 93       	push	r26
     87a:	bf 93       	push	r27
     87c:	ef 93       	push	r30
     87e:	ff 93       	push	r31
     880:	df 93       	push	r29
     882:	cf 93       	push	r28
     884:	cd b7       	in	r28, 0x3d	; 61
     886:	de b7       	in	r29, 0x3e	; 62
	readADC();
     888:	0e 94 bf 04 	call	0x97e	; 0x97e <readADC>

}
     88c:	cf 91       	pop	r28
     88e:	df 91       	pop	r29
     890:	ff 91       	pop	r31
     892:	ef 91       	pop	r30
     894:	bf 91       	pop	r27
     896:	af 91       	pop	r26
     898:	9f 91       	pop	r25
     89a:	8f 91       	pop	r24
     89c:	7f 91       	pop	r23
     89e:	6f 91       	pop	r22
     8a0:	5f 91       	pop	r21
     8a2:	4f 91       	pop	r20
     8a4:	3f 91       	pop	r19
     8a6:	2f 91       	pop	r18
     8a8:	0f 90       	pop	r0
     8aa:	0f be       	out	0x3f, r0	; 63
     8ac:	0f 90       	pop	r0
     8ae:	1f 90       	pop	r1
     8b0:	18 95       	reti

000008b2 <main>:

//entry point and task scheduler loop
int main(void)
{
     8b2:	df 93       	push	r29
     8b4:	cf 93       	push	r28
     8b6:	cd b7       	in	r28, 0x3d	; 61
     8b8:	de b7       	in	r29, 0x3e	; 62
    initialize();					// Initialize to starting state
     8ba:	0e 94 81 04 	call	0x902	; 0x902 <initialize>
    printTemp(); //prints the current temp on the LCD
     8be:	0e 94 20 05 	call	0xa40	; 0xa40 <printTemp>
    while (1){

    	if (currentTemp>setPoint)
     8c2:	80 91 30 02 	lds	r24, 0x0230
     8c6:	90 91 31 02 	lds	r25, 0x0231
     8ca:	9c 01       	movw	r18, r24
     8cc:	80 91 2e 02 	lds	r24, 0x022E
     8d0:	90 91 2f 02 	lds	r25, 0x022F
     8d4:	28 17       	cp	r18, r24
     8d6:	39 07       	cpc	r19, r25
     8d8:	20 f4       	brcc	.+8      	; 0x8e2 <main+0x30>
    	{
    	  PORTA = 0x01;//turn fan on
     8da:	e2 e2       	ldi	r30, 0x22	; 34
     8dc:	f0 e0       	ldi	r31, 0x00	; 0
     8de:	81 e0       	ldi	r24, 0x01	; 1
     8e0:	80 83       	st	Z, r24
    	}

    	if (currentTemp<=setPoint)
     8e2:	80 91 30 02 	lds	r24, 0x0230
     8e6:	90 91 31 02 	lds	r25, 0x0231
     8ea:	9c 01       	movw	r18, r24
     8ec:	80 91 2e 02 	lds	r24, 0x022E
     8f0:	90 91 2f 02 	lds	r25, 0x022F
     8f4:	28 17       	cp	r18, r24
     8f6:	39 07       	cpc	r19, r25
     8f8:	20 f3       	brcs	.-56     	; 0x8c2 <main+0x10>
    	{
    		PORTA = 0x00;//turn fan off
     8fa:	e2 e2       	ldi	r30, 0x22	; 34
     8fc:	f0 e0       	ldi	r31, 0x00	; 0
     8fe:	10 82       	st	Z, r1
     900:	e0 cf       	rjmp	.-64     	; 0x8c2 <main+0x10>

00000902 <initialize>:
}

//initialize()

void initialize(void)
{
     902:	df 93       	push	r29
     904:	cf 93       	push	r28
     906:	cd b7       	in	r28, 0x3d	; 61
     908:	de b7       	in	r29, 0x3e	; 62



	//set up the ports
	DDRA = 0x00; 					// Fan is off
     90a:	e1 e2       	ldi	r30, 0x21	; 33
     90c:	f0 e0       	ldi	r31, 0x00	; 0
     90e:	10 82       	st	Z, r1
	DDRD = 0x00; 					//Port D set to input for Pin Change Interrupts
     910:	ea e2       	ldi	r30, 0x2A	; 42
     912:	f0 e0       	ldi	r31, 0x00	; 0
     914:	10 82       	st	Z, r1

	//lcd_puts("L");
	lcd_init(LCD_DISP_ON);			// Turn on Display
     916:	8c e0       	ldi	r24, 0x0C	; 12
     918:	0e 94 33 03 	call	0x666	; 0x666 <lcd_init>
	lcd_clrscr();					// Clear Screen
     91c:	0e 94 a1 02 	call	0x542	; 0x542 <lcd_clrscr>


	//crank up the ISRs
	PCICR  =0b00001000;					// Enable Pin Change interrupt on Port D
     920:	e8 e6       	ldi	r30, 0x68	; 104
     922:	f0 e0       	ldi	r31, 0x00	; 0
     924:	88 e0       	ldi	r24, 0x08	; 8
     926:	80 83       	st	Z, r24
	PCMSK3 =0b0000011;					// Enable Pin Change interrupt on PIN0 and PIN1 on Port D
     928:	e3 e7       	ldi	r30, 0x73	; 115
     92a:	f0 e0       	ldi	r31, 0x00	; 0
     92c:	83 e0       	ldi	r24, 0x03	; 3
     92e:	80 83       	st	Z, r24

     setPoint = 30; //Sets the setPoint to 30 degrees celsius
     930:	8e e1       	ldi	r24, 0x1E	; 30
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	90 93 31 02 	sts	0x0231, r25
     938:	80 93 30 02 	sts	0x0230, r24

     TCCR1A=0b00000000; //CTC mode no PWM, the most significant 6 bits do not matter for this lab
     93c:	e0 e8       	ldi	r30, 0x80	; 128
     93e:	f0 e0       	ldi	r31, 0x00	; 0
     940:	10 82       	st	Z, r1
     TCCR1B=0b00001100; //prescaler 256
     942:	e1 e8       	ldi	r30, 0x81	; 129
     944:	f0 e0       	ldi	r31, 0x00	; 0
     946:	8c e0       	ldi	r24, 0x0C	; 12
     948:	80 83       	st	Z, r24
     TIMSK1=0b00000010; //enable Output Compare A Match interrupt
     94a:	ef e6       	ldi	r30, 0x6F	; 111
     94c:	f0 e0       	ldi	r31, 0x00	; 0
     94e:	82 e0       	ldi	r24, 0x02	; 2
     950:	80 83       	st	Z, r24
     OCR1A=31250; //set the compare register to 31250 clock ticks -> Output Compare A Match interrupt occurs with 2Hz frequency
     952:	e8 e8       	ldi	r30, 0x88	; 136
     954:	f0 e0       	ldi	r31, 0x00	; 0
     956:	82 e1       	ldi	r24, 0x12	; 18
     958:	9a e7       	ldi	r25, 0x7A	; 122
     95a:	91 83       	std	Z+1, r25	; 0x01
     95c:	80 83       	st	Z, r24

    //ADC
	ADCSRA = 0b10101000;// enables the ADC in auto trigger mode with 2 bit prescaler
     95e:	ea e7       	ldi	r30, 0x7A	; 122
     960:	f0 e0       	ldi	r31, 0x00	; 0
     962:	88 ea       	ldi	r24, 0xA8	; 168
     964:	80 83       	st	Z, r24
	ADCSRB=  0b00000101; // Sets up the ADC to fire when the timer1 match B is fired
     966:	eb e7       	ldi	r30, 0x7B	; 123
     968:	f0 e0       	ldi	r31, 0x00	; 0
     96a:	85 e0       	ldi	r24, 0x05	; 5
     96c:	80 83       	st	Z, r24
	ADMUX =  0b11000000; // use internal 2.56 v for reference voltage with a right adjust result
     96e:	ec e7       	ldi	r30, 0x7C	; 124
     970:	f0 e0       	ldi	r31, 0x00	; 0
     972:	80 ec       	ldi	r24, 0xC0	; 192
     974:	80 83       	st	Z, r24
	sei();
     976:	78 94       	sei
}
     978:	cf 91       	pop	r28
     97a:	df 91       	pop	r29
     97c:	08 95       	ret

0000097e <readADC>:

void readADC (void)
{
     97e:	df 93       	push	r29
     980:	cf 93       	push	r28
     982:	00 d0       	rcall	.+0      	; 0x984 <readADC+0x6>
     984:	0f 92       	push	r0
     986:	cd b7       	in	r28, 0x3d	; 61
     988:	de b7       	in	r29, 0x3e	; 62
	char lowerBits; // stores ADCL bits
	int higherBits; //stores ADCH bits

	higherBits = ADCH<<8;
     98a:	e9 e7       	ldi	r30, 0x79	; 121
     98c:	f0 e0       	ldi	r31, 0x00	; 0
     98e:	80 81       	ld	r24, Z
     990:	88 2f       	mov	r24, r24
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	98 2f       	mov	r25, r24
     996:	88 27       	eor	r24, r24
     998:	9a 83       	std	Y+2, r25	; 0x02
     99a:	89 83       	std	Y+1, r24	; 0x01
	lowerBits = ADCL;
     99c:	e8 e7       	ldi	r30, 0x78	; 120
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	80 81       	ld	r24, Z
     9a2:	8b 83       	std	Y+3, r24	; 0x03
	ADCReading = higherBits;
     9a4:	89 81       	ldd	r24, Y+1	; 0x01
     9a6:	9a 81       	ldd	r25, Y+2	; 0x02
     9a8:	90 93 2b 02 	sts	0x022B, r25
     9ac:	80 93 2a 02 	sts	0x022A, r24
	ADCReading |= lowerBits;
     9b0:	8b 81       	ldd	r24, Y+3	; 0x03
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	80 91 2a 02 	lds	r24, 0x022A
     9ba:	90 91 2b 02 	lds	r25, 0x022B
     9be:	82 2b       	or	r24, r18
     9c0:	93 2b       	or	r25, r19
     9c2:	90 93 2b 02 	sts	0x022B, r25
     9c6:	80 93 2a 02 	sts	0x022A, r24
	currentTemp = ((ADCReading*2.56)/1024/0.03); // updates the currentTemp. Transfer function on pg 253.
     9ca:	80 91 2a 02 	lds	r24, 0x022A
     9ce:	90 91 2b 02 	lds	r25, 0x022B
     9d2:	cc 01       	movw	r24, r24
     9d4:	a0 e0       	ldi	r26, 0x00	; 0
     9d6:	b0 e0       	ldi	r27, 0x00	; 0
     9d8:	bc 01       	movw	r22, r24
     9da:	cd 01       	movw	r24, r26
     9dc:	0e 94 74 09 	call	0x12e8	; 0x12e8 <__floatunsisf>
     9e0:	dc 01       	movw	r26, r24
     9e2:	cb 01       	movw	r24, r22
     9e4:	bc 01       	movw	r22, r24
     9e6:	cd 01       	movw	r24, r26
     9e8:	2a e0       	ldi	r18, 0x0A	; 10
     9ea:	37 ed       	ldi	r19, 0xD7	; 215
     9ec:	43 e2       	ldi	r20, 0x23	; 35
     9ee:	50 e4       	ldi	r21, 0x40	; 64
     9f0:	0e 94 4a 07 	call	0xe94	; 0xe94 <__mulsf3>
     9f4:	dc 01       	movw	r26, r24
     9f6:	cb 01       	movw	r24, r22
     9f8:	bc 01       	movw	r22, r24
     9fa:	cd 01       	movw	r24, r26
     9fc:	20 e0       	ldi	r18, 0x00	; 0
     9fe:	30 e0       	ldi	r19, 0x00	; 0
     a00:	40 e8       	ldi	r20, 0x80	; 128
     a02:	54 e4       	ldi	r21, 0x44	; 68
     a04:	0e 94 44 08 	call	0x1088	; 0x1088 <__divsf3>
     a08:	dc 01       	movw	r26, r24
     a0a:	cb 01       	movw	r24, r22
     a0c:	bc 01       	movw	r22, r24
     a0e:	cd 01       	movw	r24, r26
     a10:	2f e8       	ldi	r18, 0x8F	; 143
     a12:	32 ec       	ldi	r19, 0xC2	; 194
     a14:	45 ef       	ldi	r20, 0xF5	; 245
     a16:	5c e3       	ldi	r21, 0x3C	; 60
     a18:	0e 94 44 08 	call	0x1088	; 0x1088 <__divsf3>
     a1c:	dc 01       	movw	r26, r24
     a1e:	cb 01       	movw	r24, r22
     a20:	bc 01       	movw	r22, r24
     a22:	cd 01       	movw	r24, r26
     a24:	0e 94 74 05 	call	0xae8	; 0xae8 <__fixunssfsi>
     a28:	dc 01       	movw	r26, r24
     a2a:	cb 01       	movw	r24, r22
     a2c:	90 93 2f 02 	sts	0x022F, r25
     a30:	80 93 2e 02 	sts	0x022E, r24
	//The reason is that we divide by 0.03, is that each 1 mv is a change of 1 degree, and we multiply by 3 because of opAMP

}
     a34:	0f 90       	pop	r0
     a36:	0f 90       	pop	r0
     a38:	0f 90       	pop	r0
     a3a:	cf 91       	pop	r28
     a3c:	df 91       	pop	r29
     a3e:	08 95       	ret

00000a40 <printTemp>:


void printTemp (void)
{
     a40:	df 93       	push	r29
     a42:	cf 93       	push	r28
     a44:	cd b7       	in	r28, 0x3d	; 61
     a46:	de b7       	in	r29, 0x3e	; 62
     a48:	2a 97       	sbiw	r28, 0x0a	; 10
     a4a:	0f b6       	in	r0, 0x3f	; 63
     a4c:	f8 94       	cli
     a4e:	de bf       	out	0x3e, r29	; 62
     a50:	0f be       	out	0x3f, r0	; 63
     a52:	cd bf       	out	0x3d, r28	; 61
	char tempArray [10];
	itoa (currentTemp,tempArray,10);
     a54:	80 91 2e 02 	lds	r24, 0x022E
     a58:	90 91 2f 02 	lds	r25, 0x022F
     a5c:	9e 01       	movw	r18, r28
     a5e:	2f 5f       	subi	r18, 0xFF	; 255
     a60:	3f 4f       	sbci	r19, 0xFF	; 255
     a62:	b9 01       	movw	r22, r18
     a64:	4a e0       	ldi	r20, 0x0A	; 10
     a66:	50 e0       	ldi	r21, 0x00	; 0
     a68:	0e 94 19 0c 	call	0x1832	; 0x1832 <itoa>
	lcd_puts ("Current Temperature: ");
     a6c:	80 e0       	ldi	r24, 0x00	; 0
     a6e:	91 e0       	ldi	r25, 0x01	; 1
     a70:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <lcd_puts>
	lcd_puts (tempArray);
     a74:	ce 01       	movw	r24, r28
     a76:	01 96       	adiw	r24, 0x01	; 1
     a78:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <lcd_puts>
}
     a7c:	2a 96       	adiw	r28, 0x0a	; 10
     a7e:	0f b6       	in	r0, 0x3f	; 63
     a80:	f8 94       	cli
     a82:	de bf       	out	0x3e, r29	; 62
     a84:	0f be       	out	0x3f, r0	; 63
     a86:	cd bf       	out	0x3d, r28	; 61
     a88:	cf 91       	pop	r28
     a8a:	df 91       	pop	r29
     a8c:	08 95       	ret

00000a8e <displaysetPoint>:


void displaysetPoint (void)
{		lcd_clrscr();
     a8e:	df 93       	push	r29
     a90:	cf 93       	push	r28
     a92:	cd b7       	in	r28, 0x3d	; 61
     a94:	de b7       	in	r29, 0x3e	; 62
     a96:	2a 97       	sbiw	r28, 0x0a	; 10
     a98:	0f b6       	in	r0, 0x3f	; 63
     a9a:	f8 94       	cli
     a9c:	de bf       	out	0x3e, r29	; 62
     a9e:	0f be       	out	0x3f, r0	; 63
     aa0:	cd bf       	out	0x3d, r28	; 61
     aa2:	0e 94 a1 02 	call	0x542	; 0x542 <lcd_clrscr>
		char setArray [10];
		itoa (setPoint,setArray,10);
     aa6:	80 91 30 02 	lds	r24, 0x0230
     aaa:	90 91 31 02 	lds	r25, 0x0231
     aae:	9e 01       	movw	r18, r28
     ab0:	2f 5f       	subi	r18, 0xFF	; 255
     ab2:	3f 4f       	sbci	r19, 0xFF	; 255
     ab4:	b9 01       	movw	r22, r18
     ab6:	4a e0       	ldi	r20, 0x0A	; 10
     ab8:	50 e0       	ldi	r21, 0x00	; 0
     aba:	0e 94 19 0c 	call	0x1832	; 0x1832 <itoa>
		lcd_gotoxy(0,1);// goes to the next line
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	61 e0       	ldi	r22, 0x01	; 1
     ac2:	0e 94 7e 02 	call	0x4fc	; 0x4fc <lcd_gotoxy>
		lcd_puts ("setPoint: ");
     ac6:	86 e1       	ldi	r24, 0x16	; 22
     ac8:	91 e0       	ldi	r25, 0x01	; 1
     aca:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <lcd_puts>
		lcd_puts (setArray);
     ace:	ce 01       	movw	r24, r28
     ad0:	01 96       	adiw	r24, 0x01	; 1
     ad2:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <lcd_puts>
}
     ad6:	2a 96       	adiw	r28, 0x0a	; 10
     ad8:	0f b6       	in	r0, 0x3f	; 63
     ada:	f8 94       	cli
     adc:	de bf       	out	0x3e, r29	; 62
     ade:	0f be       	out	0x3f, r0	; 63
     ae0:	cd bf       	out	0x3d, r28	; 61
     ae2:	cf 91       	pop	r28
     ae4:	df 91       	pop	r29
     ae6:	08 95       	ret

00000ae8 <__fixunssfsi>:
     ae8:	ef 92       	push	r14
     aea:	ff 92       	push	r15
     aec:	0f 93       	push	r16
     aee:	1f 93       	push	r17
     af0:	7b 01       	movw	r14, r22
     af2:	8c 01       	movw	r16, r24
     af4:	20 e0       	ldi	r18, 0x00	; 0
     af6:	30 e0       	ldi	r19, 0x00	; 0
     af8:	40 e0       	ldi	r20, 0x00	; 0
     afa:	5f e4       	ldi	r21, 0x4F	; 79
     afc:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <__gesf2>
     b00:	88 23       	and	r24, r24
     b02:	8c f0       	brlt	.+34     	; 0xb26 <__fixunssfsi+0x3e>
     b04:	c8 01       	movw	r24, r16
     b06:	b7 01       	movw	r22, r14
     b08:	20 e0       	ldi	r18, 0x00	; 0
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	5f e4       	ldi	r21, 0x4F	; 79
     b10:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__subsf3>
     b14:	0e 94 20 09 	call	0x1240	; 0x1240 <__fixsfsi>
     b18:	9b 01       	movw	r18, r22
     b1a:	ac 01       	movw	r20, r24
     b1c:	20 50       	subi	r18, 0x00	; 0
     b1e:	30 40       	sbci	r19, 0x00	; 0
     b20:	40 40       	sbci	r20, 0x00	; 0
     b22:	50 48       	sbci	r21, 0x80	; 128
     b24:	06 c0       	rjmp	.+12     	; 0xb32 <__fixunssfsi+0x4a>
     b26:	c8 01       	movw	r24, r16
     b28:	b7 01       	movw	r22, r14
     b2a:	0e 94 20 09 	call	0x1240	; 0x1240 <__fixsfsi>
     b2e:	9b 01       	movw	r18, r22
     b30:	ac 01       	movw	r20, r24
     b32:	b9 01       	movw	r22, r18
     b34:	ca 01       	movw	r24, r20
     b36:	1f 91       	pop	r17
     b38:	0f 91       	pop	r16
     b3a:	ff 90       	pop	r15
     b3c:	ef 90       	pop	r14
     b3e:	08 95       	ret

00000b40 <_fpadd_parts>:
     b40:	a0 e0       	ldi	r26, 0x00	; 0
     b42:	b0 e0       	ldi	r27, 0x00	; 0
     b44:	e6 ea       	ldi	r30, 0xA6	; 166
     b46:	f5 e0       	ldi	r31, 0x05	; 5
     b48:	0c 94 e2 0b 	jmp	0x17c4	; 0x17c4 <__prologue_saves__>
     b4c:	dc 01       	movw	r26, r24
     b4e:	2b 01       	movw	r4, r22
     b50:	fa 01       	movw	r30, r20
     b52:	9c 91       	ld	r25, X
     b54:	92 30       	cpi	r25, 0x02	; 2
     b56:	08 f4       	brcc	.+2      	; 0xb5a <_fpadd_parts+0x1a>
     b58:	39 c1       	rjmp	.+626    	; 0xdcc <_fpadd_parts+0x28c>
     b5a:	eb 01       	movw	r28, r22
     b5c:	88 81       	ld	r24, Y
     b5e:	82 30       	cpi	r24, 0x02	; 2
     b60:	08 f4       	brcc	.+2      	; 0xb64 <_fpadd_parts+0x24>
     b62:	33 c1       	rjmp	.+614    	; 0xdca <_fpadd_parts+0x28a>
     b64:	94 30       	cpi	r25, 0x04	; 4
     b66:	69 f4       	brne	.+26     	; 0xb82 <_fpadd_parts+0x42>
     b68:	84 30       	cpi	r24, 0x04	; 4
     b6a:	09 f0       	breq	.+2      	; 0xb6e <_fpadd_parts+0x2e>
     b6c:	2f c1       	rjmp	.+606    	; 0xdcc <_fpadd_parts+0x28c>
     b6e:	11 96       	adiw	r26, 0x01	; 1
     b70:	9c 91       	ld	r25, X
     b72:	11 97       	sbiw	r26, 0x01	; 1
     b74:	89 81       	ldd	r24, Y+1	; 0x01
     b76:	98 17       	cp	r25, r24
     b78:	09 f4       	brne	.+2      	; 0xb7c <_fpadd_parts+0x3c>
     b7a:	28 c1       	rjmp	.+592    	; 0xdcc <_fpadd_parts+0x28c>
     b7c:	a1 e2       	ldi	r26, 0x21	; 33
     b7e:	b1 e0       	ldi	r27, 0x01	; 1
     b80:	25 c1       	rjmp	.+586    	; 0xdcc <_fpadd_parts+0x28c>
     b82:	84 30       	cpi	r24, 0x04	; 4
     b84:	09 f4       	brne	.+2      	; 0xb88 <_fpadd_parts+0x48>
     b86:	21 c1       	rjmp	.+578    	; 0xdca <_fpadd_parts+0x28a>
     b88:	82 30       	cpi	r24, 0x02	; 2
     b8a:	a9 f4       	brne	.+42     	; 0xbb6 <_fpadd_parts+0x76>
     b8c:	92 30       	cpi	r25, 0x02	; 2
     b8e:	09 f0       	breq	.+2      	; 0xb92 <_fpadd_parts+0x52>
     b90:	1d c1       	rjmp	.+570    	; 0xdcc <_fpadd_parts+0x28c>
     b92:	9a 01       	movw	r18, r20
     b94:	ad 01       	movw	r20, r26
     b96:	88 e0       	ldi	r24, 0x08	; 8
     b98:	ea 01       	movw	r28, r20
     b9a:	09 90       	ld	r0, Y+
     b9c:	ae 01       	movw	r20, r28
     b9e:	e9 01       	movw	r28, r18
     ba0:	09 92       	st	Y+, r0
     ba2:	9e 01       	movw	r18, r28
     ba4:	81 50       	subi	r24, 0x01	; 1
     ba6:	c1 f7       	brne	.-16     	; 0xb98 <_fpadd_parts+0x58>
     ba8:	e2 01       	movw	r28, r4
     baa:	89 81       	ldd	r24, Y+1	; 0x01
     bac:	11 96       	adiw	r26, 0x01	; 1
     bae:	9c 91       	ld	r25, X
     bb0:	89 23       	and	r24, r25
     bb2:	81 83       	std	Z+1, r24	; 0x01
     bb4:	08 c1       	rjmp	.+528    	; 0xdc6 <_fpadd_parts+0x286>
     bb6:	92 30       	cpi	r25, 0x02	; 2
     bb8:	09 f4       	brne	.+2      	; 0xbbc <_fpadd_parts+0x7c>
     bba:	07 c1       	rjmp	.+526    	; 0xdca <_fpadd_parts+0x28a>
     bbc:	12 96       	adiw	r26, 0x02	; 2
     bbe:	2d 90       	ld	r2, X+
     bc0:	3c 90       	ld	r3, X
     bc2:	13 97       	sbiw	r26, 0x03	; 3
     bc4:	eb 01       	movw	r28, r22
     bc6:	8a 81       	ldd	r24, Y+2	; 0x02
     bc8:	9b 81       	ldd	r25, Y+3	; 0x03
     bca:	14 96       	adiw	r26, 0x04	; 4
     bcc:	ad 90       	ld	r10, X+
     bce:	bd 90       	ld	r11, X+
     bd0:	cd 90       	ld	r12, X+
     bd2:	dc 90       	ld	r13, X
     bd4:	17 97       	sbiw	r26, 0x07	; 7
     bd6:	ec 80       	ldd	r14, Y+4	; 0x04
     bd8:	fd 80       	ldd	r15, Y+5	; 0x05
     bda:	0e 81       	ldd	r16, Y+6	; 0x06
     bdc:	1f 81       	ldd	r17, Y+7	; 0x07
     bde:	91 01       	movw	r18, r2
     be0:	28 1b       	sub	r18, r24
     be2:	39 0b       	sbc	r19, r25
     be4:	b9 01       	movw	r22, r18
     be6:	37 ff       	sbrs	r19, 7
     be8:	04 c0       	rjmp	.+8      	; 0xbf2 <_fpadd_parts+0xb2>
     bea:	66 27       	eor	r22, r22
     bec:	77 27       	eor	r23, r23
     bee:	62 1b       	sub	r22, r18
     bf0:	73 0b       	sbc	r23, r19
     bf2:	60 32       	cpi	r22, 0x20	; 32
     bf4:	71 05       	cpc	r23, r1
     bf6:	0c f0       	brlt	.+2      	; 0xbfa <_fpadd_parts+0xba>
     bf8:	61 c0       	rjmp	.+194    	; 0xcbc <_fpadd_parts+0x17c>
     bfa:	12 16       	cp	r1, r18
     bfc:	13 06       	cpc	r1, r19
     bfe:	6c f5       	brge	.+90     	; 0xc5a <_fpadd_parts+0x11a>
     c00:	37 01       	movw	r6, r14
     c02:	48 01       	movw	r8, r16
     c04:	06 2e       	mov	r0, r22
     c06:	04 c0       	rjmp	.+8      	; 0xc10 <_fpadd_parts+0xd0>
     c08:	96 94       	lsr	r9
     c0a:	87 94       	ror	r8
     c0c:	77 94       	ror	r7
     c0e:	67 94       	ror	r6
     c10:	0a 94       	dec	r0
     c12:	d2 f7       	brpl	.-12     	; 0xc08 <_fpadd_parts+0xc8>
     c14:	21 e0       	ldi	r18, 0x01	; 1
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	40 e0       	ldi	r20, 0x00	; 0
     c1a:	50 e0       	ldi	r21, 0x00	; 0
     c1c:	04 c0       	rjmp	.+8      	; 0xc26 <_fpadd_parts+0xe6>
     c1e:	22 0f       	add	r18, r18
     c20:	33 1f       	adc	r19, r19
     c22:	44 1f       	adc	r20, r20
     c24:	55 1f       	adc	r21, r21
     c26:	6a 95       	dec	r22
     c28:	d2 f7       	brpl	.-12     	; 0xc1e <_fpadd_parts+0xde>
     c2a:	21 50       	subi	r18, 0x01	; 1
     c2c:	30 40       	sbci	r19, 0x00	; 0
     c2e:	40 40       	sbci	r20, 0x00	; 0
     c30:	50 40       	sbci	r21, 0x00	; 0
     c32:	2e 21       	and	r18, r14
     c34:	3f 21       	and	r19, r15
     c36:	40 23       	and	r20, r16
     c38:	51 23       	and	r21, r17
     c3a:	21 15       	cp	r18, r1
     c3c:	31 05       	cpc	r19, r1
     c3e:	41 05       	cpc	r20, r1
     c40:	51 05       	cpc	r21, r1
     c42:	21 f0       	breq	.+8      	; 0xc4c <_fpadd_parts+0x10c>
     c44:	21 e0       	ldi	r18, 0x01	; 1
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	40 e0       	ldi	r20, 0x00	; 0
     c4a:	50 e0       	ldi	r21, 0x00	; 0
     c4c:	79 01       	movw	r14, r18
     c4e:	8a 01       	movw	r16, r20
     c50:	e6 28       	or	r14, r6
     c52:	f7 28       	or	r15, r7
     c54:	08 29       	or	r16, r8
     c56:	19 29       	or	r17, r9
     c58:	3c c0       	rjmp	.+120    	; 0xcd2 <_fpadd_parts+0x192>
     c5a:	23 2b       	or	r18, r19
     c5c:	d1 f1       	breq	.+116    	; 0xcd2 <_fpadd_parts+0x192>
     c5e:	26 0e       	add	r2, r22
     c60:	37 1e       	adc	r3, r23
     c62:	35 01       	movw	r6, r10
     c64:	46 01       	movw	r8, r12
     c66:	06 2e       	mov	r0, r22
     c68:	04 c0       	rjmp	.+8      	; 0xc72 <_fpadd_parts+0x132>
     c6a:	96 94       	lsr	r9
     c6c:	87 94       	ror	r8
     c6e:	77 94       	ror	r7
     c70:	67 94       	ror	r6
     c72:	0a 94       	dec	r0
     c74:	d2 f7       	brpl	.-12     	; 0xc6a <_fpadd_parts+0x12a>
     c76:	21 e0       	ldi	r18, 0x01	; 1
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	40 e0       	ldi	r20, 0x00	; 0
     c7c:	50 e0       	ldi	r21, 0x00	; 0
     c7e:	04 c0       	rjmp	.+8      	; 0xc88 <_fpadd_parts+0x148>
     c80:	22 0f       	add	r18, r18
     c82:	33 1f       	adc	r19, r19
     c84:	44 1f       	adc	r20, r20
     c86:	55 1f       	adc	r21, r21
     c88:	6a 95       	dec	r22
     c8a:	d2 f7       	brpl	.-12     	; 0xc80 <_fpadd_parts+0x140>
     c8c:	21 50       	subi	r18, 0x01	; 1
     c8e:	30 40       	sbci	r19, 0x00	; 0
     c90:	40 40       	sbci	r20, 0x00	; 0
     c92:	50 40       	sbci	r21, 0x00	; 0
     c94:	2a 21       	and	r18, r10
     c96:	3b 21       	and	r19, r11
     c98:	4c 21       	and	r20, r12
     c9a:	5d 21       	and	r21, r13
     c9c:	21 15       	cp	r18, r1
     c9e:	31 05       	cpc	r19, r1
     ca0:	41 05       	cpc	r20, r1
     ca2:	51 05       	cpc	r21, r1
     ca4:	21 f0       	breq	.+8      	; 0xcae <_fpadd_parts+0x16e>
     ca6:	21 e0       	ldi	r18, 0x01	; 1
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	40 e0       	ldi	r20, 0x00	; 0
     cac:	50 e0       	ldi	r21, 0x00	; 0
     cae:	59 01       	movw	r10, r18
     cb0:	6a 01       	movw	r12, r20
     cb2:	a6 28       	or	r10, r6
     cb4:	b7 28       	or	r11, r7
     cb6:	c8 28       	or	r12, r8
     cb8:	d9 28       	or	r13, r9
     cba:	0b c0       	rjmp	.+22     	; 0xcd2 <_fpadd_parts+0x192>
     cbc:	82 15       	cp	r24, r2
     cbe:	93 05       	cpc	r25, r3
     cc0:	2c f0       	brlt	.+10     	; 0xccc <_fpadd_parts+0x18c>
     cc2:	1c 01       	movw	r2, r24
     cc4:	aa 24       	eor	r10, r10
     cc6:	bb 24       	eor	r11, r11
     cc8:	65 01       	movw	r12, r10
     cca:	03 c0       	rjmp	.+6      	; 0xcd2 <_fpadd_parts+0x192>
     ccc:	ee 24       	eor	r14, r14
     cce:	ff 24       	eor	r15, r15
     cd0:	87 01       	movw	r16, r14
     cd2:	11 96       	adiw	r26, 0x01	; 1
     cd4:	9c 91       	ld	r25, X
     cd6:	d2 01       	movw	r26, r4
     cd8:	11 96       	adiw	r26, 0x01	; 1
     cda:	8c 91       	ld	r24, X
     cdc:	98 17       	cp	r25, r24
     cde:	09 f4       	brne	.+2      	; 0xce2 <_fpadd_parts+0x1a2>
     ce0:	45 c0       	rjmp	.+138    	; 0xd6c <_fpadd_parts+0x22c>
     ce2:	99 23       	and	r25, r25
     ce4:	39 f0       	breq	.+14     	; 0xcf4 <_fpadd_parts+0x1b4>
     ce6:	a8 01       	movw	r20, r16
     ce8:	97 01       	movw	r18, r14
     cea:	2a 19       	sub	r18, r10
     cec:	3b 09       	sbc	r19, r11
     cee:	4c 09       	sbc	r20, r12
     cf0:	5d 09       	sbc	r21, r13
     cf2:	06 c0       	rjmp	.+12     	; 0xd00 <_fpadd_parts+0x1c0>
     cf4:	a6 01       	movw	r20, r12
     cf6:	95 01       	movw	r18, r10
     cf8:	2e 19       	sub	r18, r14
     cfa:	3f 09       	sbc	r19, r15
     cfc:	40 0b       	sbc	r20, r16
     cfe:	51 0b       	sbc	r21, r17
     d00:	57 fd       	sbrc	r21, 7
     d02:	08 c0       	rjmp	.+16     	; 0xd14 <_fpadd_parts+0x1d4>
     d04:	11 82       	std	Z+1, r1	; 0x01
     d06:	33 82       	std	Z+3, r3	; 0x03
     d08:	22 82       	std	Z+2, r2	; 0x02
     d0a:	24 83       	std	Z+4, r18	; 0x04
     d0c:	35 83       	std	Z+5, r19	; 0x05
     d0e:	46 83       	std	Z+6, r20	; 0x06
     d10:	57 83       	std	Z+7, r21	; 0x07
     d12:	1d c0       	rjmp	.+58     	; 0xd4e <_fpadd_parts+0x20e>
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	81 83       	std	Z+1, r24	; 0x01
     d18:	33 82       	std	Z+3, r3	; 0x03
     d1a:	22 82       	std	Z+2, r2	; 0x02
     d1c:	88 27       	eor	r24, r24
     d1e:	99 27       	eor	r25, r25
     d20:	dc 01       	movw	r26, r24
     d22:	82 1b       	sub	r24, r18
     d24:	93 0b       	sbc	r25, r19
     d26:	a4 0b       	sbc	r26, r20
     d28:	b5 0b       	sbc	r27, r21
     d2a:	84 83       	std	Z+4, r24	; 0x04
     d2c:	95 83       	std	Z+5, r25	; 0x05
     d2e:	a6 83       	std	Z+6, r26	; 0x06
     d30:	b7 83       	std	Z+7, r27	; 0x07
     d32:	0d c0       	rjmp	.+26     	; 0xd4e <_fpadd_parts+0x20e>
     d34:	22 0f       	add	r18, r18
     d36:	33 1f       	adc	r19, r19
     d38:	44 1f       	adc	r20, r20
     d3a:	55 1f       	adc	r21, r21
     d3c:	24 83       	std	Z+4, r18	; 0x04
     d3e:	35 83       	std	Z+5, r19	; 0x05
     d40:	46 83       	std	Z+6, r20	; 0x06
     d42:	57 83       	std	Z+7, r21	; 0x07
     d44:	82 81       	ldd	r24, Z+2	; 0x02
     d46:	93 81       	ldd	r25, Z+3	; 0x03
     d48:	01 97       	sbiw	r24, 0x01	; 1
     d4a:	93 83       	std	Z+3, r25	; 0x03
     d4c:	82 83       	std	Z+2, r24	; 0x02
     d4e:	24 81       	ldd	r18, Z+4	; 0x04
     d50:	35 81       	ldd	r19, Z+5	; 0x05
     d52:	46 81       	ldd	r20, Z+6	; 0x06
     d54:	57 81       	ldd	r21, Z+7	; 0x07
     d56:	da 01       	movw	r26, r20
     d58:	c9 01       	movw	r24, r18
     d5a:	01 97       	sbiw	r24, 0x01	; 1
     d5c:	a1 09       	sbc	r26, r1
     d5e:	b1 09       	sbc	r27, r1
     d60:	8f 5f       	subi	r24, 0xFF	; 255
     d62:	9f 4f       	sbci	r25, 0xFF	; 255
     d64:	af 4f       	sbci	r26, 0xFF	; 255
     d66:	bf 43       	sbci	r27, 0x3F	; 63
     d68:	28 f3       	brcs	.-54     	; 0xd34 <_fpadd_parts+0x1f4>
     d6a:	0b c0       	rjmp	.+22     	; 0xd82 <_fpadd_parts+0x242>
     d6c:	91 83       	std	Z+1, r25	; 0x01
     d6e:	33 82       	std	Z+3, r3	; 0x03
     d70:	22 82       	std	Z+2, r2	; 0x02
     d72:	ea 0c       	add	r14, r10
     d74:	fb 1c       	adc	r15, r11
     d76:	0c 1d       	adc	r16, r12
     d78:	1d 1d       	adc	r17, r13
     d7a:	e4 82       	std	Z+4, r14	; 0x04
     d7c:	f5 82       	std	Z+5, r15	; 0x05
     d7e:	06 83       	std	Z+6, r16	; 0x06
     d80:	17 83       	std	Z+7, r17	; 0x07
     d82:	83 e0       	ldi	r24, 0x03	; 3
     d84:	80 83       	st	Z, r24
     d86:	24 81       	ldd	r18, Z+4	; 0x04
     d88:	35 81       	ldd	r19, Z+5	; 0x05
     d8a:	46 81       	ldd	r20, Z+6	; 0x06
     d8c:	57 81       	ldd	r21, Z+7	; 0x07
     d8e:	57 ff       	sbrs	r21, 7
     d90:	1a c0       	rjmp	.+52     	; 0xdc6 <_fpadd_parts+0x286>
     d92:	c9 01       	movw	r24, r18
     d94:	aa 27       	eor	r26, r26
     d96:	97 fd       	sbrc	r25, 7
     d98:	a0 95       	com	r26
     d9a:	ba 2f       	mov	r27, r26
     d9c:	81 70       	andi	r24, 0x01	; 1
     d9e:	90 70       	andi	r25, 0x00	; 0
     da0:	a0 70       	andi	r26, 0x00	; 0
     da2:	b0 70       	andi	r27, 0x00	; 0
     da4:	56 95       	lsr	r21
     da6:	47 95       	ror	r20
     da8:	37 95       	ror	r19
     daa:	27 95       	ror	r18
     dac:	82 2b       	or	r24, r18
     dae:	93 2b       	or	r25, r19
     db0:	a4 2b       	or	r26, r20
     db2:	b5 2b       	or	r27, r21
     db4:	84 83       	std	Z+4, r24	; 0x04
     db6:	95 83       	std	Z+5, r25	; 0x05
     db8:	a6 83       	std	Z+6, r26	; 0x06
     dba:	b7 83       	std	Z+7, r27	; 0x07
     dbc:	82 81       	ldd	r24, Z+2	; 0x02
     dbe:	93 81       	ldd	r25, Z+3	; 0x03
     dc0:	01 96       	adiw	r24, 0x01	; 1
     dc2:	93 83       	std	Z+3, r25	; 0x03
     dc4:	82 83       	std	Z+2, r24	; 0x02
     dc6:	df 01       	movw	r26, r30
     dc8:	01 c0       	rjmp	.+2      	; 0xdcc <_fpadd_parts+0x28c>
     dca:	d2 01       	movw	r26, r4
     dcc:	cd 01       	movw	r24, r26
     dce:	cd b7       	in	r28, 0x3d	; 61
     dd0:	de b7       	in	r29, 0x3e	; 62
     dd2:	e2 e1       	ldi	r30, 0x12	; 18
     dd4:	0c 94 fe 0b 	jmp	0x17fc	; 0x17fc <__epilogue_restores__>

00000dd8 <__subsf3>:
     dd8:	a0 e2       	ldi	r26, 0x20	; 32
     dda:	b0 e0       	ldi	r27, 0x00	; 0
     ddc:	e2 ef       	ldi	r30, 0xF2	; 242
     dde:	f6 e0       	ldi	r31, 0x06	; 6
     de0:	0c 94 ee 0b 	jmp	0x17dc	; 0x17dc <__prologue_saves__+0x18>
     de4:	69 83       	std	Y+1, r22	; 0x01
     de6:	7a 83       	std	Y+2, r23	; 0x02
     de8:	8b 83       	std	Y+3, r24	; 0x03
     dea:	9c 83       	std	Y+4, r25	; 0x04
     dec:	2d 83       	std	Y+5, r18	; 0x05
     dee:	3e 83       	std	Y+6, r19	; 0x06
     df0:	4f 83       	std	Y+7, r20	; 0x07
     df2:	58 87       	std	Y+8, r21	; 0x08
     df4:	e9 e0       	ldi	r30, 0x09	; 9
     df6:	ee 2e       	mov	r14, r30
     df8:	f1 2c       	mov	r15, r1
     dfa:	ec 0e       	add	r14, r28
     dfc:	fd 1e       	adc	r15, r29
     dfe:	ce 01       	movw	r24, r28
     e00:	01 96       	adiw	r24, 0x01	; 1
     e02:	b7 01       	movw	r22, r14
     e04:	0e 94 11 0b 	call	0x1622	; 0x1622 <__unpack_f>
     e08:	8e 01       	movw	r16, r28
     e0a:	0f 5e       	subi	r16, 0xEF	; 239
     e0c:	1f 4f       	sbci	r17, 0xFF	; 255
     e0e:	ce 01       	movw	r24, r28
     e10:	05 96       	adiw	r24, 0x05	; 5
     e12:	b8 01       	movw	r22, r16
     e14:	0e 94 11 0b 	call	0x1622	; 0x1622 <__unpack_f>
     e18:	8a 89       	ldd	r24, Y+18	; 0x12
     e1a:	91 e0       	ldi	r25, 0x01	; 1
     e1c:	89 27       	eor	r24, r25
     e1e:	8a 8b       	std	Y+18, r24	; 0x12
     e20:	c7 01       	movw	r24, r14
     e22:	b8 01       	movw	r22, r16
     e24:	ae 01       	movw	r20, r28
     e26:	47 5e       	subi	r20, 0xE7	; 231
     e28:	5f 4f       	sbci	r21, 0xFF	; 255
     e2a:	0e 94 a0 05 	call	0xb40	; 0xb40 <_fpadd_parts>
     e2e:	0e 94 3c 0a 	call	0x1478	; 0x1478 <__pack_f>
     e32:	a0 96       	adiw	r28, 0x20	; 32
     e34:	e6 e0       	ldi	r30, 0x06	; 6
     e36:	0c 94 0a 0c 	jmp	0x1814	; 0x1814 <__epilogue_restores__+0x18>

00000e3a <__addsf3>:
     e3a:	a0 e2       	ldi	r26, 0x20	; 32
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e3 e2       	ldi	r30, 0x23	; 35
     e40:	f7 e0       	ldi	r31, 0x07	; 7
     e42:	0c 94 ee 0b 	jmp	0x17dc	; 0x17dc <__prologue_saves__+0x18>
     e46:	69 83       	std	Y+1, r22	; 0x01
     e48:	7a 83       	std	Y+2, r23	; 0x02
     e4a:	8b 83       	std	Y+3, r24	; 0x03
     e4c:	9c 83       	std	Y+4, r25	; 0x04
     e4e:	2d 83       	std	Y+5, r18	; 0x05
     e50:	3e 83       	std	Y+6, r19	; 0x06
     e52:	4f 83       	std	Y+7, r20	; 0x07
     e54:	58 87       	std	Y+8, r21	; 0x08
     e56:	f9 e0       	ldi	r31, 0x09	; 9
     e58:	ef 2e       	mov	r14, r31
     e5a:	f1 2c       	mov	r15, r1
     e5c:	ec 0e       	add	r14, r28
     e5e:	fd 1e       	adc	r15, r29
     e60:	ce 01       	movw	r24, r28
     e62:	01 96       	adiw	r24, 0x01	; 1
     e64:	b7 01       	movw	r22, r14
     e66:	0e 94 11 0b 	call	0x1622	; 0x1622 <__unpack_f>
     e6a:	8e 01       	movw	r16, r28
     e6c:	0f 5e       	subi	r16, 0xEF	; 239
     e6e:	1f 4f       	sbci	r17, 0xFF	; 255
     e70:	ce 01       	movw	r24, r28
     e72:	05 96       	adiw	r24, 0x05	; 5
     e74:	b8 01       	movw	r22, r16
     e76:	0e 94 11 0b 	call	0x1622	; 0x1622 <__unpack_f>
     e7a:	c7 01       	movw	r24, r14
     e7c:	b8 01       	movw	r22, r16
     e7e:	ae 01       	movw	r20, r28
     e80:	47 5e       	subi	r20, 0xE7	; 231
     e82:	5f 4f       	sbci	r21, 0xFF	; 255
     e84:	0e 94 a0 05 	call	0xb40	; 0xb40 <_fpadd_parts>
     e88:	0e 94 3c 0a 	call	0x1478	; 0x1478 <__pack_f>
     e8c:	a0 96       	adiw	r28, 0x20	; 32
     e8e:	e6 e0       	ldi	r30, 0x06	; 6
     e90:	0c 94 0a 0c 	jmp	0x1814	; 0x1814 <__epilogue_restores__+0x18>

00000e94 <__mulsf3>:
     e94:	a0 e2       	ldi	r26, 0x20	; 32
     e96:	b0 e0       	ldi	r27, 0x00	; 0
     e98:	e0 e5       	ldi	r30, 0x50	; 80
     e9a:	f7 e0       	ldi	r31, 0x07	; 7
     e9c:	0c 94 e2 0b 	jmp	0x17c4	; 0x17c4 <__prologue_saves__>
     ea0:	69 83       	std	Y+1, r22	; 0x01
     ea2:	7a 83       	std	Y+2, r23	; 0x02
     ea4:	8b 83       	std	Y+3, r24	; 0x03
     ea6:	9c 83       	std	Y+4, r25	; 0x04
     ea8:	2d 83       	std	Y+5, r18	; 0x05
     eaa:	3e 83       	std	Y+6, r19	; 0x06
     eac:	4f 83       	std	Y+7, r20	; 0x07
     eae:	58 87       	std	Y+8, r21	; 0x08
     eb0:	ce 01       	movw	r24, r28
     eb2:	01 96       	adiw	r24, 0x01	; 1
     eb4:	be 01       	movw	r22, r28
     eb6:	67 5f       	subi	r22, 0xF7	; 247
     eb8:	7f 4f       	sbci	r23, 0xFF	; 255
     eba:	0e 94 11 0b 	call	0x1622	; 0x1622 <__unpack_f>
     ebe:	ce 01       	movw	r24, r28
     ec0:	05 96       	adiw	r24, 0x05	; 5
     ec2:	be 01       	movw	r22, r28
     ec4:	6f 5e       	subi	r22, 0xEF	; 239
     ec6:	7f 4f       	sbci	r23, 0xFF	; 255
     ec8:	0e 94 11 0b 	call	0x1622	; 0x1622 <__unpack_f>
     ecc:	99 85       	ldd	r25, Y+9	; 0x09
     ece:	92 30       	cpi	r25, 0x02	; 2
     ed0:	88 f0       	brcs	.+34     	; 0xef4 <__mulsf3+0x60>
     ed2:	89 89       	ldd	r24, Y+17	; 0x11
     ed4:	82 30       	cpi	r24, 0x02	; 2
     ed6:	c8 f0       	brcs	.+50     	; 0xf0a <__mulsf3+0x76>
     ed8:	94 30       	cpi	r25, 0x04	; 4
     eda:	19 f4       	brne	.+6      	; 0xee2 <__mulsf3+0x4e>
     edc:	82 30       	cpi	r24, 0x02	; 2
     ede:	51 f4       	brne	.+20     	; 0xef4 <__mulsf3+0x60>
     ee0:	04 c0       	rjmp	.+8      	; 0xeea <__mulsf3+0x56>
     ee2:	84 30       	cpi	r24, 0x04	; 4
     ee4:	29 f4       	brne	.+10     	; 0xef0 <__mulsf3+0x5c>
     ee6:	92 30       	cpi	r25, 0x02	; 2
     ee8:	81 f4       	brne	.+32     	; 0xf0a <__mulsf3+0x76>
     eea:	81 e2       	ldi	r24, 0x21	; 33
     eec:	91 e0       	ldi	r25, 0x01	; 1
     eee:	c6 c0       	rjmp	.+396    	; 0x107c <__mulsf3+0x1e8>
     ef0:	92 30       	cpi	r25, 0x02	; 2
     ef2:	49 f4       	brne	.+18     	; 0xf06 <__mulsf3+0x72>
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ef8:	8a 89       	ldd	r24, Y+18	; 0x12
     efa:	98 13       	cpse	r25, r24
     efc:	21 e0       	ldi	r18, 0x01	; 1
     efe:	2a 87       	std	Y+10, r18	; 0x0a
     f00:	ce 01       	movw	r24, r28
     f02:	09 96       	adiw	r24, 0x09	; 9
     f04:	bb c0       	rjmp	.+374    	; 0x107c <__mulsf3+0x1e8>
     f06:	82 30       	cpi	r24, 0x02	; 2
     f08:	49 f4       	brne	.+18     	; 0xf1c <__mulsf3+0x88>
     f0a:	20 e0       	ldi	r18, 0x00	; 0
     f0c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f0e:	8a 89       	ldd	r24, Y+18	; 0x12
     f10:	98 13       	cpse	r25, r24
     f12:	21 e0       	ldi	r18, 0x01	; 1
     f14:	2a 8b       	std	Y+18, r18	; 0x12
     f16:	ce 01       	movw	r24, r28
     f18:	41 96       	adiw	r24, 0x11	; 17
     f1a:	b0 c0       	rjmp	.+352    	; 0x107c <__mulsf3+0x1e8>
     f1c:	2d 84       	ldd	r2, Y+13	; 0x0d
     f1e:	3e 84       	ldd	r3, Y+14	; 0x0e
     f20:	4f 84       	ldd	r4, Y+15	; 0x0f
     f22:	58 88       	ldd	r5, Y+16	; 0x10
     f24:	6d 88       	ldd	r6, Y+21	; 0x15
     f26:	7e 88       	ldd	r7, Y+22	; 0x16
     f28:	8f 88       	ldd	r8, Y+23	; 0x17
     f2a:	98 8c       	ldd	r9, Y+24	; 0x18
     f2c:	ee 24       	eor	r14, r14
     f2e:	ff 24       	eor	r15, r15
     f30:	87 01       	movw	r16, r14
     f32:	aa 24       	eor	r10, r10
     f34:	bb 24       	eor	r11, r11
     f36:	65 01       	movw	r12, r10
     f38:	40 e0       	ldi	r20, 0x00	; 0
     f3a:	50 e0       	ldi	r21, 0x00	; 0
     f3c:	60 e0       	ldi	r22, 0x00	; 0
     f3e:	70 e0       	ldi	r23, 0x00	; 0
     f40:	e0 e0       	ldi	r30, 0x00	; 0
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	c1 01       	movw	r24, r2
     f46:	81 70       	andi	r24, 0x01	; 1
     f48:	90 70       	andi	r25, 0x00	; 0
     f4a:	89 2b       	or	r24, r25
     f4c:	e9 f0       	breq	.+58     	; 0xf88 <__mulsf3+0xf4>
     f4e:	e6 0c       	add	r14, r6
     f50:	f7 1c       	adc	r15, r7
     f52:	08 1d       	adc	r16, r8
     f54:	19 1d       	adc	r17, r9
     f56:	9a 01       	movw	r18, r20
     f58:	ab 01       	movw	r20, r22
     f5a:	2a 0d       	add	r18, r10
     f5c:	3b 1d       	adc	r19, r11
     f5e:	4c 1d       	adc	r20, r12
     f60:	5d 1d       	adc	r21, r13
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	a0 e0       	ldi	r26, 0x00	; 0
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	e6 14       	cp	r14, r6
     f6c:	f7 04       	cpc	r15, r7
     f6e:	08 05       	cpc	r16, r8
     f70:	19 05       	cpc	r17, r9
     f72:	20 f4       	brcc	.+8      	; 0xf7c <__mulsf3+0xe8>
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	a0 e0       	ldi	r26, 0x00	; 0
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	ba 01       	movw	r22, r20
     f7e:	a9 01       	movw	r20, r18
     f80:	48 0f       	add	r20, r24
     f82:	59 1f       	adc	r21, r25
     f84:	6a 1f       	adc	r22, r26
     f86:	7b 1f       	adc	r23, r27
     f88:	aa 0c       	add	r10, r10
     f8a:	bb 1c       	adc	r11, r11
     f8c:	cc 1c       	adc	r12, r12
     f8e:	dd 1c       	adc	r13, r13
     f90:	97 fe       	sbrs	r9, 7
     f92:	08 c0       	rjmp	.+16     	; 0xfa4 <__mulsf3+0x110>
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	a0 e0       	ldi	r26, 0x00	; 0
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	a8 2a       	or	r10, r24
     f9e:	b9 2a       	or	r11, r25
     fa0:	ca 2a       	or	r12, r26
     fa2:	db 2a       	or	r13, r27
     fa4:	31 96       	adiw	r30, 0x01	; 1
     fa6:	e0 32       	cpi	r30, 0x20	; 32
     fa8:	f1 05       	cpc	r31, r1
     faa:	49 f0       	breq	.+18     	; 0xfbe <__mulsf3+0x12a>
     fac:	66 0c       	add	r6, r6
     fae:	77 1c       	adc	r7, r7
     fb0:	88 1c       	adc	r8, r8
     fb2:	99 1c       	adc	r9, r9
     fb4:	56 94       	lsr	r5
     fb6:	47 94       	ror	r4
     fb8:	37 94       	ror	r3
     fba:	27 94       	ror	r2
     fbc:	c3 cf       	rjmp	.-122    	; 0xf44 <__mulsf3+0xb0>
     fbe:	fa 85       	ldd	r31, Y+10	; 0x0a
     fc0:	ea 89       	ldd	r30, Y+18	; 0x12
     fc2:	2b 89       	ldd	r18, Y+19	; 0x13
     fc4:	3c 89       	ldd	r19, Y+20	; 0x14
     fc6:	8b 85       	ldd	r24, Y+11	; 0x0b
     fc8:	9c 85       	ldd	r25, Y+12	; 0x0c
     fca:	28 0f       	add	r18, r24
     fcc:	39 1f       	adc	r19, r25
     fce:	2e 5f       	subi	r18, 0xFE	; 254
     fd0:	3f 4f       	sbci	r19, 0xFF	; 255
     fd2:	17 c0       	rjmp	.+46     	; 0x1002 <__mulsf3+0x16e>
     fd4:	ca 01       	movw	r24, r20
     fd6:	81 70       	andi	r24, 0x01	; 1
     fd8:	90 70       	andi	r25, 0x00	; 0
     fda:	89 2b       	or	r24, r25
     fdc:	61 f0       	breq	.+24     	; 0xff6 <__mulsf3+0x162>
     fde:	16 95       	lsr	r17
     fe0:	07 95       	ror	r16
     fe2:	f7 94       	ror	r15
     fe4:	e7 94       	ror	r14
     fe6:	80 e0       	ldi	r24, 0x00	; 0
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	a0 e0       	ldi	r26, 0x00	; 0
     fec:	b0 e8       	ldi	r27, 0x80	; 128
     fee:	e8 2a       	or	r14, r24
     ff0:	f9 2a       	or	r15, r25
     ff2:	0a 2b       	or	r16, r26
     ff4:	1b 2b       	or	r17, r27
     ff6:	76 95       	lsr	r23
     ff8:	67 95       	ror	r22
     ffa:	57 95       	ror	r21
     ffc:	47 95       	ror	r20
     ffe:	2f 5f       	subi	r18, 0xFF	; 255
    1000:	3f 4f       	sbci	r19, 0xFF	; 255
    1002:	77 fd       	sbrc	r23, 7
    1004:	e7 cf       	rjmp	.-50     	; 0xfd4 <__mulsf3+0x140>
    1006:	0c c0       	rjmp	.+24     	; 0x1020 <__mulsf3+0x18c>
    1008:	44 0f       	add	r20, r20
    100a:	55 1f       	adc	r21, r21
    100c:	66 1f       	adc	r22, r22
    100e:	77 1f       	adc	r23, r23
    1010:	17 fd       	sbrc	r17, 7
    1012:	41 60       	ori	r20, 0x01	; 1
    1014:	ee 0c       	add	r14, r14
    1016:	ff 1c       	adc	r15, r15
    1018:	00 1f       	adc	r16, r16
    101a:	11 1f       	adc	r17, r17
    101c:	21 50       	subi	r18, 0x01	; 1
    101e:	30 40       	sbci	r19, 0x00	; 0
    1020:	40 30       	cpi	r20, 0x00	; 0
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	59 07       	cpc	r21, r25
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	69 07       	cpc	r22, r25
    102a:	90 e4       	ldi	r25, 0x40	; 64
    102c:	79 07       	cpc	r23, r25
    102e:	60 f3       	brcs	.-40     	; 0x1008 <__mulsf3+0x174>
    1030:	2b 8f       	std	Y+27, r18	; 0x1b
    1032:	3c 8f       	std	Y+28, r19	; 0x1c
    1034:	db 01       	movw	r26, r22
    1036:	ca 01       	movw	r24, r20
    1038:	8f 77       	andi	r24, 0x7F	; 127
    103a:	90 70       	andi	r25, 0x00	; 0
    103c:	a0 70       	andi	r26, 0x00	; 0
    103e:	b0 70       	andi	r27, 0x00	; 0
    1040:	80 34       	cpi	r24, 0x40	; 64
    1042:	91 05       	cpc	r25, r1
    1044:	a1 05       	cpc	r26, r1
    1046:	b1 05       	cpc	r27, r1
    1048:	61 f4       	brne	.+24     	; 0x1062 <__mulsf3+0x1ce>
    104a:	47 fd       	sbrc	r20, 7
    104c:	0a c0       	rjmp	.+20     	; 0x1062 <__mulsf3+0x1ce>
    104e:	e1 14       	cp	r14, r1
    1050:	f1 04       	cpc	r15, r1
    1052:	01 05       	cpc	r16, r1
    1054:	11 05       	cpc	r17, r1
    1056:	29 f0       	breq	.+10     	; 0x1062 <__mulsf3+0x1ce>
    1058:	40 5c       	subi	r20, 0xC0	; 192
    105a:	5f 4f       	sbci	r21, 0xFF	; 255
    105c:	6f 4f       	sbci	r22, 0xFF	; 255
    105e:	7f 4f       	sbci	r23, 0xFF	; 255
    1060:	40 78       	andi	r20, 0x80	; 128
    1062:	1a 8e       	std	Y+26, r1	; 0x1a
    1064:	fe 17       	cp	r31, r30
    1066:	11 f0       	breq	.+4      	; 0x106c <__mulsf3+0x1d8>
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	8a 8f       	std	Y+26, r24	; 0x1a
    106c:	4d 8f       	std	Y+29, r20	; 0x1d
    106e:	5e 8f       	std	Y+30, r21	; 0x1e
    1070:	6f 8f       	std	Y+31, r22	; 0x1f
    1072:	78 a3       	std	Y+32, r23	; 0x20
    1074:	83 e0       	ldi	r24, 0x03	; 3
    1076:	89 8f       	std	Y+25, r24	; 0x19
    1078:	ce 01       	movw	r24, r28
    107a:	49 96       	adiw	r24, 0x19	; 25
    107c:	0e 94 3c 0a 	call	0x1478	; 0x1478 <__pack_f>
    1080:	a0 96       	adiw	r28, 0x20	; 32
    1082:	e2 e1       	ldi	r30, 0x12	; 18
    1084:	0c 94 fe 0b 	jmp	0x17fc	; 0x17fc <__epilogue_restores__>

00001088 <__divsf3>:
    1088:	a8 e1       	ldi	r26, 0x18	; 24
    108a:	b0 e0       	ldi	r27, 0x00	; 0
    108c:	ea e4       	ldi	r30, 0x4A	; 74
    108e:	f8 e0       	ldi	r31, 0x08	; 8
    1090:	0c 94 ea 0b 	jmp	0x17d4	; 0x17d4 <__prologue_saves__+0x10>
    1094:	69 83       	std	Y+1, r22	; 0x01
    1096:	7a 83       	std	Y+2, r23	; 0x02
    1098:	8b 83       	std	Y+3, r24	; 0x03
    109a:	9c 83       	std	Y+4, r25	; 0x04
    109c:	2d 83       	std	Y+5, r18	; 0x05
    109e:	3e 83       	std	Y+6, r19	; 0x06
    10a0:	4f 83       	std	Y+7, r20	; 0x07
    10a2:	58 87       	std	Y+8, r21	; 0x08
    10a4:	b9 e0       	ldi	r27, 0x09	; 9
    10a6:	eb 2e       	mov	r14, r27
    10a8:	f1 2c       	mov	r15, r1
    10aa:	ec 0e       	add	r14, r28
    10ac:	fd 1e       	adc	r15, r29
    10ae:	ce 01       	movw	r24, r28
    10b0:	01 96       	adiw	r24, 0x01	; 1
    10b2:	b7 01       	movw	r22, r14
    10b4:	0e 94 11 0b 	call	0x1622	; 0x1622 <__unpack_f>
    10b8:	8e 01       	movw	r16, r28
    10ba:	0f 5e       	subi	r16, 0xEF	; 239
    10bc:	1f 4f       	sbci	r17, 0xFF	; 255
    10be:	ce 01       	movw	r24, r28
    10c0:	05 96       	adiw	r24, 0x05	; 5
    10c2:	b8 01       	movw	r22, r16
    10c4:	0e 94 11 0b 	call	0x1622	; 0x1622 <__unpack_f>
    10c8:	29 85       	ldd	r18, Y+9	; 0x09
    10ca:	22 30       	cpi	r18, 0x02	; 2
    10cc:	08 f4       	brcc	.+2      	; 0x10d0 <__divsf3+0x48>
    10ce:	7e c0       	rjmp	.+252    	; 0x11cc <__divsf3+0x144>
    10d0:	39 89       	ldd	r19, Y+17	; 0x11
    10d2:	32 30       	cpi	r19, 0x02	; 2
    10d4:	10 f4       	brcc	.+4      	; 0x10da <__divsf3+0x52>
    10d6:	b8 01       	movw	r22, r16
    10d8:	7c c0       	rjmp	.+248    	; 0x11d2 <__divsf3+0x14a>
    10da:	8a 85       	ldd	r24, Y+10	; 0x0a
    10dc:	9a 89       	ldd	r25, Y+18	; 0x12
    10de:	89 27       	eor	r24, r25
    10e0:	8a 87       	std	Y+10, r24	; 0x0a
    10e2:	24 30       	cpi	r18, 0x04	; 4
    10e4:	11 f0       	breq	.+4      	; 0x10ea <__divsf3+0x62>
    10e6:	22 30       	cpi	r18, 0x02	; 2
    10e8:	31 f4       	brne	.+12     	; 0x10f6 <__divsf3+0x6e>
    10ea:	23 17       	cp	r18, r19
    10ec:	09 f0       	breq	.+2      	; 0x10f0 <__divsf3+0x68>
    10ee:	6e c0       	rjmp	.+220    	; 0x11cc <__divsf3+0x144>
    10f0:	61 e2       	ldi	r22, 0x21	; 33
    10f2:	71 e0       	ldi	r23, 0x01	; 1
    10f4:	6e c0       	rjmp	.+220    	; 0x11d2 <__divsf3+0x14a>
    10f6:	34 30       	cpi	r19, 0x04	; 4
    10f8:	39 f4       	brne	.+14     	; 0x1108 <__divsf3+0x80>
    10fa:	1d 86       	std	Y+13, r1	; 0x0d
    10fc:	1e 86       	std	Y+14, r1	; 0x0e
    10fe:	1f 86       	std	Y+15, r1	; 0x0f
    1100:	18 8a       	std	Y+16, r1	; 0x10
    1102:	1c 86       	std	Y+12, r1	; 0x0c
    1104:	1b 86       	std	Y+11, r1	; 0x0b
    1106:	04 c0       	rjmp	.+8      	; 0x1110 <__divsf3+0x88>
    1108:	32 30       	cpi	r19, 0x02	; 2
    110a:	21 f4       	brne	.+8      	; 0x1114 <__divsf3+0x8c>
    110c:	84 e0       	ldi	r24, 0x04	; 4
    110e:	89 87       	std	Y+9, r24	; 0x09
    1110:	b7 01       	movw	r22, r14
    1112:	5f c0       	rjmp	.+190    	; 0x11d2 <__divsf3+0x14a>
    1114:	2b 85       	ldd	r18, Y+11	; 0x0b
    1116:	3c 85       	ldd	r19, Y+12	; 0x0c
    1118:	8b 89       	ldd	r24, Y+19	; 0x13
    111a:	9c 89       	ldd	r25, Y+20	; 0x14
    111c:	28 1b       	sub	r18, r24
    111e:	39 0b       	sbc	r19, r25
    1120:	3c 87       	std	Y+12, r19	; 0x0c
    1122:	2b 87       	std	Y+11, r18	; 0x0b
    1124:	ed 84       	ldd	r14, Y+13	; 0x0d
    1126:	fe 84       	ldd	r15, Y+14	; 0x0e
    1128:	0f 85       	ldd	r16, Y+15	; 0x0f
    112a:	18 89       	ldd	r17, Y+16	; 0x10
    112c:	ad 88       	ldd	r10, Y+21	; 0x15
    112e:	be 88       	ldd	r11, Y+22	; 0x16
    1130:	cf 88       	ldd	r12, Y+23	; 0x17
    1132:	d8 8c       	ldd	r13, Y+24	; 0x18
    1134:	ea 14       	cp	r14, r10
    1136:	fb 04       	cpc	r15, r11
    1138:	0c 05       	cpc	r16, r12
    113a:	1d 05       	cpc	r17, r13
    113c:	40 f4       	brcc	.+16     	; 0x114e <__divsf3+0xc6>
    113e:	ee 0c       	add	r14, r14
    1140:	ff 1c       	adc	r15, r15
    1142:	00 1f       	adc	r16, r16
    1144:	11 1f       	adc	r17, r17
    1146:	21 50       	subi	r18, 0x01	; 1
    1148:	30 40       	sbci	r19, 0x00	; 0
    114a:	3c 87       	std	Y+12, r19	; 0x0c
    114c:	2b 87       	std	Y+11, r18	; 0x0b
    114e:	20 e0       	ldi	r18, 0x00	; 0
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	40 e0       	ldi	r20, 0x00	; 0
    1154:	50 e0       	ldi	r21, 0x00	; 0
    1156:	80 e0       	ldi	r24, 0x00	; 0
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	a0 e0       	ldi	r26, 0x00	; 0
    115c:	b0 e4       	ldi	r27, 0x40	; 64
    115e:	60 e0       	ldi	r22, 0x00	; 0
    1160:	70 e0       	ldi	r23, 0x00	; 0
    1162:	ea 14       	cp	r14, r10
    1164:	fb 04       	cpc	r15, r11
    1166:	0c 05       	cpc	r16, r12
    1168:	1d 05       	cpc	r17, r13
    116a:	40 f0       	brcs	.+16     	; 0x117c <__divsf3+0xf4>
    116c:	28 2b       	or	r18, r24
    116e:	39 2b       	or	r19, r25
    1170:	4a 2b       	or	r20, r26
    1172:	5b 2b       	or	r21, r27
    1174:	ea 18       	sub	r14, r10
    1176:	fb 08       	sbc	r15, r11
    1178:	0c 09       	sbc	r16, r12
    117a:	1d 09       	sbc	r17, r13
    117c:	b6 95       	lsr	r27
    117e:	a7 95       	ror	r26
    1180:	97 95       	ror	r25
    1182:	87 95       	ror	r24
    1184:	ee 0c       	add	r14, r14
    1186:	ff 1c       	adc	r15, r15
    1188:	00 1f       	adc	r16, r16
    118a:	11 1f       	adc	r17, r17
    118c:	6f 5f       	subi	r22, 0xFF	; 255
    118e:	7f 4f       	sbci	r23, 0xFF	; 255
    1190:	6f 31       	cpi	r22, 0x1F	; 31
    1192:	71 05       	cpc	r23, r1
    1194:	31 f7       	brne	.-52     	; 0x1162 <__divsf3+0xda>
    1196:	da 01       	movw	r26, r20
    1198:	c9 01       	movw	r24, r18
    119a:	8f 77       	andi	r24, 0x7F	; 127
    119c:	90 70       	andi	r25, 0x00	; 0
    119e:	a0 70       	andi	r26, 0x00	; 0
    11a0:	b0 70       	andi	r27, 0x00	; 0
    11a2:	80 34       	cpi	r24, 0x40	; 64
    11a4:	91 05       	cpc	r25, r1
    11a6:	a1 05       	cpc	r26, r1
    11a8:	b1 05       	cpc	r27, r1
    11aa:	61 f4       	brne	.+24     	; 0x11c4 <__divsf3+0x13c>
    11ac:	27 fd       	sbrc	r18, 7
    11ae:	0a c0       	rjmp	.+20     	; 0x11c4 <__divsf3+0x13c>
    11b0:	e1 14       	cp	r14, r1
    11b2:	f1 04       	cpc	r15, r1
    11b4:	01 05       	cpc	r16, r1
    11b6:	11 05       	cpc	r17, r1
    11b8:	29 f0       	breq	.+10     	; 0x11c4 <__divsf3+0x13c>
    11ba:	20 5c       	subi	r18, 0xC0	; 192
    11bc:	3f 4f       	sbci	r19, 0xFF	; 255
    11be:	4f 4f       	sbci	r20, 0xFF	; 255
    11c0:	5f 4f       	sbci	r21, 0xFF	; 255
    11c2:	20 78       	andi	r18, 0x80	; 128
    11c4:	2d 87       	std	Y+13, r18	; 0x0d
    11c6:	3e 87       	std	Y+14, r19	; 0x0e
    11c8:	4f 87       	std	Y+15, r20	; 0x0f
    11ca:	58 8b       	std	Y+16, r21	; 0x10
    11cc:	be 01       	movw	r22, r28
    11ce:	67 5f       	subi	r22, 0xF7	; 247
    11d0:	7f 4f       	sbci	r23, 0xFF	; 255
    11d2:	cb 01       	movw	r24, r22
    11d4:	0e 94 3c 0a 	call	0x1478	; 0x1478 <__pack_f>
    11d8:	68 96       	adiw	r28, 0x18	; 24
    11da:	ea e0       	ldi	r30, 0x0A	; 10
    11dc:	0c 94 06 0c 	jmp	0x180c	; 0x180c <__epilogue_restores__+0x10>

000011e0 <__gesf2>:
    11e0:	a8 e1       	ldi	r26, 0x18	; 24
    11e2:	b0 e0       	ldi	r27, 0x00	; 0
    11e4:	e6 ef       	ldi	r30, 0xF6	; 246
    11e6:	f8 e0       	ldi	r31, 0x08	; 8
    11e8:	0c 94 ee 0b 	jmp	0x17dc	; 0x17dc <__prologue_saves__+0x18>
    11ec:	69 83       	std	Y+1, r22	; 0x01
    11ee:	7a 83       	std	Y+2, r23	; 0x02
    11f0:	8b 83       	std	Y+3, r24	; 0x03
    11f2:	9c 83       	std	Y+4, r25	; 0x04
    11f4:	2d 83       	std	Y+5, r18	; 0x05
    11f6:	3e 83       	std	Y+6, r19	; 0x06
    11f8:	4f 83       	std	Y+7, r20	; 0x07
    11fa:	58 87       	std	Y+8, r21	; 0x08
    11fc:	89 e0       	ldi	r24, 0x09	; 9
    11fe:	e8 2e       	mov	r14, r24
    1200:	f1 2c       	mov	r15, r1
    1202:	ec 0e       	add	r14, r28
    1204:	fd 1e       	adc	r15, r29
    1206:	ce 01       	movw	r24, r28
    1208:	01 96       	adiw	r24, 0x01	; 1
    120a:	b7 01       	movw	r22, r14
    120c:	0e 94 11 0b 	call	0x1622	; 0x1622 <__unpack_f>
    1210:	8e 01       	movw	r16, r28
    1212:	0f 5e       	subi	r16, 0xEF	; 239
    1214:	1f 4f       	sbci	r17, 0xFF	; 255
    1216:	ce 01       	movw	r24, r28
    1218:	05 96       	adiw	r24, 0x05	; 5
    121a:	b8 01       	movw	r22, r16
    121c:	0e 94 11 0b 	call	0x1622	; 0x1622 <__unpack_f>
    1220:	89 85       	ldd	r24, Y+9	; 0x09
    1222:	82 30       	cpi	r24, 0x02	; 2
    1224:	40 f0       	brcs	.+16     	; 0x1236 <__gesf2+0x56>
    1226:	89 89       	ldd	r24, Y+17	; 0x11
    1228:	82 30       	cpi	r24, 0x02	; 2
    122a:	28 f0       	brcs	.+10     	; 0x1236 <__gesf2+0x56>
    122c:	c7 01       	movw	r24, r14
    122e:	b8 01       	movw	r22, r16
    1230:	0e 94 89 0b 	call	0x1712	; 0x1712 <__fpcmp_parts_f>
    1234:	01 c0       	rjmp	.+2      	; 0x1238 <__gesf2+0x58>
    1236:	8f ef       	ldi	r24, 0xFF	; 255
    1238:	68 96       	adiw	r28, 0x18	; 24
    123a:	e6 e0       	ldi	r30, 0x06	; 6
    123c:	0c 94 0a 0c 	jmp	0x1814	; 0x1814 <__epilogue_restores__+0x18>

00001240 <__fixsfsi>:
    1240:	ac e0       	ldi	r26, 0x0C	; 12
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	e6 e2       	ldi	r30, 0x26	; 38
    1246:	f9 e0       	ldi	r31, 0x09	; 9
    1248:	0c 94 f2 0b 	jmp	0x17e4	; 0x17e4 <__prologue_saves__+0x20>
    124c:	69 83       	std	Y+1, r22	; 0x01
    124e:	7a 83       	std	Y+2, r23	; 0x02
    1250:	8b 83       	std	Y+3, r24	; 0x03
    1252:	9c 83       	std	Y+4, r25	; 0x04
    1254:	ce 01       	movw	r24, r28
    1256:	01 96       	adiw	r24, 0x01	; 1
    1258:	be 01       	movw	r22, r28
    125a:	6b 5f       	subi	r22, 0xFB	; 251
    125c:	7f 4f       	sbci	r23, 0xFF	; 255
    125e:	0e 94 11 0b 	call	0x1622	; 0x1622 <__unpack_f>
    1262:	8d 81       	ldd	r24, Y+5	; 0x05
    1264:	82 30       	cpi	r24, 0x02	; 2
    1266:	61 f1       	breq	.+88     	; 0x12c0 <__fixsfsi+0x80>
    1268:	82 30       	cpi	r24, 0x02	; 2
    126a:	50 f1       	brcs	.+84     	; 0x12c0 <__fixsfsi+0x80>
    126c:	84 30       	cpi	r24, 0x04	; 4
    126e:	21 f4       	brne	.+8      	; 0x1278 <__fixsfsi+0x38>
    1270:	8e 81       	ldd	r24, Y+6	; 0x06
    1272:	88 23       	and	r24, r24
    1274:	51 f1       	breq	.+84     	; 0x12ca <__fixsfsi+0x8a>
    1276:	2e c0       	rjmp	.+92     	; 0x12d4 <__fixsfsi+0x94>
    1278:	2f 81       	ldd	r18, Y+7	; 0x07
    127a:	38 85       	ldd	r19, Y+8	; 0x08
    127c:	37 fd       	sbrc	r19, 7
    127e:	20 c0       	rjmp	.+64     	; 0x12c0 <__fixsfsi+0x80>
    1280:	6e 81       	ldd	r22, Y+6	; 0x06
    1282:	2f 31       	cpi	r18, 0x1F	; 31
    1284:	31 05       	cpc	r19, r1
    1286:	1c f0       	brlt	.+6      	; 0x128e <__fixsfsi+0x4e>
    1288:	66 23       	and	r22, r22
    128a:	f9 f0       	breq	.+62     	; 0x12ca <__fixsfsi+0x8a>
    128c:	23 c0       	rjmp	.+70     	; 0x12d4 <__fixsfsi+0x94>
    128e:	8e e1       	ldi	r24, 0x1E	; 30
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	82 1b       	sub	r24, r18
    1294:	93 0b       	sbc	r25, r19
    1296:	29 85       	ldd	r18, Y+9	; 0x09
    1298:	3a 85       	ldd	r19, Y+10	; 0x0a
    129a:	4b 85       	ldd	r20, Y+11	; 0x0b
    129c:	5c 85       	ldd	r21, Y+12	; 0x0c
    129e:	04 c0       	rjmp	.+8      	; 0x12a8 <__fixsfsi+0x68>
    12a0:	56 95       	lsr	r21
    12a2:	47 95       	ror	r20
    12a4:	37 95       	ror	r19
    12a6:	27 95       	ror	r18
    12a8:	8a 95       	dec	r24
    12aa:	d2 f7       	brpl	.-12     	; 0x12a0 <__fixsfsi+0x60>
    12ac:	66 23       	and	r22, r22
    12ae:	b1 f0       	breq	.+44     	; 0x12dc <__fixsfsi+0x9c>
    12b0:	50 95       	com	r21
    12b2:	40 95       	com	r20
    12b4:	30 95       	com	r19
    12b6:	21 95       	neg	r18
    12b8:	3f 4f       	sbci	r19, 0xFF	; 255
    12ba:	4f 4f       	sbci	r20, 0xFF	; 255
    12bc:	5f 4f       	sbci	r21, 0xFF	; 255
    12be:	0e c0       	rjmp	.+28     	; 0x12dc <__fixsfsi+0x9c>
    12c0:	20 e0       	ldi	r18, 0x00	; 0
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	40 e0       	ldi	r20, 0x00	; 0
    12c6:	50 e0       	ldi	r21, 0x00	; 0
    12c8:	09 c0       	rjmp	.+18     	; 0x12dc <__fixsfsi+0x9c>
    12ca:	2f ef       	ldi	r18, 0xFF	; 255
    12cc:	3f ef       	ldi	r19, 0xFF	; 255
    12ce:	4f ef       	ldi	r20, 0xFF	; 255
    12d0:	5f e7       	ldi	r21, 0x7F	; 127
    12d2:	04 c0       	rjmp	.+8      	; 0x12dc <__fixsfsi+0x9c>
    12d4:	20 e0       	ldi	r18, 0x00	; 0
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	40 e0       	ldi	r20, 0x00	; 0
    12da:	50 e8       	ldi	r21, 0x80	; 128
    12dc:	b9 01       	movw	r22, r18
    12de:	ca 01       	movw	r24, r20
    12e0:	2c 96       	adiw	r28, 0x0c	; 12
    12e2:	e2 e0       	ldi	r30, 0x02	; 2
    12e4:	0c 94 0e 0c 	jmp	0x181c	; 0x181c <__epilogue_restores__+0x20>

000012e8 <__floatunsisf>:
    12e8:	a8 e0       	ldi	r26, 0x08	; 8
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	ea e7       	ldi	r30, 0x7A	; 122
    12ee:	f9 e0       	ldi	r31, 0x09	; 9
    12f0:	0c 94 ea 0b 	jmp	0x17d4	; 0x17d4 <__prologue_saves__+0x10>
    12f4:	7b 01       	movw	r14, r22
    12f6:	8c 01       	movw	r16, r24
    12f8:	61 15       	cp	r22, r1
    12fa:	71 05       	cpc	r23, r1
    12fc:	81 05       	cpc	r24, r1
    12fe:	91 05       	cpc	r25, r1
    1300:	19 f4       	brne	.+6      	; 0x1308 <__floatunsisf+0x20>
    1302:	82 e0       	ldi	r24, 0x02	; 2
    1304:	89 83       	std	Y+1, r24	; 0x01
    1306:	60 c0       	rjmp	.+192    	; 0x13c8 <__floatunsisf+0xe0>
    1308:	83 e0       	ldi	r24, 0x03	; 3
    130a:	89 83       	std	Y+1, r24	; 0x01
    130c:	8e e1       	ldi	r24, 0x1E	; 30
    130e:	c8 2e       	mov	r12, r24
    1310:	d1 2c       	mov	r13, r1
    1312:	dc 82       	std	Y+4, r13	; 0x04
    1314:	cb 82       	std	Y+3, r12	; 0x03
    1316:	ed 82       	std	Y+5, r14	; 0x05
    1318:	fe 82       	std	Y+6, r15	; 0x06
    131a:	0f 83       	std	Y+7, r16	; 0x07
    131c:	18 87       	std	Y+8, r17	; 0x08
    131e:	c8 01       	movw	r24, r16
    1320:	b7 01       	movw	r22, r14
    1322:	0e 94 ed 09 	call	0x13da	; 0x13da <__clzsi2>
    1326:	fc 01       	movw	r30, r24
    1328:	31 97       	sbiw	r30, 0x01	; 1
    132a:	f7 ff       	sbrs	r31, 7
    132c:	3b c0       	rjmp	.+118    	; 0x13a4 <__floatunsisf+0xbc>
    132e:	22 27       	eor	r18, r18
    1330:	33 27       	eor	r19, r19
    1332:	2e 1b       	sub	r18, r30
    1334:	3f 0b       	sbc	r19, r31
    1336:	57 01       	movw	r10, r14
    1338:	68 01       	movw	r12, r16
    133a:	02 2e       	mov	r0, r18
    133c:	04 c0       	rjmp	.+8      	; 0x1346 <__floatunsisf+0x5e>
    133e:	d6 94       	lsr	r13
    1340:	c7 94       	ror	r12
    1342:	b7 94       	ror	r11
    1344:	a7 94       	ror	r10
    1346:	0a 94       	dec	r0
    1348:	d2 f7       	brpl	.-12     	; 0x133e <__floatunsisf+0x56>
    134a:	40 e0       	ldi	r20, 0x00	; 0
    134c:	50 e0       	ldi	r21, 0x00	; 0
    134e:	60 e0       	ldi	r22, 0x00	; 0
    1350:	70 e0       	ldi	r23, 0x00	; 0
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	a0 e0       	ldi	r26, 0x00	; 0
    1358:	b0 e0       	ldi	r27, 0x00	; 0
    135a:	04 c0       	rjmp	.+8      	; 0x1364 <__floatunsisf+0x7c>
    135c:	88 0f       	add	r24, r24
    135e:	99 1f       	adc	r25, r25
    1360:	aa 1f       	adc	r26, r26
    1362:	bb 1f       	adc	r27, r27
    1364:	2a 95       	dec	r18
    1366:	d2 f7       	brpl	.-12     	; 0x135c <__floatunsisf+0x74>
    1368:	01 97       	sbiw	r24, 0x01	; 1
    136a:	a1 09       	sbc	r26, r1
    136c:	b1 09       	sbc	r27, r1
    136e:	8e 21       	and	r24, r14
    1370:	9f 21       	and	r25, r15
    1372:	a0 23       	and	r26, r16
    1374:	b1 23       	and	r27, r17
    1376:	00 97       	sbiw	r24, 0x00	; 0
    1378:	a1 05       	cpc	r26, r1
    137a:	b1 05       	cpc	r27, r1
    137c:	21 f0       	breq	.+8      	; 0x1386 <__floatunsisf+0x9e>
    137e:	41 e0       	ldi	r20, 0x01	; 1
    1380:	50 e0       	ldi	r21, 0x00	; 0
    1382:	60 e0       	ldi	r22, 0x00	; 0
    1384:	70 e0       	ldi	r23, 0x00	; 0
    1386:	4a 29       	or	r20, r10
    1388:	5b 29       	or	r21, r11
    138a:	6c 29       	or	r22, r12
    138c:	7d 29       	or	r23, r13
    138e:	4d 83       	std	Y+5, r20	; 0x05
    1390:	5e 83       	std	Y+6, r21	; 0x06
    1392:	6f 83       	std	Y+7, r22	; 0x07
    1394:	78 87       	std	Y+8, r23	; 0x08
    1396:	8e e1       	ldi	r24, 0x1E	; 30
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	8e 1b       	sub	r24, r30
    139c:	9f 0b       	sbc	r25, r31
    139e:	9c 83       	std	Y+4, r25	; 0x04
    13a0:	8b 83       	std	Y+3, r24	; 0x03
    13a2:	12 c0       	rjmp	.+36     	; 0x13c8 <__floatunsisf+0xe0>
    13a4:	30 97       	sbiw	r30, 0x00	; 0
    13a6:	81 f0       	breq	.+32     	; 0x13c8 <__floatunsisf+0xe0>
    13a8:	0e 2e       	mov	r0, r30
    13aa:	04 c0       	rjmp	.+8      	; 0x13b4 <__floatunsisf+0xcc>
    13ac:	ee 0c       	add	r14, r14
    13ae:	ff 1c       	adc	r15, r15
    13b0:	00 1f       	adc	r16, r16
    13b2:	11 1f       	adc	r17, r17
    13b4:	0a 94       	dec	r0
    13b6:	d2 f7       	brpl	.-12     	; 0x13ac <__floatunsisf+0xc4>
    13b8:	ed 82       	std	Y+5, r14	; 0x05
    13ba:	fe 82       	std	Y+6, r15	; 0x06
    13bc:	0f 83       	std	Y+7, r16	; 0x07
    13be:	18 87       	std	Y+8, r17	; 0x08
    13c0:	ce 1a       	sub	r12, r30
    13c2:	df 0a       	sbc	r13, r31
    13c4:	dc 82       	std	Y+4, r13	; 0x04
    13c6:	cb 82       	std	Y+3, r12	; 0x03
    13c8:	1a 82       	std	Y+2, r1	; 0x02
    13ca:	ce 01       	movw	r24, r28
    13cc:	01 96       	adiw	r24, 0x01	; 1
    13ce:	0e 94 3c 0a 	call	0x1478	; 0x1478 <__pack_f>
    13d2:	28 96       	adiw	r28, 0x08	; 8
    13d4:	ea e0       	ldi	r30, 0x0A	; 10
    13d6:	0c 94 06 0c 	jmp	0x180c	; 0x180c <__epilogue_restores__+0x10>

000013da <__clzsi2>:
    13da:	ef 92       	push	r14
    13dc:	ff 92       	push	r15
    13de:	0f 93       	push	r16
    13e0:	1f 93       	push	r17
    13e2:	7b 01       	movw	r14, r22
    13e4:	8c 01       	movw	r16, r24
    13e6:	80 e0       	ldi	r24, 0x00	; 0
    13e8:	e8 16       	cp	r14, r24
    13ea:	80 e0       	ldi	r24, 0x00	; 0
    13ec:	f8 06       	cpc	r15, r24
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	08 07       	cpc	r16, r24
    13f2:	80 e0       	ldi	r24, 0x00	; 0
    13f4:	18 07       	cpc	r17, r24
    13f6:	88 f4       	brcc	.+34     	; 0x141a <__clzsi2+0x40>
    13f8:	8f ef       	ldi	r24, 0xFF	; 255
    13fa:	e8 16       	cp	r14, r24
    13fc:	f1 04       	cpc	r15, r1
    13fe:	01 05       	cpc	r16, r1
    1400:	11 05       	cpc	r17, r1
    1402:	31 f0       	breq	.+12     	; 0x1410 <__clzsi2+0x36>
    1404:	28 f0       	brcs	.+10     	; 0x1410 <__clzsi2+0x36>
    1406:	88 e0       	ldi	r24, 0x08	; 8
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	a0 e0       	ldi	r26, 0x00	; 0
    140c:	b0 e0       	ldi	r27, 0x00	; 0
    140e:	17 c0       	rjmp	.+46     	; 0x143e <__clzsi2+0x64>
    1410:	80 e0       	ldi	r24, 0x00	; 0
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	a0 e0       	ldi	r26, 0x00	; 0
    1416:	b0 e0       	ldi	r27, 0x00	; 0
    1418:	12 c0       	rjmp	.+36     	; 0x143e <__clzsi2+0x64>
    141a:	80 e0       	ldi	r24, 0x00	; 0
    141c:	e8 16       	cp	r14, r24
    141e:	80 e0       	ldi	r24, 0x00	; 0
    1420:	f8 06       	cpc	r15, r24
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	08 07       	cpc	r16, r24
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	18 07       	cpc	r17, r24
    142a:	28 f0       	brcs	.+10     	; 0x1436 <__clzsi2+0x5c>
    142c:	88 e1       	ldi	r24, 0x18	; 24
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	a0 e0       	ldi	r26, 0x00	; 0
    1432:	b0 e0       	ldi	r27, 0x00	; 0
    1434:	04 c0       	rjmp	.+8      	; 0x143e <__clzsi2+0x64>
    1436:	80 e1       	ldi	r24, 0x10	; 16
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	a0 e0       	ldi	r26, 0x00	; 0
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	20 e2       	ldi	r18, 0x20	; 32
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	40 e0       	ldi	r20, 0x00	; 0
    1444:	50 e0       	ldi	r21, 0x00	; 0
    1446:	28 1b       	sub	r18, r24
    1448:	39 0b       	sbc	r19, r25
    144a:	4a 0b       	sbc	r20, r26
    144c:	5b 0b       	sbc	r21, r27
    144e:	04 c0       	rjmp	.+8      	; 0x1458 <__clzsi2+0x7e>
    1450:	16 95       	lsr	r17
    1452:	07 95       	ror	r16
    1454:	f7 94       	ror	r15
    1456:	e7 94       	ror	r14
    1458:	8a 95       	dec	r24
    145a:	d2 f7       	brpl	.-12     	; 0x1450 <__clzsi2+0x76>
    145c:	f7 01       	movw	r30, r14
    145e:	e7 5d       	subi	r30, 0xD7	; 215
    1460:	fe 4f       	sbci	r31, 0xFE	; 254
    1462:	80 81       	ld	r24, Z
    1464:	28 1b       	sub	r18, r24
    1466:	31 09       	sbc	r19, r1
    1468:	41 09       	sbc	r20, r1
    146a:	51 09       	sbc	r21, r1
    146c:	c9 01       	movw	r24, r18
    146e:	1f 91       	pop	r17
    1470:	0f 91       	pop	r16
    1472:	ff 90       	pop	r15
    1474:	ef 90       	pop	r14
    1476:	08 95       	ret

00001478 <__pack_f>:
    1478:	df 92       	push	r13
    147a:	ef 92       	push	r14
    147c:	ff 92       	push	r15
    147e:	0f 93       	push	r16
    1480:	1f 93       	push	r17
    1482:	fc 01       	movw	r30, r24
    1484:	e4 80       	ldd	r14, Z+4	; 0x04
    1486:	f5 80       	ldd	r15, Z+5	; 0x05
    1488:	06 81       	ldd	r16, Z+6	; 0x06
    148a:	17 81       	ldd	r17, Z+7	; 0x07
    148c:	d1 80       	ldd	r13, Z+1	; 0x01
    148e:	80 81       	ld	r24, Z
    1490:	82 30       	cpi	r24, 0x02	; 2
    1492:	48 f4       	brcc	.+18     	; 0x14a6 <__pack_f+0x2e>
    1494:	80 e0       	ldi	r24, 0x00	; 0
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	a0 e1       	ldi	r26, 0x10	; 16
    149a:	b0 e0       	ldi	r27, 0x00	; 0
    149c:	e8 2a       	or	r14, r24
    149e:	f9 2a       	or	r15, r25
    14a0:	0a 2b       	or	r16, r26
    14a2:	1b 2b       	or	r17, r27
    14a4:	a5 c0       	rjmp	.+330    	; 0x15f0 <__pack_f+0x178>
    14a6:	84 30       	cpi	r24, 0x04	; 4
    14a8:	09 f4       	brne	.+2      	; 0x14ac <__pack_f+0x34>
    14aa:	9f c0       	rjmp	.+318    	; 0x15ea <__pack_f+0x172>
    14ac:	82 30       	cpi	r24, 0x02	; 2
    14ae:	21 f4       	brne	.+8      	; 0x14b8 <__pack_f+0x40>
    14b0:	ee 24       	eor	r14, r14
    14b2:	ff 24       	eor	r15, r15
    14b4:	87 01       	movw	r16, r14
    14b6:	05 c0       	rjmp	.+10     	; 0x14c2 <__pack_f+0x4a>
    14b8:	e1 14       	cp	r14, r1
    14ba:	f1 04       	cpc	r15, r1
    14bc:	01 05       	cpc	r16, r1
    14be:	11 05       	cpc	r17, r1
    14c0:	19 f4       	brne	.+6      	; 0x14c8 <__pack_f+0x50>
    14c2:	e0 e0       	ldi	r30, 0x00	; 0
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	96 c0       	rjmp	.+300    	; 0x15f4 <__pack_f+0x17c>
    14c8:	62 81       	ldd	r22, Z+2	; 0x02
    14ca:	73 81       	ldd	r23, Z+3	; 0x03
    14cc:	9f ef       	ldi	r25, 0xFF	; 255
    14ce:	62 38       	cpi	r22, 0x82	; 130
    14d0:	79 07       	cpc	r23, r25
    14d2:	0c f0       	brlt	.+2      	; 0x14d6 <__pack_f+0x5e>
    14d4:	5b c0       	rjmp	.+182    	; 0x158c <__pack_f+0x114>
    14d6:	22 e8       	ldi	r18, 0x82	; 130
    14d8:	3f ef       	ldi	r19, 0xFF	; 255
    14da:	26 1b       	sub	r18, r22
    14dc:	37 0b       	sbc	r19, r23
    14de:	2a 31       	cpi	r18, 0x1A	; 26
    14e0:	31 05       	cpc	r19, r1
    14e2:	2c f0       	brlt	.+10     	; 0x14ee <__pack_f+0x76>
    14e4:	20 e0       	ldi	r18, 0x00	; 0
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	40 e0       	ldi	r20, 0x00	; 0
    14ea:	50 e0       	ldi	r21, 0x00	; 0
    14ec:	2a c0       	rjmp	.+84     	; 0x1542 <__pack_f+0xca>
    14ee:	b8 01       	movw	r22, r16
    14f0:	a7 01       	movw	r20, r14
    14f2:	02 2e       	mov	r0, r18
    14f4:	04 c0       	rjmp	.+8      	; 0x14fe <__pack_f+0x86>
    14f6:	76 95       	lsr	r23
    14f8:	67 95       	ror	r22
    14fa:	57 95       	ror	r21
    14fc:	47 95       	ror	r20
    14fe:	0a 94       	dec	r0
    1500:	d2 f7       	brpl	.-12     	; 0x14f6 <__pack_f+0x7e>
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	a0 e0       	ldi	r26, 0x00	; 0
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	04 c0       	rjmp	.+8      	; 0x1514 <__pack_f+0x9c>
    150c:	88 0f       	add	r24, r24
    150e:	99 1f       	adc	r25, r25
    1510:	aa 1f       	adc	r26, r26
    1512:	bb 1f       	adc	r27, r27
    1514:	2a 95       	dec	r18
    1516:	d2 f7       	brpl	.-12     	; 0x150c <__pack_f+0x94>
    1518:	01 97       	sbiw	r24, 0x01	; 1
    151a:	a1 09       	sbc	r26, r1
    151c:	b1 09       	sbc	r27, r1
    151e:	8e 21       	and	r24, r14
    1520:	9f 21       	and	r25, r15
    1522:	a0 23       	and	r26, r16
    1524:	b1 23       	and	r27, r17
    1526:	00 97       	sbiw	r24, 0x00	; 0
    1528:	a1 05       	cpc	r26, r1
    152a:	b1 05       	cpc	r27, r1
    152c:	21 f0       	breq	.+8      	; 0x1536 <__pack_f+0xbe>
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	a0 e0       	ldi	r26, 0x00	; 0
    1534:	b0 e0       	ldi	r27, 0x00	; 0
    1536:	9a 01       	movw	r18, r20
    1538:	ab 01       	movw	r20, r22
    153a:	28 2b       	or	r18, r24
    153c:	39 2b       	or	r19, r25
    153e:	4a 2b       	or	r20, r26
    1540:	5b 2b       	or	r21, r27
    1542:	da 01       	movw	r26, r20
    1544:	c9 01       	movw	r24, r18
    1546:	8f 77       	andi	r24, 0x7F	; 127
    1548:	90 70       	andi	r25, 0x00	; 0
    154a:	a0 70       	andi	r26, 0x00	; 0
    154c:	b0 70       	andi	r27, 0x00	; 0
    154e:	80 34       	cpi	r24, 0x40	; 64
    1550:	91 05       	cpc	r25, r1
    1552:	a1 05       	cpc	r26, r1
    1554:	b1 05       	cpc	r27, r1
    1556:	39 f4       	brne	.+14     	; 0x1566 <__pack_f+0xee>
    1558:	27 ff       	sbrs	r18, 7
    155a:	09 c0       	rjmp	.+18     	; 0x156e <__pack_f+0xf6>
    155c:	20 5c       	subi	r18, 0xC0	; 192
    155e:	3f 4f       	sbci	r19, 0xFF	; 255
    1560:	4f 4f       	sbci	r20, 0xFF	; 255
    1562:	5f 4f       	sbci	r21, 0xFF	; 255
    1564:	04 c0       	rjmp	.+8      	; 0x156e <__pack_f+0xf6>
    1566:	21 5c       	subi	r18, 0xC1	; 193
    1568:	3f 4f       	sbci	r19, 0xFF	; 255
    156a:	4f 4f       	sbci	r20, 0xFF	; 255
    156c:	5f 4f       	sbci	r21, 0xFF	; 255
    156e:	e0 e0       	ldi	r30, 0x00	; 0
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	20 30       	cpi	r18, 0x00	; 0
    1574:	a0 e0       	ldi	r26, 0x00	; 0
    1576:	3a 07       	cpc	r19, r26
    1578:	a0 e0       	ldi	r26, 0x00	; 0
    157a:	4a 07       	cpc	r20, r26
    157c:	a0 e4       	ldi	r26, 0x40	; 64
    157e:	5a 07       	cpc	r21, r26
    1580:	10 f0       	brcs	.+4      	; 0x1586 <__pack_f+0x10e>
    1582:	e1 e0       	ldi	r30, 0x01	; 1
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	79 01       	movw	r14, r18
    1588:	8a 01       	movw	r16, r20
    158a:	27 c0       	rjmp	.+78     	; 0x15da <__pack_f+0x162>
    158c:	60 38       	cpi	r22, 0x80	; 128
    158e:	71 05       	cpc	r23, r1
    1590:	64 f5       	brge	.+88     	; 0x15ea <__pack_f+0x172>
    1592:	fb 01       	movw	r30, r22
    1594:	e1 58       	subi	r30, 0x81	; 129
    1596:	ff 4f       	sbci	r31, 0xFF	; 255
    1598:	d8 01       	movw	r26, r16
    159a:	c7 01       	movw	r24, r14
    159c:	8f 77       	andi	r24, 0x7F	; 127
    159e:	90 70       	andi	r25, 0x00	; 0
    15a0:	a0 70       	andi	r26, 0x00	; 0
    15a2:	b0 70       	andi	r27, 0x00	; 0
    15a4:	80 34       	cpi	r24, 0x40	; 64
    15a6:	91 05       	cpc	r25, r1
    15a8:	a1 05       	cpc	r26, r1
    15aa:	b1 05       	cpc	r27, r1
    15ac:	39 f4       	brne	.+14     	; 0x15bc <__pack_f+0x144>
    15ae:	e7 fe       	sbrs	r14, 7
    15b0:	0d c0       	rjmp	.+26     	; 0x15cc <__pack_f+0x154>
    15b2:	80 e4       	ldi	r24, 0x40	; 64
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	a0 e0       	ldi	r26, 0x00	; 0
    15b8:	b0 e0       	ldi	r27, 0x00	; 0
    15ba:	04 c0       	rjmp	.+8      	; 0x15c4 <__pack_f+0x14c>
    15bc:	8f e3       	ldi	r24, 0x3F	; 63
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	a0 e0       	ldi	r26, 0x00	; 0
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	e8 0e       	add	r14, r24
    15c6:	f9 1e       	adc	r15, r25
    15c8:	0a 1f       	adc	r16, r26
    15ca:	1b 1f       	adc	r17, r27
    15cc:	17 ff       	sbrs	r17, 7
    15ce:	05 c0       	rjmp	.+10     	; 0x15da <__pack_f+0x162>
    15d0:	16 95       	lsr	r17
    15d2:	07 95       	ror	r16
    15d4:	f7 94       	ror	r15
    15d6:	e7 94       	ror	r14
    15d8:	31 96       	adiw	r30, 0x01	; 1
    15da:	87 e0       	ldi	r24, 0x07	; 7
    15dc:	16 95       	lsr	r17
    15de:	07 95       	ror	r16
    15e0:	f7 94       	ror	r15
    15e2:	e7 94       	ror	r14
    15e4:	8a 95       	dec	r24
    15e6:	d1 f7       	brne	.-12     	; 0x15dc <__pack_f+0x164>
    15e8:	05 c0       	rjmp	.+10     	; 0x15f4 <__pack_f+0x17c>
    15ea:	ee 24       	eor	r14, r14
    15ec:	ff 24       	eor	r15, r15
    15ee:	87 01       	movw	r16, r14
    15f0:	ef ef       	ldi	r30, 0xFF	; 255
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	6e 2f       	mov	r22, r30
    15f6:	67 95       	ror	r22
    15f8:	66 27       	eor	r22, r22
    15fa:	67 95       	ror	r22
    15fc:	90 2f       	mov	r25, r16
    15fe:	9f 77       	andi	r25, 0x7F	; 127
    1600:	d7 94       	ror	r13
    1602:	dd 24       	eor	r13, r13
    1604:	d7 94       	ror	r13
    1606:	8e 2f       	mov	r24, r30
    1608:	86 95       	lsr	r24
    160a:	49 2f       	mov	r20, r25
    160c:	46 2b       	or	r20, r22
    160e:	58 2f       	mov	r21, r24
    1610:	5d 29       	or	r21, r13
    1612:	b7 01       	movw	r22, r14
    1614:	ca 01       	movw	r24, r20
    1616:	1f 91       	pop	r17
    1618:	0f 91       	pop	r16
    161a:	ff 90       	pop	r15
    161c:	ef 90       	pop	r14
    161e:	df 90       	pop	r13
    1620:	08 95       	ret

00001622 <__unpack_f>:
    1622:	fc 01       	movw	r30, r24
    1624:	db 01       	movw	r26, r22
    1626:	40 81       	ld	r20, Z
    1628:	51 81       	ldd	r21, Z+1	; 0x01
    162a:	22 81       	ldd	r18, Z+2	; 0x02
    162c:	62 2f       	mov	r22, r18
    162e:	6f 77       	andi	r22, 0x7F	; 127
    1630:	70 e0       	ldi	r23, 0x00	; 0
    1632:	22 1f       	adc	r18, r18
    1634:	22 27       	eor	r18, r18
    1636:	22 1f       	adc	r18, r18
    1638:	93 81       	ldd	r25, Z+3	; 0x03
    163a:	89 2f       	mov	r24, r25
    163c:	88 0f       	add	r24, r24
    163e:	82 2b       	or	r24, r18
    1640:	28 2f       	mov	r18, r24
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	99 1f       	adc	r25, r25
    1646:	99 27       	eor	r25, r25
    1648:	99 1f       	adc	r25, r25
    164a:	11 96       	adiw	r26, 0x01	; 1
    164c:	9c 93       	st	X, r25
    164e:	11 97       	sbiw	r26, 0x01	; 1
    1650:	21 15       	cp	r18, r1
    1652:	31 05       	cpc	r19, r1
    1654:	a9 f5       	brne	.+106    	; 0x16c0 <__unpack_f+0x9e>
    1656:	41 15       	cp	r20, r1
    1658:	51 05       	cpc	r21, r1
    165a:	61 05       	cpc	r22, r1
    165c:	71 05       	cpc	r23, r1
    165e:	11 f4       	brne	.+4      	; 0x1664 <__unpack_f+0x42>
    1660:	82 e0       	ldi	r24, 0x02	; 2
    1662:	37 c0       	rjmp	.+110    	; 0x16d2 <__unpack_f+0xb0>
    1664:	82 e8       	ldi	r24, 0x82	; 130
    1666:	9f ef       	ldi	r25, 0xFF	; 255
    1668:	13 96       	adiw	r26, 0x03	; 3
    166a:	9c 93       	st	X, r25
    166c:	8e 93       	st	-X, r24
    166e:	12 97       	sbiw	r26, 0x02	; 2
    1670:	9a 01       	movw	r18, r20
    1672:	ab 01       	movw	r20, r22
    1674:	67 e0       	ldi	r22, 0x07	; 7
    1676:	22 0f       	add	r18, r18
    1678:	33 1f       	adc	r19, r19
    167a:	44 1f       	adc	r20, r20
    167c:	55 1f       	adc	r21, r21
    167e:	6a 95       	dec	r22
    1680:	d1 f7       	brne	.-12     	; 0x1676 <__unpack_f+0x54>
    1682:	83 e0       	ldi	r24, 0x03	; 3
    1684:	8c 93       	st	X, r24
    1686:	0d c0       	rjmp	.+26     	; 0x16a2 <__unpack_f+0x80>
    1688:	22 0f       	add	r18, r18
    168a:	33 1f       	adc	r19, r19
    168c:	44 1f       	adc	r20, r20
    168e:	55 1f       	adc	r21, r21
    1690:	12 96       	adiw	r26, 0x02	; 2
    1692:	8d 91       	ld	r24, X+
    1694:	9c 91       	ld	r25, X
    1696:	13 97       	sbiw	r26, 0x03	; 3
    1698:	01 97       	sbiw	r24, 0x01	; 1
    169a:	13 96       	adiw	r26, 0x03	; 3
    169c:	9c 93       	st	X, r25
    169e:	8e 93       	st	-X, r24
    16a0:	12 97       	sbiw	r26, 0x02	; 2
    16a2:	20 30       	cpi	r18, 0x00	; 0
    16a4:	80 e0       	ldi	r24, 0x00	; 0
    16a6:	38 07       	cpc	r19, r24
    16a8:	80 e0       	ldi	r24, 0x00	; 0
    16aa:	48 07       	cpc	r20, r24
    16ac:	80 e4       	ldi	r24, 0x40	; 64
    16ae:	58 07       	cpc	r21, r24
    16b0:	58 f3       	brcs	.-42     	; 0x1688 <__unpack_f+0x66>
    16b2:	14 96       	adiw	r26, 0x04	; 4
    16b4:	2d 93       	st	X+, r18
    16b6:	3d 93       	st	X+, r19
    16b8:	4d 93       	st	X+, r20
    16ba:	5c 93       	st	X, r21
    16bc:	17 97       	sbiw	r26, 0x07	; 7
    16be:	08 95       	ret
    16c0:	2f 3f       	cpi	r18, 0xFF	; 255
    16c2:	31 05       	cpc	r19, r1
    16c4:	79 f4       	brne	.+30     	; 0x16e4 <__unpack_f+0xc2>
    16c6:	41 15       	cp	r20, r1
    16c8:	51 05       	cpc	r21, r1
    16ca:	61 05       	cpc	r22, r1
    16cc:	71 05       	cpc	r23, r1
    16ce:	19 f4       	brne	.+6      	; 0x16d6 <__unpack_f+0xb4>
    16d0:	84 e0       	ldi	r24, 0x04	; 4
    16d2:	8c 93       	st	X, r24
    16d4:	08 95       	ret
    16d6:	64 ff       	sbrs	r22, 4
    16d8:	03 c0       	rjmp	.+6      	; 0x16e0 <__unpack_f+0xbe>
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	8c 93       	st	X, r24
    16de:	12 c0       	rjmp	.+36     	; 0x1704 <__unpack_f+0xe2>
    16e0:	1c 92       	st	X, r1
    16e2:	10 c0       	rjmp	.+32     	; 0x1704 <__unpack_f+0xe2>
    16e4:	2f 57       	subi	r18, 0x7F	; 127
    16e6:	30 40       	sbci	r19, 0x00	; 0
    16e8:	13 96       	adiw	r26, 0x03	; 3
    16ea:	3c 93       	st	X, r19
    16ec:	2e 93       	st	-X, r18
    16ee:	12 97       	sbiw	r26, 0x02	; 2
    16f0:	83 e0       	ldi	r24, 0x03	; 3
    16f2:	8c 93       	st	X, r24
    16f4:	87 e0       	ldi	r24, 0x07	; 7
    16f6:	44 0f       	add	r20, r20
    16f8:	55 1f       	adc	r21, r21
    16fa:	66 1f       	adc	r22, r22
    16fc:	77 1f       	adc	r23, r23
    16fe:	8a 95       	dec	r24
    1700:	d1 f7       	brne	.-12     	; 0x16f6 <__unpack_f+0xd4>
    1702:	70 64       	ori	r23, 0x40	; 64
    1704:	14 96       	adiw	r26, 0x04	; 4
    1706:	4d 93       	st	X+, r20
    1708:	5d 93       	st	X+, r21
    170a:	6d 93       	st	X+, r22
    170c:	7c 93       	st	X, r23
    170e:	17 97       	sbiw	r26, 0x07	; 7
    1710:	08 95       	ret

00001712 <__fpcmp_parts_f>:
    1712:	1f 93       	push	r17
    1714:	dc 01       	movw	r26, r24
    1716:	fb 01       	movw	r30, r22
    1718:	9c 91       	ld	r25, X
    171a:	92 30       	cpi	r25, 0x02	; 2
    171c:	08 f4       	brcc	.+2      	; 0x1720 <__fpcmp_parts_f+0xe>
    171e:	47 c0       	rjmp	.+142    	; 0x17ae <__fpcmp_parts_f+0x9c>
    1720:	80 81       	ld	r24, Z
    1722:	82 30       	cpi	r24, 0x02	; 2
    1724:	08 f4       	brcc	.+2      	; 0x1728 <__fpcmp_parts_f+0x16>
    1726:	43 c0       	rjmp	.+134    	; 0x17ae <__fpcmp_parts_f+0x9c>
    1728:	94 30       	cpi	r25, 0x04	; 4
    172a:	51 f4       	brne	.+20     	; 0x1740 <__fpcmp_parts_f+0x2e>
    172c:	11 96       	adiw	r26, 0x01	; 1
    172e:	1c 91       	ld	r17, X
    1730:	84 30       	cpi	r24, 0x04	; 4
    1732:	99 f5       	brne	.+102    	; 0x179a <__fpcmp_parts_f+0x88>
    1734:	81 81       	ldd	r24, Z+1	; 0x01
    1736:	68 2f       	mov	r22, r24
    1738:	70 e0       	ldi	r23, 0x00	; 0
    173a:	61 1b       	sub	r22, r17
    173c:	71 09       	sbc	r23, r1
    173e:	3f c0       	rjmp	.+126    	; 0x17be <__fpcmp_parts_f+0xac>
    1740:	84 30       	cpi	r24, 0x04	; 4
    1742:	21 f0       	breq	.+8      	; 0x174c <__fpcmp_parts_f+0x3a>
    1744:	92 30       	cpi	r25, 0x02	; 2
    1746:	31 f4       	brne	.+12     	; 0x1754 <__fpcmp_parts_f+0x42>
    1748:	82 30       	cpi	r24, 0x02	; 2
    174a:	b9 f1       	breq	.+110    	; 0x17ba <__fpcmp_parts_f+0xa8>
    174c:	81 81       	ldd	r24, Z+1	; 0x01
    174e:	88 23       	and	r24, r24
    1750:	89 f1       	breq	.+98     	; 0x17b4 <__fpcmp_parts_f+0xa2>
    1752:	2d c0       	rjmp	.+90     	; 0x17ae <__fpcmp_parts_f+0x9c>
    1754:	11 96       	adiw	r26, 0x01	; 1
    1756:	1c 91       	ld	r17, X
    1758:	11 97       	sbiw	r26, 0x01	; 1
    175a:	82 30       	cpi	r24, 0x02	; 2
    175c:	f1 f0       	breq	.+60     	; 0x179a <__fpcmp_parts_f+0x88>
    175e:	81 81       	ldd	r24, Z+1	; 0x01
    1760:	18 17       	cp	r17, r24
    1762:	d9 f4       	brne	.+54     	; 0x179a <__fpcmp_parts_f+0x88>
    1764:	12 96       	adiw	r26, 0x02	; 2
    1766:	2d 91       	ld	r18, X+
    1768:	3c 91       	ld	r19, X
    176a:	13 97       	sbiw	r26, 0x03	; 3
    176c:	82 81       	ldd	r24, Z+2	; 0x02
    176e:	93 81       	ldd	r25, Z+3	; 0x03
    1770:	82 17       	cp	r24, r18
    1772:	93 07       	cpc	r25, r19
    1774:	94 f0       	brlt	.+36     	; 0x179a <__fpcmp_parts_f+0x88>
    1776:	28 17       	cp	r18, r24
    1778:	39 07       	cpc	r19, r25
    177a:	bc f0       	brlt	.+46     	; 0x17aa <__fpcmp_parts_f+0x98>
    177c:	14 96       	adiw	r26, 0x04	; 4
    177e:	8d 91       	ld	r24, X+
    1780:	9d 91       	ld	r25, X+
    1782:	0d 90       	ld	r0, X+
    1784:	bc 91       	ld	r27, X
    1786:	a0 2d       	mov	r26, r0
    1788:	24 81       	ldd	r18, Z+4	; 0x04
    178a:	35 81       	ldd	r19, Z+5	; 0x05
    178c:	46 81       	ldd	r20, Z+6	; 0x06
    178e:	57 81       	ldd	r21, Z+7	; 0x07
    1790:	28 17       	cp	r18, r24
    1792:	39 07       	cpc	r19, r25
    1794:	4a 07       	cpc	r20, r26
    1796:	5b 07       	cpc	r21, r27
    1798:	18 f4       	brcc	.+6      	; 0x17a0 <__fpcmp_parts_f+0x8e>
    179a:	11 23       	and	r17, r17
    179c:	41 f0       	breq	.+16     	; 0x17ae <__fpcmp_parts_f+0x9c>
    179e:	0a c0       	rjmp	.+20     	; 0x17b4 <__fpcmp_parts_f+0xa2>
    17a0:	82 17       	cp	r24, r18
    17a2:	93 07       	cpc	r25, r19
    17a4:	a4 07       	cpc	r26, r20
    17a6:	b5 07       	cpc	r27, r21
    17a8:	40 f4       	brcc	.+16     	; 0x17ba <__fpcmp_parts_f+0xa8>
    17aa:	11 23       	and	r17, r17
    17ac:	19 f0       	breq	.+6      	; 0x17b4 <__fpcmp_parts_f+0xa2>
    17ae:	61 e0       	ldi	r22, 0x01	; 1
    17b0:	70 e0       	ldi	r23, 0x00	; 0
    17b2:	05 c0       	rjmp	.+10     	; 0x17be <__fpcmp_parts_f+0xac>
    17b4:	6f ef       	ldi	r22, 0xFF	; 255
    17b6:	7f ef       	ldi	r23, 0xFF	; 255
    17b8:	02 c0       	rjmp	.+4      	; 0x17be <__fpcmp_parts_f+0xac>
    17ba:	60 e0       	ldi	r22, 0x00	; 0
    17bc:	70 e0       	ldi	r23, 0x00	; 0
    17be:	cb 01       	movw	r24, r22
    17c0:	1f 91       	pop	r17
    17c2:	08 95       	ret

000017c4 <__prologue_saves__>:
    17c4:	2f 92       	push	r2
    17c6:	3f 92       	push	r3
    17c8:	4f 92       	push	r4
    17ca:	5f 92       	push	r5
    17cc:	6f 92       	push	r6
    17ce:	7f 92       	push	r7
    17d0:	8f 92       	push	r8
    17d2:	9f 92       	push	r9
    17d4:	af 92       	push	r10
    17d6:	bf 92       	push	r11
    17d8:	cf 92       	push	r12
    17da:	df 92       	push	r13
    17dc:	ef 92       	push	r14
    17de:	ff 92       	push	r15
    17e0:	0f 93       	push	r16
    17e2:	1f 93       	push	r17
    17e4:	cf 93       	push	r28
    17e6:	df 93       	push	r29
    17e8:	cd b7       	in	r28, 0x3d	; 61
    17ea:	de b7       	in	r29, 0x3e	; 62
    17ec:	ca 1b       	sub	r28, r26
    17ee:	db 0b       	sbc	r29, r27
    17f0:	0f b6       	in	r0, 0x3f	; 63
    17f2:	f8 94       	cli
    17f4:	de bf       	out	0x3e, r29	; 62
    17f6:	0f be       	out	0x3f, r0	; 63
    17f8:	cd bf       	out	0x3d, r28	; 61
    17fa:	09 94       	ijmp

000017fc <__epilogue_restores__>:
    17fc:	2a 88       	ldd	r2, Y+18	; 0x12
    17fe:	39 88       	ldd	r3, Y+17	; 0x11
    1800:	48 88       	ldd	r4, Y+16	; 0x10
    1802:	5f 84       	ldd	r5, Y+15	; 0x0f
    1804:	6e 84       	ldd	r6, Y+14	; 0x0e
    1806:	7d 84       	ldd	r7, Y+13	; 0x0d
    1808:	8c 84       	ldd	r8, Y+12	; 0x0c
    180a:	9b 84       	ldd	r9, Y+11	; 0x0b
    180c:	aa 84       	ldd	r10, Y+10	; 0x0a
    180e:	b9 84       	ldd	r11, Y+9	; 0x09
    1810:	c8 84       	ldd	r12, Y+8	; 0x08
    1812:	df 80       	ldd	r13, Y+7	; 0x07
    1814:	ee 80       	ldd	r14, Y+6	; 0x06
    1816:	fd 80       	ldd	r15, Y+5	; 0x05
    1818:	0c 81       	ldd	r16, Y+4	; 0x04
    181a:	1b 81       	ldd	r17, Y+3	; 0x03
    181c:	aa 81       	ldd	r26, Y+2	; 0x02
    181e:	b9 81       	ldd	r27, Y+1	; 0x01
    1820:	ce 0f       	add	r28, r30
    1822:	d1 1d       	adc	r29, r1
    1824:	0f b6       	in	r0, 0x3f	; 63
    1826:	f8 94       	cli
    1828:	de bf       	out	0x3e, r29	; 62
    182a:	0f be       	out	0x3f, r0	; 63
    182c:	cd bf       	out	0x3d, r28	; 61
    182e:	ed 01       	movw	r28, r26
    1830:	08 95       	ret

00001832 <itoa>:
    1832:	fb 01       	movw	r30, r22
    1834:	9f 01       	movw	r18, r30
    1836:	e8 94       	clt
    1838:	42 30       	cpi	r20, 0x02	; 2
    183a:	c4 f0       	brlt	.+48     	; 0x186c <itoa+0x3a>
    183c:	45 32       	cpi	r20, 0x25	; 37
    183e:	b4 f4       	brge	.+44     	; 0x186c <itoa+0x3a>
    1840:	4a 30       	cpi	r20, 0x0A	; 10
    1842:	29 f4       	brne	.+10     	; 0x184e <itoa+0x1c>
    1844:	97 fb       	bst	r25, 7
    1846:	1e f4       	brtc	.+6      	; 0x184e <itoa+0x1c>
    1848:	90 95       	com	r25
    184a:	81 95       	neg	r24
    184c:	9f 4f       	sbci	r25, 0xFF	; 255
    184e:	64 2f       	mov	r22, r20
    1850:	77 27       	eor	r23, r23
    1852:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__udivmodhi4>
    1856:	80 5d       	subi	r24, 0xD0	; 208
    1858:	8a 33       	cpi	r24, 0x3A	; 58
    185a:	0c f0       	brlt	.+2      	; 0x185e <itoa+0x2c>
    185c:	89 5d       	subi	r24, 0xD9	; 217
    185e:	81 93       	st	Z+, r24
    1860:	cb 01       	movw	r24, r22
    1862:	00 97       	sbiw	r24, 0x00	; 0
    1864:	a1 f7       	brne	.-24     	; 0x184e <itoa+0x1c>
    1866:	16 f4       	brtc	.+4      	; 0x186c <itoa+0x3a>
    1868:	5d e2       	ldi	r21, 0x2D	; 45
    186a:	51 93       	st	Z+, r21
    186c:	10 82       	st	Z, r1
    186e:	c9 01       	movw	r24, r18
    1870:	0c 94 3a 0c 	jmp	0x1874	; 0x1874 <strrev>

00001874 <strrev>:
    1874:	dc 01       	movw	r26, r24
    1876:	fc 01       	movw	r30, r24
    1878:	67 2f       	mov	r22, r23
    187a:	71 91       	ld	r23, Z+
    187c:	77 23       	and	r23, r23
    187e:	e1 f7       	brne	.-8      	; 0x1878 <strrev+0x4>
    1880:	32 97       	sbiw	r30, 0x02	; 2
    1882:	04 c0       	rjmp	.+8      	; 0x188c <strrev+0x18>
    1884:	7c 91       	ld	r23, X
    1886:	6d 93       	st	X+, r22
    1888:	70 83       	st	Z, r23
    188a:	62 91       	ld	r22, -Z
    188c:	ae 17       	cp	r26, r30
    188e:	bf 07       	cpc	r27, r31
    1890:	c8 f3       	brcs	.-14     	; 0x1884 <strrev+0x10>
    1892:	08 95       	ret

00001894 <__udivmodhi4>:
    1894:	aa 1b       	sub	r26, r26
    1896:	bb 1b       	sub	r27, r27
    1898:	51 e1       	ldi	r21, 0x11	; 17
    189a:	07 c0       	rjmp	.+14     	; 0x18aa <__udivmodhi4_ep>

0000189c <__udivmodhi4_loop>:
    189c:	aa 1f       	adc	r26, r26
    189e:	bb 1f       	adc	r27, r27
    18a0:	a6 17       	cp	r26, r22
    18a2:	b7 07       	cpc	r27, r23
    18a4:	10 f0       	brcs	.+4      	; 0x18aa <__udivmodhi4_ep>
    18a6:	a6 1b       	sub	r26, r22
    18a8:	b7 0b       	sbc	r27, r23

000018aa <__udivmodhi4_ep>:
    18aa:	88 1f       	adc	r24, r24
    18ac:	99 1f       	adc	r25, r25
    18ae:	5a 95       	dec	r21
    18b0:	a9 f7       	brne	.-22     	; 0x189c <__udivmodhi4_loop>
    18b2:	80 95       	com	r24
    18b4:	90 95       	com	r25
    18b6:	bc 01       	movw	r22, r24
    18b8:	cd 01       	movw	r24, r26
    18ba:	08 95       	ret

000018bc <_exit>:
    18bc:	f8 94       	cli

000018be <__stop_program>:
    18be:	ff cf       	rjmp	.-2      	; 0x18be <__stop_program>
