
Lab3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  000016a0  00001734  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  0080011e  0080011e  00001752  2**0
                  ALLOC
  3 .stab         0000246c  00000000  00000000  00001754  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011f6  00000000  00000000  00003bc0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 d7 03 	jmp	0x7ae	; 0x7ae <__vector_5>
      18:	0c 94 ad 03 	jmp	0x75a	; 0x75a <__vector_6>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	11 e0       	ldi	r17, 0x01	; 1
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	e0 ea       	ldi	r30, 0xA0	; 160
      90:	f6 e1       	ldi	r31, 0x16	; 22
      92:	02 c0       	rjmp	.+4      	; 0x98 <.do_copy_data_start>

00000094 <.do_copy_data_loop>:
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0

00000098 <.do_copy_data_start>:
      98:	ae 31       	cpi	r26, 0x1E	; 30
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <.do_copy_data_loop>

0000009e <__do_clear_bss>:
      9e:	11 e0       	ldi	r17, 0x01	; 1
      a0:	ae e1       	ldi	r26, 0x1E	; 30
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	aa 33       	cpi	r26, 0x3A	; 58
      aa:	b1 07       	cpc	r27, r17
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 dd 04 	call	0x9ba	; 0x9ba <main>
      b2:	0c 94 4e 0b 	jmp	0x169c	; 0x169c <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <toggle_e>:


#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
      ba:	df 93       	push	r29
      bc:	cf 93       	push	r28
      be:	cd b7       	in	r28, 0x3d	; 61
      c0:	de b7       	in	r29, 0x3e	; 62
    lcd_e_high();
      c2:	a2 e2       	ldi	r26, 0x22	; 34
      c4:	b0 e0       	ldi	r27, 0x00	; 0
      c6:	e2 e2       	ldi	r30, 0x22	; 34
      c8:	f0 e0       	ldi	r31, 0x00	; 0
      ca:	80 81       	ld	r24, Z
      cc:	84 60       	ori	r24, 0x04	; 4
      ce:	8c 93       	st	X, r24
    lcd_e_delay();
      d0:	00 c0       	rjmp	.+0      	; 0xd2 <toggle_e+0x18>
    lcd_e_low();
      d2:	a2 e2       	ldi	r26, 0x22	; 34
      d4:	b0 e0       	ldi	r27, 0x00	; 0
      d6:	e2 e2       	ldi	r30, 0x22	; 34
      d8:	f0 e0       	ldi	r31, 0x00	; 0
      da:	80 81       	ld	r24, Z
      dc:	8b 7f       	andi	r24, 0xFB	; 251
      de:	8c 93       	st	X, r24
}
      e0:	cf 91       	pop	r28
      e2:	df 91       	pop	r29
      e4:	08 95       	ret

000000e6 <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
      e6:	df 93       	push	r29
      e8:	cf 93       	push	r28
      ea:	00 d0       	rcall	.+0      	; 0xec <lcd_write+0x6>
      ec:	0f 92       	push	r0
      ee:	cd b7       	in	r28, 0x3d	; 61
      f0:	de b7       	in	r29, 0x3e	; 62
      f2:	8a 83       	std	Y+2, r24	; 0x02
      f4:	6b 83       	std	Y+3, r22	; 0x03
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
      f6:	8b 81       	ldd	r24, Y+3	; 0x03
      f8:	88 23       	and	r24, r24
      fa:	41 f0       	breq	.+16     	; 0x10c <lcd_write+0x26>
       lcd_rs_high();
      fc:	a2 e2       	ldi	r26, 0x22	; 34
      fe:	b0 e0       	ldi	r27, 0x00	; 0
     100:	e2 e2       	ldi	r30, 0x22	; 34
     102:	f0 e0       	ldi	r31, 0x00	; 0
     104:	80 81       	ld	r24, Z
     106:	81 60       	ori	r24, 0x01	; 1
     108:	8c 93       	st	X, r24
     10a:	07 c0       	rjmp	.+14     	; 0x11a <lcd_write+0x34>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
     10c:	a2 e2       	ldi	r26, 0x22	; 34
     10e:	b0 e0       	ldi	r27, 0x00	; 0
     110:	e2 e2       	ldi	r30, 0x22	; 34
     112:	f0 e0       	ldi	r31, 0x00	; 0
     114:	80 81       	ld	r24, Z
     116:	8e 7f       	andi	r24, 0xFE	; 254
     118:	8c 93       	st	X, r24
    }
    lcd_rw_low();
     11a:	a2 e2       	ldi	r26, 0x22	; 34
     11c:	b0 e0       	ldi	r27, 0x00	; 0
     11e:	e2 e2       	ldi	r30, 0x22	; 34
     120:	f0 e0       	ldi	r31, 0x00	; 0
     122:	80 81       	ld	r24, Z
     124:	8d 7f       	andi	r24, 0xFD	; 253
     126:	8c 93       	st	X, r24
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     128:	a1 e2       	ldi	r26, 0x21	; 33
     12a:	b0 e0       	ldi	r27, 0x00	; 0
     12c:	e1 e2       	ldi	r30, 0x21	; 33
     12e:	f0 e0       	ldi	r31, 0x00	; 0
     130:	80 81       	ld	r24, Z
     132:	80 61       	ori	r24, 0x10	; 16
     134:	8c 93       	st	X, r24
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     136:	a1 e2       	ldi	r26, 0x21	; 33
     138:	b0 e0       	ldi	r27, 0x00	; 0
     13a:	e1 e2       	ldi	r30, 0x21	; 33
     13c:	f0 e0       	ldi	r31, 0x00	; 0
     13e:	80 81       	ld	r24, Z
     140:	80 62       	ori	r24, 0x20	; 32
     142:	8c 93       	st	X, r24
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     144:	a1 e2       	ldi	r26, 0x21	; 33
     146:	b0 e0       	ldi	r27, 0x00	; 0
     148:	e1 e2       	ldi	r30, 0x21	; 33
     14a:	f0 e0       	ldi	r31, 0x00	; 0
     14c:	80 81       	ld	r24, Z
     14e:	80 64       	ori	r24, 0x40	; 64
     150:	8c 93       	st	X, r24
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     152:	a1 e2       	ldi	r26, 0x21	; 33
     154:	b0 e0       	ldi	r27, 0x00	; 0
     156:	e1 e2       	ldi	r30, 0x21	; 33
     158:	f0 e0       	ldi	r31, 0x00	; 0
     15a:	80 81       	ld	r24, Z
     15c:	80 68       	ori	r24, 0x80	; 128
     15e:	8c 93       	st	X, r24
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
     160:	a2 e2       	ldi	r26, 0x22	; 34
     162:	b0 e0       	ldi	r27, 0x00	; 0
     164:	e2 e2       	ldi	r30, 0x22	; 34
     166:	f0 e0       	ldi	r31, 0x00	; 0
     168:	80 81       	ld	r24, Z
     16a:	8f 77       	andi	r24, 0x7F	; 127
     16c:	8c 93       	st	X, r24
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
     16e:	a2 e2       	ldi	r26, 0x22	; 34
     170:	b0 e0       	ldi	r27, 0x00	; 0
     172:	e2 e2       	ldi	r30, 0x22	; 34
     174:	f0 e0       	ldi	r31, 0x00	; 0
     176:	80 81       	ld	r24, Z
     178:	8f 7b       	andi	r24, 0xBF	; 191
     17a:	8c 93       	st	X, r24
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
     17c:	a2 e2       	ldi	r26, 0x22	; 34
     17e:	b0 e0       	ldi	r27, 0x00	; 0
     180:	e2 e2       	ldi	r30, 0x22	; 34
     182:	f0 e0       	ldi	r31, 0x00	; 0
     184:	80 81       	ld	r24, Z
     186:	8f 7d       	andi	r24, 0xDF	; 223
     188:	8c 93       	st	X, r24
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
     18a:	a2 e2       	ldi	r26, 0x22	; 34
     18c:	b0 e0       	ldi	r27, 0x00	; 0
     18e:	e2 e2       	ldi	r30, 0x22	; 34
     190:	f0 e0       	ldi	r31, 0x00	; 0
     192:	80 81       	ld	r24, Z
     194:	8f 7e       	andi	r24, 0xEF	; 239
     196:	8c 93       	st	X, r24
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     198:	8a 81       	ldd	r24, Y+2	; 0x02
     19a:	88 23       	and	r24, r24
     19c:	3c f4       	brge	.+14     	; 0x1ac <lcd_write+0xc6>
     19e:	a2 e2       	ldi	r26, 0x22	; 34
     1a0:	b0 e0       	ldi	r27, 0x00	; 0
     1a2:	e2 e2       	ldi	r30, 0x22	; 34
     1a4:	f0 e0       	ldi	r31, 0x00	; 0
     1a6:	80 81       	ld	r24, Z
     1a8:	80 68       	ori	r24, 0x80	; 128
     1aa:	8c 93       	st	X, r24
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     1ac:	8a 81       	ldd	r24, Y+2	; 0x02
     1ae:	88 2f       	mov	r24, r24
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	80 74       	andi	r24, 0x40	; 64
     1b4:	90 70       	andi	r25, 0x00	; 0
     1b6:	00 97       	sbiw	r24, 0x00	; 0
     1b8:	39 f0       	breq	.+14     	; 0x1c8 <lcd_write+0xe2>
     1ba:	a2 e2       	ldi	r26, 0x22	; 34
     1bc:	b0 e0       	ldi	r27, 0x00	; 0
     1be:	e2 e2       	ldi	r30, 0x22	; 34
     1c0:	f0 e0       	ldi	r31, 0x00	; 0
     1c2:	80 81       	ld	r24, Z
     1c4:	80 64       	ori	r24, 0x40	; 64
     1c6:	8c 93       	st	X, r24
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     1c8:	8a 81       	ldd	r24, Y+2	; 0x02
     1ca:	88 2f       	mov	r24, r24
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	80 72       	andi	r24, 0x20	; 32
     1d0:	90 70       	andi	r25, 0x00	; 0
     1d2:	00 97       	sbiw	r24, 0x00	; 0
     1d4:	39 f0       	breq	.+14     	; 0x1e4 <lcd_write+0xfe>
     1d6:	a2 e2       	ldi	r26, 0x22	; 34
     1d8:	b0 e0       	ldi	r27, 0x00	; 0
     1da:	e2 e2       	ldi	r30, 0x22	; 34
     1dc:	f0 e0       	ldi	r31, 0x00	; 0
     1de:	80 81       	ld	r24, Z
     1e0:	80 62       	ori	r24, 0x20	; 32
     1e2:	8c 93       	st	X, r24
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
     1e4:	8a 81       	ldd	r24, Y+2	; 0x02
     1e6:	88 2f       	mov	r24, r24
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	80 71       	andi	r24, 0x10	; 16
     1ec:	90 70       	andi	r25, 0x00	; 0
     1ee:	00 97       	sbiw	r24, 0x00	; 0
     1f0:	39 f0       	breq	.+14     	; 0x200 <lcd_write+0x11a>
     1f2:	a2 e2       	ldi	r26, 0x22	; 34
     1f4:	b0 e0       	ldi	r27, 0x00	; 0
     1f6:	e2 e2       	ldi	r30, 0x22	; 34
     1f8:	f0 e0       	ldi	r31, 0x00	; 0
     1fa:	80 81       	ld	r24, Z
     1fc:	80 61       	ori	r24, 0x10	; 16
     1fe:	8c 93       	st	X, r24
        lcd_e_toggle();
     200:	0e 94 5d 00 	call	0xba	; 0xba <toggle_e>
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
     204:	a2 e2       	ldi	r26, 0x22	; 34
     206:	b0 e0       	ldi	r27, 0x00	; 0
     208:	e2 e2       	ldi	r30, 0x22	; 34
     20a:	f0 e0       	ldi	r31, 0x00	; 0
     20c:	80 81       	ld	r24, Z
     20e:	8f 77       	andi	r24, 0x7F	; 127
     210:	8c 93       	st	X, r24
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
     212:	a2 e2       	ldi	r26, 0x22	; 34
     214:	b0 e0       	ldi	r27, 0x00	; 0
     216:	e2 e2       	ldi	r30, 0x22	; 34
     218:	f0 e0       	ldi	r31, 0x00	; 0
     21a:	80 81       	ld	r24, Z
     21c:	8f 7b       	andi	r24, 0xBF	; 191
     21e:	8c 93       	st	X, r24
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
     220:	a2 e2       	ldi	r26, 0x22	; 34
     222:	b0 e0       	ldi	r27, 0x00	; 0
     224:	e2 e2       	ldi	r30, 0x22	; 34
     226:	f0 e0       	ldi	r31, 0x00	; 0
     228:	80 81       	ld	r24, Z
     22a:	8f 7d       	andi	r24, 0xDF	; 223
     22c:	8c 93       	st	X, r24
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
     22e:	a2 e2       	ldi	r26, 0x22	; 34
     230:	b0 e0       	ldi	r27, 0x00	; 0
     232:	e2 e2       	ldi	r30, 0x22	; 34
     234:	f0 e0       	ldi	r31, 0x00	; 0
     236:	80 81       	ld	r24, Z
     238:	8f 7e       	andi	r24, 0xEF	; 239
     23a:	8c 93       	st	X, r24
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     23c:	8a 81       	ldd	r24, Y+2	; 0x02
     23e:	88 2f       	mov	r24, r24
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	88 70       	andi	r24, 0x08	; 8
     244:	90 70       	andi	r25, 0x00	; 0
     246:	00 97       	sbiw	r24, 0x00	; 0
     248:	39 f0       	breq	.+14     	; 0x258 <lcd_write+0x172>
     24a:	a2 e2       	ldi	r26, 0x22	; 34
     24c:	b0 e0       	ldi	r27, 0x00	; 0
     24e:	e2 e2       	ldi	r30, 0x22	; 34
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	80 81       	ld	r24, Z
     254:	80 68       	ori	r24, 0x80	; 128
     256:	8c 93       	st	X, r24
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     258:	8a 81       	ldd	r24, Y+2	; 0x02
     25a:	88 2f       	mov	r24, r24
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	84 70       	andi	r24, 0x04	; 4
     260:	90 70       	andi	r25, 0x00	; 0
     262:	00 97       	sbiw	r24, 0x00	; 0
     264:	39 f0       	breq	.+14     	; 0x274 <lcd_write+0x18e>
     266:	a2 e2       	ldi	r26, 0x22	; 34
     268:	b0 e0       	ldi	r27, 0x00	; 0
     26a:	e2 e2       	ldi	r30, 0x22	; 34
     26c:	f0 e0       	ldi	r31, 0x00	; 0
     26e:	80 81       	ld	r24, Z
     270:	80 64       	ori	r24, 0x40	; 64
     272:	8c 93       	st	X, r24
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     274:	8a 81       	ldd	r24, Y+2	; 0x02
     276:	88 2f       	mov	r24, r24
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	82 70       	andi	r24, 0x02	; 2
     27c:	90 70       	andi	r25, 0x00	; 0
     27e:	00 97       	sbiw	r24, 0x00	; 0
     280:	39 f0       	breq	.+14     	; 0x290 <lcd_write+0x1aa>
     282:	a2 e2       	ldi	r26, 0x22	; 34
     284:	b0 e0       	ldi	r27, 0x00	; 0
     286:	e2 e2       	ldi	r30, 0x22	; 34
     288:	f0 e0       	ldi	r31, 0x00	; 0
     28a:	80 81       	ld	r24, Z
     28c:	80 62       	ori	r24, 0x20	; 32
     28e:	8c 93       	st	X, r24
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
     290:	8a 81       	ldd	r24, Y+2	; 0x02
     292:	88 2f       	mov	r24, r24
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	81 70       	andi	r24, 0x01	; 1
     298:	90 70       	andi	r25, 0x00	; 0
     29a:	88 23       	and	r24, r24
     29c:	39 f0       	breq	.+14     	; 0x2ac <lcd_write+0x1c6>
     29e:	a2 e2       	ldi	r26, 0x22	; 34
     2a0:	b0 e0       	ldi	r27, 0x00	; 0
     2a2:	e2 e2       	ldi	r30, 0x22	; 34
     2a4:	f0 e0       	ldi	r31, 0x00	; 0
     2a6:	80 81       	ld	r24, Z
     2a8:	80 61       	ori	r24, 0x10	; 16
     2aa:	8c 93       	st	X, r24
        lcd_e_toggle();        
     2ac:	0e 94 5d 00 	call	0xba	; 0xba <toggle_e>
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
     2b0:	a2 e2       	ldi	r26, 0x22	; 34
     2b2:	b0 e0       	ldi	r27, 0x00	; 0
     2b4:	e2 e2       	ldi	r30, 0x22	; 34
     2b6:	f0 e0       	ldi	r31, 0x00	; 0
     2b8:	80 81       	ld	r24, Z
     2ba:	80 61       	ori	r24, 0x10	; 16
     2bc:	8c 93       	st	X, r24
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     2be:	a2 e2       	ldi	r26, 0x22	; 34
     2c0:	b0 e0       	ldi	r27, 0x00	; 0
     2c2:	e2 e2       	ldi	r30, 0x22	; 34
     2c4:	f0 e0       	ldi	r31, 0x00	; 0
     2c6:	80 81       	ld	r24, Z
     2c8:	80 62       	ori	r24, 0x20	; 32
     2ca:	8c 93       	st	X, r24
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     2cc:	a2 e2       	ldi	r26, 0x22	; 34
     2ce:	b0 e0       	ldi	r27, 0x00	; 0
     2d0:	e2 e2       	ldi	r30, 0x22	; 34
     2d2:	f0 e0       	ldi	r31, 0x00	; 0
     2d4:	80 81       	ld	r24, Z
     2d6:	80 64       	ori	r24, 0x40	; 64
     2d8:	8c 93       	st	X, r24
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     2da:	a2 e2       	ldi	r26, 0x22	; 34
     2dc:	b0 e0       	ldi	r27, 0x00	; 0
     2de:	e2 e2       	ldi	r30, 0x22	; 34
     2e0:	f0 e0       	ldi	r31, 0x00	; 0
     2e2:	80 81       	ld	r24, Z
     2e4:	80 68       	ori	r24, 0x80	; 128
     2e6:	8c 93       	st	X, r24
    }
}
     2e8:	0f 90       	pop	r0
     2ea:	0f 90       	pop	r0
     2ec:	0f 90       	pop	r0
     2ee:	cf 91       	pop	r28
     2f0:	df 91       	pop	r29
     2f2:	08 95       	ret

000002f4 <lcd_read>:
                 0: read busy flag / address counter
Returns:  byte read from LCD controller
*************************************************************************/
#if LCD_IO_MODE
static uint8_t lcd_read(uint8_t rs) 
{
     2f4:	df 93       	push	r29
     2f6:	cf 93       	push	r28
     2f8:	00 d0       	rcall	.+0      	; 0x2fa <lcd_read+0x6>
     2fa:	cd b7       	in	r28, 0x3d	; 61
     2fc:	de b7       	in	r29, 0x3e	; 62
     2fe:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t data;
    
    
    if (rs)
     300:	8a 81       	ldd	r24, Y+2	; 0x02
     302:	88 23       	and	r24, r24
     304:	41 f0       	breq	.+16     	; 0x316 <lcd_read+0x22>
        lcd_rs_high();                       /* RS=1: read data      */
     306:	a2 e2       	ldi	r26, 0x22	; 34
     308:	b0 e0       	ldi	r27, 0x00	; 0
     30a:	e2 e2       	ldi	r30, 0x22	; 34
     30c:	f0 e0       	ldi	r31, 0x00	; 0
     30e:	80 81       	ld	r24, Z
     310:	81 60       	ori	r24, 0x01	; 1
     312:	8c 93       	st	X, r24
     314:	07 c0       	rjmp	.+14     	; 0x324 <lcd_read+0x30>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
     316:	a2 e2       	ldi	r26, 0x22	; 34
     318:	b0 e0       	ldi	r27, 0x00	; 0
     31a:	e2 e2       	ldi	r30, 0x22	; 34
     31c:	f0 e0       	ldi	r31, 0x00	; 0
     31e:	80 81       	ld	r24, Z
     320:	8e 7f       	andi	r24, 0xFE	; 254
     322:	8c 93       	st	X, r24
    lcd_rw_high();                           /* RW=1  read mode      */
     324:	a2 e2       	ldi	r26, 0x22	; 34
     326:	b0 e0       	ldi	r27, 0x00	; 0
     328:	e2 e2       	ldi	r30, 0x22	; 34
     32a:	f0 e0       	ldi	r31, 0x00	; 0
     32c:	80 81       	ld	r24, Z
     32e:	82 60       	ori	r24, 0x02	; 2
     330:	8c 93       	st	X, r24
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
     332:	a1 e2       	ldi	r26, 0x21	; 33
     334:	b0 e0       	ldi	r27, 0x00	; 0
     336:	e1 e2       	ldi	r30, 0x21	; 33
     338:	f0 e0       	ldi	r31, 0x00	; 0
     33a:	80 81       	ld	r24, Z
     33c:	8f 7e       	andi	r24, 0xEF	; 239
     33e:	8c 93       	st	X, r24
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
     340:	a1 e2       	ldi	r26, 0x21	; 33
     342:	b0 e0       	ldi	r27, 0x00	; 0
     344:	e1 e2       	ldi	r30, 0x21	; 33
     346:	f0 e0       	ldi	r31, 0x00	; 0
     348:	80 81       	ld	r24, Z
     34a:	8f 7d       	andi	r24, 0xDF	; 223
     34c:	8c 93       	st	X, r24
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
     34e:	a1 e2       	ldi	r26, 0x21	; 33
     350:	b0 e0       	ldi	r27, 0x00	; 0
     352:	e1 e2       	ldi	r30, 0x21	; 33
     354:	f0 e0       	ldi	r31, 0x00	; 0
     356:	80 81       	ld	r24, Z
     358:	8f 7b       	andi	r24, 0xBF	; 191
     35a:	8c 93       	st	X, r24
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
     35c:	a1 e2       	ldi	r26, 0x21	; 33
     35e:	b0 e0       	ldi	r27, 0x00	; 0
     360:	e1 e2       	ldi	r30, 0x21	; 33
     362:	f0 e0       	ldi	r31, 0x00	; 0
     364:	80 81       	ld	r24, Z
     366:	8f 77       	andi	r24, 0x7F	; 127
     368:	8c 93       	st	X, r24
                
        /* read high nibble first */
        lcd_e_high();
     36a:	a2 e2       	ldi	r26, 0x22	; 34
     36c:	b0 e0       	ldi	r27, 0x00	; 0
     36e:	e2 e2       	ldi	r30, 0x22	; 34
     370:	f0 e0       	ldi	r31, 0x00	; 0
     372:	80 81       	ld	r24, Z
     374:	84 60       	ori	r24, 0x04	; 4
     376:	8c 93       	st	X, r24
        lcd_e_delay();        
     378:	00 c0       	rjmp	.+0      	; 0x37a <lcd_read+0x86>
        data = 0;
     37a:	19 82       	std	Y+1, r1	; 0x01
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
     37c:	e0 e2       	ldi	r30, 0x20	; 32
     37e:	f0 e0       	ldi	r31, 0x00	; 0
     380:	80 81       	ld	r24, Z
     382:	88 2f       	mov	r24, r24
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	80 71       	andi	r24, 0x10	; 16
     388:	90 70       	andi	r25, 0x00	; 0
     38a:	00 97       	sbiw	r24, 0x00	; 0
     38c:	19 f0       	breq	.+6      	; 0x394 <lcd_read+0xa0>
     38e:	89 81       	ldd	r24, Y+1	; 0x01
     390:	80 61       	ori	r24, 0x10	; 16
     392:	89 83       	std	Y+1, r24	; 0x01
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
     394:	e0 e2       	ldi	r30, 0x20	; 32
     396:	f0 e0       	ldi	r31, 0x00	; 0
     398:	80 81       	ld	r24, Z
     39a:	88 2f       	mov	r24, r24
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	80 72       	andi	r24, 0x20	; 32
     3a0:	90 70       	andi	r25, 0x00	; 0
     3a2:	00 97       	sbiw	r24, 0x00	; 0
     3a4:	19 f0       	breq	.+6      	; 0x3ac <lcd_read+0xb8>
     3a6:	89 81       	ldd	r24, Y+1	; 0x01
     3a8:	80 62       	ori	r24, 0x20	; 32
     3aa:	89 83       	std	Y+1, r24	; 0x01
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
     3ac:	e0 e2       	ldi	r30, 0x20	; 32
     3ae:	f0 e0       	ldi	r31, 0x00	; 0
     3b0:	80 81       	ld	r24, Z
     3b2:	88 2f       	mov	r24, r24
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	80 74       	andi	r24, 0x40	; 64
     3b8:	90 70       	andi	r25, 0x00	; 0
     3ba:	00 97       	sbiw	r24, 0x00	; 0
     3bc:	19 f0       	breq	.+6      	; 0x3c4 <lcd_read+0xd0>
     3be:	89 81       	ldd	r24, Y+1	; 0x01
     3c0:	80 64       	ori	r24, 0x40	; 64
     3c2:	89 83       	std	Y+1, r24	; 0x01
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
     3c4:	e0 e2       	ldi	r30, 0x20	; 32
     3c6:	f0 e0       	ldi	r31, 0x00	; 0
     3c8:	80 81       	ld	r24, Z
     3ca:	88 23       	and	r24, r24
     3cc:	1c f4       	brge	.+6      	; 0x3d4 <lcd_read+0xe0>
     3ce:	89 81       	ldd	r24, Y+1	; 0x01
     3d0:	80 68       	ori	r24, 0x80	; 128
     3d2:	89 83       	std	Y+1, r24	; 0x01
        lcd_e_low();
     3d4:	a2 e2       	ldi	r26, 0x22	; 34
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e2 e2       	ldi	r30, 0x22	; 34
     3da:	f0 e0       	ldi	r31, 0x00	; 0
     3dc:	80 81       	ld	r24, Z
     3de:	8b 7f       	andi	r24, 0xFB	; 251
     3e0:	8c 93       	st	X, r24

        lcd_e_delay();                       /* Enable 500ns low       */
     3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <lcd_read+0xf0>
    
        /* read low nibble */    
        lcd_e_high();
     3e4:	a2 e2       	ldi	r26, 0x22	; 34
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e2 e2       	ldi	r30, 0x22	; 34
     3ea:	f0 e0       	ldi	r31, 0x00	; 0
     3ec:	80 81       	ld	r24, Z
     3ee:	84 60       	ori	r24, 0x04	; 4
     3f0:	8c 93       	st	X, r24
        lcd_e_delay();
     3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <lcd_read+0x100>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
     3f4:	e0 e2       	ldi	r30, 0x20	; 32
     3f6:	f0 e0       	ldi	r31, 0x00	; 0
     3f8:	80 81       	ld	r24, Z
     3fa:	88 2f       	mov	r24, r24
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	80 71       	andi	r24, 0x10	; 16
     400:	90 70       	andi	r25, 0x00	; 0
     402:	00 97       	sbiw	r24, 0x00	; 0
     404:	19 f0       	breq	.+6      	; 0x40c <lcd_read+0x118>
     406:	89 81       	ldd	r24, Y+1	; 0x01
     408:	81 60       	ori	r24, 0x01	; 1
     40a:	89 83       	std	Y+1, r24	; 0x01
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
     40c:	e0 e2       	ldi	r30, 0x20	; 32
     40e:	f0 e0       	ldi	r31, 0x00	; 0
     410:	80 81       	ld	r24, Z
     412:	88 2f       	mov	r24, r24
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	80 72       	andi	r24, 0x20	; 32
     418:	90 70       	andi	r25, 0x00	; 0
     41a:	00 97       	sbiw	r24, 0x00	; 0
     41c:	19 f0       	breq	.+6      	; 0x424 <lcd_read+0x130>
     41e:	89 81       	ldd	r24, Y+1	; 0x01
     420:	82 60       	ori	r24, 0x02	; 2
     422:	89 83       	std	Y+1, r24	; 0x01
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
     424:	e0 e2       	ldi	r30, 0x20	; 32
     426:	f0 e0       	ldi	r31, 0x00	; 0
     428:	80 81       	ld	r24, Z
     42a:	88 2f       	mov	r24, r24
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	80 74       	andi	r24, 0x40	; 64
     430:	90 70       	andi	r25, 0x00	; 0
     432:	00 97       	sbiw	r24, 0x00	; 0
     434:	19 f0       	breq	.+6      	; 0x43c <lcd_read+0x148>
     436:	89 81       	ldd	r24, Y+1	; 0x01
     438:	84 60       	ori	r24, 0x04	; 4
     43a:	89 83       	std	Y+1, r24	; 0x01
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
     43c:	e0 e2       	ldi	r30, 0x20	; 32
     43e:	f0 e0       	ldi	r31, 0x00	; 0
     440:	80 81       	ld	r24, Z
     442:	88 23       	and	r24, r24
     444:	1c f4       	brge	.+6      	; 0x44c <lcd_read+0x158>
     446:	89 81       	ldd	r24, Y+1	; 0x01
     448:	88 60       	ori	r24, 0x08	; 8
     44a:	89 83       	std	Y+1, r24	; 0x01
        lcd_e_low();
     44c:	a2 e2       	ldi	r26, 0x22	; 34
     44e:	b0 e0       	ldi	r27, 0x00	; 0
     450:	e2 e2       	ldi	r30, 0x22	; 34
     452:	f0 e0       	ldi	r31, 0x00	; 0
     454:	80 81       	ld	r24, Z
     456:	8b 7f       	andi	r24, 0xFB	; 251
     458:	8c 93       	st	X, r24
    }
    return data;
     45a:	89 81       	ldd	r24, Y+1	; 0x01
}
     45c:	0f 90       	pop	r0
     45e:	0f 90       	pop	r0
     460:	cf 91       	pop	r28
     462:	df 91       	pop	r29
     464:	08 95       	ret

00000466 <lcd_waitbusy>:
/*************************************************************************
loops while lcd is busy, returns address counter
*************************************************************************/
static uint8_t lcd_waitbusy(void)

{
     466:	df 93       	push	r29
     468:	cf 93       	push	r28
     46a:	cd b7       	in	r28, 0x3d	; 61
     46c:	de b7       	in	r29, 0x3e	; 62
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <lcd_read>
     474:	88 23       	and	r24, r24
     476:	dc f3       	brlt	.-10     	; 0x46e <lcd_waitbusy+0x8>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);
     478:	82 e0       	ldi	r24, 0x02	; 2
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	0e 94 46 02 	call	0x48c	; 0x48c <_delayFourCycles>

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
     480:	80 e0       	ldi	r24, 0x00	; 0
     482:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <lcd_read>
    
}/* lcd_waitbusy */
     486:	cf 91       	pop	r28
     488:	df 91       	pop	r29
     48a:	08 95       	ret

0000048c <_delayFourCycles>:

/*************************************************************************
 delay loop for small accurate delays: 16-bit counter, 4 cycles/loop
*************************************************************************/
static inline void _delayFourCycles(unsigned int __count)
{
     48c:	df 93       	push	r29
     48e:	cf 93       	push	r28
     490:	00 d0       	rcall	.+0      	; 0x492 <_delayFourCycles+0x6>
     492:	cd b7       	in	r28, 0x3d	; 61
     494:	de b7       	in	r29, 0x3e	; 62
     496:	9a 83       	std	Y+2, r25	; 0x02
     498:	89 83       	std	Y+1, r24	; 0x01
    if ( __count == 0 )    
     49a:	89 81       	ldd	r24, Y+1	; 0x01
     49c:	9a 81       	ldd	r25, Y+2	; 0x02
     49e:	00 97       	sbiw	r24, 0x00	; 0
     4a0:	11 f4       	brne	.+4      	; 0x4a6 <_delayFourCycles+0x1a>
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
     4a2:	00 c0       	rjmp	.+0      	; 0x4a4 <_delayFourCycles+0x18>
     4a4:	06 c0       	rjmp	.+12     	; 0x4b2 <_delayFourCycles+0x26>
    else
        __asm__ __volatile__ (
     4a6:	89 81       	ldd	r24, Y+1	; 0x01
     4a8:	9a 81       	ldd	r25, Y+2	; 0x02
     4aa:	01 97       	sbiw	r24, 0x01	; 1
     4ac:	f1 f7       	brne	.-4      	; 0x4aa <_delayFourCycles+0x1e>
     4ae:	9a 83       	std	Y+2, r25	; 0x02
     4b0:	89 83       	std	Y+1, r24	; 0x01
    	    "1: sbiw %0,1" "\n\t"                  
    	    "brne 1b"                              // 4 cycles/loop
    	    : "=w" (__count)
    	    : "0" (__count)
    	   );
}
     4b2:	0f 90       	pop	r0
     4b4:	0f 90       	pop	r0
     4b6:	cf 91       	pop	r28
     4b8:	df 91       	pop	r29
     4ba:	08 95       	ret

000004bc <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
     4bc:	df 93       	push	r29
     4be:	cf 93       	push	r28
     4c0:	0f 92       	push	r0
     4c2:	cd b7       	in	r28, 0x3d	; 61
     4c4:	de b7       	in	r29, 0x3e	; 62
     4c6:	89 83       	std	Y+1, r24	; 0x01
    lcd_waitbusy();
     4c8:	0e 94 33 02 	call	0x466	; 0x466 <lcd_waitbusy>
    lcd_write(cmd,0);
     4cc:	89 81       	ldd	r24, Y+1	; 0x01
     4ce:	60 e0       	ldi	r22, 0x00	; 0
     4d0:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_write>
}
     4d4:	0f 90       	pop	r0
     4d6:	cf 91       	pop	r28
     4d8:	df 91       	pop	r29
     4da:	08 95       	ret

000004dc <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
     4dc:	df 93       	push	r29
     4de:	cf 93       	push	r28
     4e0:	0f 92       	push	r0
     4e2:	cd b7       	in	r28, 0x3d	; 61
     4e4:	de b7       	in	r29, 0x3e	; 62
     4e6:	89 83       	std	Y+1, r24	; 0x01
    lcd_waitbusy();
     4e8:	0e 94 33 02 	call	0x466	; 0x466 <lcd_waitbusy>
    lcd_write(data,1);
     4ec:	89 81       	ldd	r24, Y+1	; 0x01
     4ee:	61 e0       	ldi	r22, 0x01	; 1
     4f0:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_write>
}
     4f4:	0f 90       	pop	r0
     4f6:	cf 91       	pop	r28
     4f8:	df 91       	pop	r29
     4fa:	08 95       	ret

000004fc <lcd_gotoxy>:
Input:    x  horizontal position  (0: left most position)
          y  vertical position    (0: first line)
Returns:  none
*************************************************************************/
void lcd_gotoxy(uint8_t x, uint8_t y)
{
     4fc:	df 93       	push	r29
     4fe:	cf 93       	push	r28
     500:	00 d0       	rcall	.+0      	; 0x502 <lcd_gotoxy+0x6>
     502:	cd b7       	in	r28, 0x3d	; 61
     504:	de b7       	in	r29, 0x3e	; 62
     506:	89 83       	std	Y+1, r24	; 0x01
     508:	6a 83       	std	Y+2, r22	; 0x02
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
     50a:	8a 81       	ldd	r24, Y+2	; 0x02
     50c:	88 23       	and	r24, r24
     50e:	29 f4       	brne	.+10     	; 0x51a <lcd_gotoxy+0x1e>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
     510:	89 81       	ldd	r24, Y+1	; 0x01
     512:	80 58       	subi	r24, 0x80	; 128
     514:	0e 94 5e 02 	call	0x4bc	; 0x4bc <lcd_command>
     518:	04 c0       	rjmp	.+8      	; 0x522 <lcd_gotoxy+0x26>
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
     51a:	89 81       	ldd	r24, Y+1	; 0x01
     51c:	80 54       	subi	r24, 0x40	; 64
     51e:	0e 94 5e 02 	call	0x4bc	; 0x4bc <lcd_command>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE3+x);
    else /* y==3 */
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE4+x);
#endif

}/* lcd_gotoxy */
     522:	0f 90       	pop	r0
     524:	0f 90       	pop	r0
     526:	cf 91       	pop	r28
     528:	df 91       	pop	r29
     52a:	08 95       	ret

0000052c <lcd_getxy>:


/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
     52c:	df 93       	push	r29
     52e:	cf 93       	push	r28
     530:	cd b7       	in	r28, 0x3d	; 61
     532:	de b7       	in	r29, 0x3e	; 62
    return lcd_waitbusy();
     534:	0e 94 33 02 	call	0x466	; 0x466 <lcd_waitbusy>
     538:	88 2f       	mov	r24, r24
     53a:	90 e0       	ldi	r25, 0x00	; 0
}
     53c:	cf 91       	pop	r28
     53e:	df 91       	pop	r29
     540:	08 95       	ret

00000542 <lcd_clrscr>:

/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
     542:	df 93       	push	r29
     544:	cf 93       	push	r28
     546:	cd b7       	in	r28, 0x3d	; 61
     548:	de b7       	in	r29, 0x3e	; 62
    lcd_command(1<<LCD_CLR);
     54a:	81 e0       	ldi	r24, 0x01	; 1
     54c:	0e 94 5e 02 	call	0x4bc	; 0x4bc <lcd_command>
}
     550:	cf 91       	pop	r28
     552:	df 91       	pop	r29
     554:	08 95       	ret

00000556 <lcd_home>:

/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
     556:	df 93       	push	r29
     558:	cf 93       	push	r28
     55a:	cd b7       	in	r28, 0x3d	; 61
     55c:	de b7       	in	r29, 0x3e	; 62
    lcd_command(1<<LCD_HOME);
     55e:	82 e0       	ldi	r24, 0x02	; 2
     560:	0e 94 5e 02 	call	0x4bc	; 0x4bc <lcd_command>
}
     564:	cf 91       	pop	r28
     566:	df 91       	pop	r29
     568:	08 95       	ret

0000056a <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
     56a:	df 93       	push	r29
     56c:	cf 93       	push	r28
     56e:	00 d0       	rcall	.+0      	; 0x570 <lcd_putc+0x6>
     570:	cd b7       	in	r28, 0x3d	; 61
     572:	de b7       	in	r29, 0x3e	; 62
     574:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
     576:	0e 94 33 02 	call	0x466	; 0x466 <lcd_waitbusy>
     57a:	89 83       	std	Y+1, r24	; 0x01
    if (c=='\n')
     57c:	8a 81       	ldd	r24, Y+2	; 0x02
     57e:	8a 30       	cpi	r24, 0x0A	; 10
     580:	21 f4       	brne	.+8      	; 0x58a <lcd_putc+0x20>
    {
        lcd_newline(pos);
     582:	89 81       	ldd	r24, Y+1	; 0x01
     584:	0e 94 ce 02 	call	0x59c	; 0x59c <lcd_newline>
     588:	04 c0       	rjmp	.+8      	; 0x592 <lcd_putc+0x28>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
     58a:	8a 81       	ldd	r24, Y+2	; 0x02
     58c:	61 e0       	ldi	r22, 0x01	; 1
     58e:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_write>
    }

}/* lcd_putc */
     592:	0f 90       	pop	r0
     594:	0f 90       	pop	r0
     596:	cf 91       	pop	r28
     598:	df 91       	pop	r29
     59a:	08 95       	ret

0000059c <lcd_newline>:
/*************************************************************************
Move cursor to the start of next line or to the first line if the cursor 
is already on the last line.
*************************************************************************/
static inline void lcd_newline(uint8_t pos)
{
     59c:	df 93       	push	r29
     59e:	cf 93       	push	r28
     5a0:	00 d0       	rcall	.+0      	; 0x5a2 <lcd_newline+0x6>
     5a2:	cd b7       	in	r28, 0x3d	; 61
     5a4:	de b7       	in	r29, 0x3e	; 62
     5a6:	89 83       	std	Y+1, r24	; 0x01

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
     5a8:	89 81       	ldd	r24, Y+1	; 0x01
     5aa:	80 34       	cpi	r24, 0x40	; 64
     5ac:	18 f4       	brcc	.+6      	; 0x5b4 <lcd_newline+0x18>
        addressCounter = LCD_START_LINE2;
     5ae:	80 e4       	ldi	r24, 0x40	; 64
     5b0:	8a 83       	std	Y+2, r24	; 0x02
     5b2:	01 c0       	rjmp	.+2      	; 0x5b6 <lcd_newline+0x1a>
    else
        addressCounter = LCD_START_LINE1;
     5b4:	1a 82       	std	Y+2, r1	; 0x02
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
     5b6:	8a 81       	ldd	r24, Y+2	; 0x02
     5b8:	80 58       	subi	r24, 0x80	; 128
     5ba:	0e 94 5e 02 	call	0x4bc	; 0x4bc <lcd_command>

}/* lcd_newline */
     5be:	0f 90       	pop	r0
     5c0:	0f 90       	pop	r0
     5c2:	cf 91       	pop	r28
     5c4:	df 91       	pop	r29
     5c6:	08 95       	ret

000005c8 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
     5c8:	df 93       	push	r29
     5ca:	cf 93       	push	r28
     5cc:	00 d0       	rcall	.+0      	; 0x5ce <lcd_puts+0x6>
     5ce:	00 d0       	rcall	.+0      	; 0x5d0 <lcd_puts+0x8>
     5d0:	cd b7       	in	r28, 0x3d	; 61
     5d2:	de b7       	in	r29, 0x3e	; 62
     5d4:	9a 83       	std	Y+2, r25	; 0x02
     5d6:	89 83       	std	Y+1, r24	; 0x01
     5d8:	03 c0       	rjmp	.+6      	; 0x5e0 <lcd_puts+0x18>
    register char c;

    while ( (c = *s++) ) {
        lcd_putc(c);
     5da:	8b 81       	ldd	r24, Y+3	; 0x03
     5dc:	0e 94 b5 02 	call	0x56a	; 0x56a <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
     5e0:	e9 81       	ldd	r30, Y+1	; 0x01
     5e2:	fa 81       	ldd	r31, Y+2	; 0x02
     5e4:	80 81       	ld	r24, Z
     5e6:	8b 83       	std	Y+3, r24	; 0x03
     5e8:	8b 81       	ldd	r24, Y+3	; 0x03
     5ea:	8c 83       	std	Y+4, r24	; 0x04
     5ec:	8c 81       	ldd	r24, Y+4	; 0x04
     5ee:	88 23       	and	r24, r24
     5f0:	11 f0       	breq	.+4      	; 0x5f6 <lcd_puts+0x2e>
     5f2:	81 e0       	ldi	r24, 0x01	; 1
     5f4:	8c 83       	std	Y+4, r24	; 0x04
     5f6:	8c 81       	ldd	r24, Y+4	; 0x04
     5f8:	29 81       	ldd	r18, Y+1	; 0x01
     5fa:	3a 81       	ldd	r19, Y+2	; 0x02
     5fc:	2f 5f       	subi	r18, 0xFF	; 255
     5fe:	3f 4f       	sbci	r19, 0xFF	; 255
     600:	3a 83       	std	Y+2, r19	; 0x02
     602:	29 83       	std	Y+1, r18	; 0x01
     604:	88 23       	and	r24, r24
     606:	49 f7       	brne	.-46     	; 0x5da <lcd_puts+0x12>
        lcd_putc(c);
    }

}/* lcd_puts */
     608:	0f 90       	pop	r0
     60a:	0f 90       	pop	r0
     60c:	0f 90       	pop	r0
     60e:	0f 90       	pop	r0
     610:	cf 91       	pop	r28
     612:	df 91       	pop	r29
     614:	08 95       	ret

00000616 <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
     616:	df 93       	push	r29
     618:	cf 93       	push	r28
     61a:	00 d0       	rcall	.+0      	; 0x61c <lcd_puts_p+0x6>
     61c:	00 d0       	rcall	.+0      	; 0x61e <lcd_puts_p+0x8>
     61e:	00 d0       	rcall	.+0      	; 0x620 <lcd_puts_p+0xa>
     620:	cd b7       	in	r28, 0x3d	; 61
     622:	de b7       	in	r29, 0x3e	; 62
     624:	9d 83       	std	Y+5, r25	; 0x05
     626:	8c 83       	std	Y+4, r24	; 0x04
     628:	03 c0       	rjmp	.+6      	; 0x630 <lcd_puts_p+0x1a>
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
     62a:	8e 81       	ldd	r24, Y+6	; 0x06
     62c:	0e 94 b5 02 	call	0x56a	; 0x56a <lcd_putc>
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
     630:	8c 81       	ldd	r24, Y+4	; 0x04
     632:	9d 81       	ldd	r25, Y+5	; 0x05
     634:	9b 83       	std	Y+3, r25	; 0x03
     636:	8a 83       	std	Y+2, r24	; 0x02
     638:	8c 81       	ldd	r24, Y+4	; 0x04
     63a:	9d 81       	ldd	r25, Y+5	; 0x05
     63c:	01 96       	adiw	r24, 0x01	; 1
     63e:	9d 83       	std	Y+5, r25	; 0x05
     640:	8c 83       	std	Y+4, r24	; 0x04
     642:	ea 81       	ldd	r30, Y+2	; 0x02
     644:	fb 81       	ldd	r31, Y+3	; 0x03
     646:	84 91       	lpm	r24, Z+
     648:	89 83       	std	Y+1, r24	; 0x01
     64a:	89 81       	ldd	r24, Y+1	; 0x01
     64c:	8e 83       	std	Y+6, r24	; 0x06
     64e:	8e 81       	ldd	r24, Y+6	; 0x06
     650:	88 23       	and	r24, r24
     652:	59 f7       	brne	.-42     	; 0x62a <lcd_puts_p+0x14>
        lcd_putc(c);
    }

}/* lcd_puts_p */
     654:	26 96       	adiw	r28, 0x06	; 6
     656:	0f b6       	in	r0, 0x3f	; 63
     658:	f8 94       	cli
     65a:	de bf       	out	0x3e, r29	; 62
     65c:	0f be       	out	0x3f, r0	; 63
     65e:	cd bf       	out	0x3d, r28	; 61
     660:	cf 91       	pop	r28
     662:	df 91       	pop	r29
     664:	08 95       	ret

00000666 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
     666:	df 93       	push	r29
     668:	cf 93       	push	r28
     66a:	0f 92       	push	r0
     66c:	cd b7       	in	r28, 0x3d	; 61
     66e:	de b7       	in	r29, 0x3e	; 62
     670:	89 83       	std	Y+1, r24	; 0x01
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
     672:	a1 e2       	ldi	r26, 0x21	; 33
     674:	b0 e0       	ldi	r27, 0x00	; 0
     676:	e1 e2       	ldi	r30, 0x21	; 33
     678:	f0 e0       	ldi	r31, 0x00	; 0
     67a:	80 81       	ld	r24, Z
     67c:	81 60       	ori	r24, 0x01	; 1
     67e:	8c 93       	st	X, r24
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
     680:	a1 e2       	ldi	r26, 0x21	; 33
     682:	b0 e0       	ldi	r27, 0x00	; 0
     684:	e1 e2       	ldi	r30, 0x21	; 33
     686:	f0 e0       	ldi	r31, 0x00	; 0
     688:	80 81       	ld	r24, Z
     68a:	82 60       	ori	r24, 0x02	; 2
     68c:	8c 93       	st	X, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
     68e:	a1 e2       	ldi	r26, 0x21	; 33
     690:	b0 e0       	ldi	r27, 0x00	; 0
     692:	e1 e2       	ldi	r30, 0x21	; 33
     694:	f0 e0       	ldi	r31, 0x00	; 0
     696:	80 81       	ld	r24, Z
     698:	84 60       	ori	r24, 0x04	; 4
     69a:	8c 93       	st	X, r24
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     69c:	a1 e2       	ldi	r26, 0x21	; 33
     69e:	b0 e0       	ldi	r27, 0x00	; 0
     6a0:	e1 e2       	ldi	r30, 0x21	; 33
     6a2:	f0 e0       	ldi	r31, 0x00	; 0
     6a4:	80 81       	ld	r24, Z
     6a6:	80 61       	ori	r24, 0x10	; 16
     6a8:	8c 93       	st	X, r24
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     6aa:	a1 e2       	ldi	r26, 0x21	; 33
     6ac:	b0 e0       	ldi	r27, 0x00	; 0
     6ae:	e1 e2       	ldi	r30, 0x21	; 33
     6b0:	f0 e0       	ldi	r31, 0x00	; 0
     6b2:	80 81       	ld	r24, Z
     6b4:	80 62       	ori	r24, 0x20	; 32
     6b6:	8c 93       	st	X, r24
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     6b8:	a1 e2       	ldi	r26, 0x21	; 33
     6ba:	b0 e0       	ldi	r27, 0x00	; 0
     6bc:	e1 e2       	ldi	r30, 0x21	; 33
     6be:	f0 e0       	ldi	r31, 0x00	; 0
     6c0:	80 81       	ld	r24, Z
     6c2:	80 64       	ori	r24, 0x40	; 64
     6c4:	8c 93       	st	X, r24
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     6c6:	a1 e2       	ldi	r26, 0x21	; 33
     6c8:	b0 e0       	ldi	r27, 0x00	; 0
     6ca:	e1 e2       	ldi	r30, 0x21	; 33
     6cc:	f0 e0       	ldi	r31, 0x00	; 0
     6ce:	80 81       	ld	r24, Z
     6d0:	80 68       	ori	r24, 0x80	; 128
     6d2:	8c 93       	st	X, r24
    }
    delay(16000);        /* wait 16ms or more after power-on       */
     6d4:	80 e8       	ldi	r24, 0x80	; 128
     6d6:	9e e3       	ldi	r25, 0x3E	; 62
     6d8:	0e 94 46 02 	call	0x48c	; 0x48c <_delayFourCycles>
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
     6dc:	a2 e2       	ldi	r26, 0x22	; 34
     6de:	b0 e0       	ldi	r27, 0x00	; 0
     6e0:	e2 e2       	ldi	r30, 0x22	; 34
     6e2:	f0 e0       	ldi	r31, 0x00	; 0
     6e4:	80 81       	ld	r24, Z
     6e6:	80 62       	ori	r24, 0x20	; 32
     6e8:	8c 93       	st	X, r24
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
     6ea:	a2 e2       	ldi	r26, 0x22	; 34
     6ec:	b0 e0       	ldi	r27, 0x00	; 0
     6ee:	e2 e2       	ldi	r30, 0x22	; 34
     6f0:	f0 e0       	ldi	r31, 0x00	; 0
     6f2:	80 81       	ld	r24, Z
     6f4:	80 61       	ori	r24, 0x10	; 16
     6f6:	8c 93       	st	X, r24
    lcd_e_toggle();
     6f8:	0e 94 5d 00 	call	0xba	; 0xba <toggle_e>
    delay(4992);         /* delay, busy flag can't be checked here */
     6fc:	80 e8       	ldi	r24, 0x80	; 128
     6fe:	93 e1       	ldi	r25, 0x13	; 19
     700:	0e 94 46 02 	call	0x48c	; 0x48c <_delayFourCycles>
   
    /* repeat last command */ 
    lcd_e_toggle();      
     704:	0e 94 5d 00 	call	0xba	; 0xba <toggle_e>
    delay(64);           /* delay, busy flag can't be checked here */
     708:	80 e4       	ldi	r24, 0x40	; 64
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	0e 94 46 02 	call	0x48c	; 0x48c <_delayFourCycles>
    
    /* repeat last command a third time */
    lcd_e_toggle();      
     710:	0e 94 5d 00 	call	0xba	; 0xba <toggle_e>
    delay(64);           /* delay, busy flag can't be checked here */
     714:	80 e4       	ldi	r24, 0x40	; 64
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	0e 94 46 02 	call	0x48c	; 0x48c <_delayFourCycles>

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
     71c:	a2 e2       	ldi	r26, 0x22	; 34
     71e:	b0 e0       	ldi	r27, 0x00	; 0
     720:	e2 e2       	ldi	r30, 0x22	; 34
     722:	f0 e0       	ldi	r31, 0x00	; 0
     724:	80 81       	ld	r24, Z
     726:	8f 7e       	andi	r24, 0xEF	; 239
     728:	8c 93       	st	X, r24
    lcd_e_toggle();
     72a:	0e 94 5d 00 	call	0xba	; 0xba <toggle_e>
    delay(64);           /* some displays need this additional delay */
     72e:	80 e4       	ldi	r24, 0x40	; 64
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	0e 94 46 02 	call	0x48c	; 0x48c <_delayFourCycles>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
     736:	88 e2       	ldi	r24, 0x28	; 40
     738:	0e 94 5e 02 	call	0x4bc	; 0x4bc <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
     73c:	88 e0       	ldi	r24, 0x08	; 8
     73e:	0e 94 5e 02 	call	0x4bc	; 0x4bc <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
     742:	0e 94 a1 02 	call	0x542	; 0x542 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
     746:	86 e0       	ldi	r24, 0x06	; 6
     748:	0e 94 5e 02 	call	0x4bc	; 0x4bc <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
     74c:	89 81       	ldd	r24, Y+1	; 0x01
     74e:	0e 94 5e 02 	call	0x4bc	; 0x4bc <lcd_command>

}/* lcd_init */
     752:	0f 90       	pop	r0
     754:	cf 91       	pop	r28
     756:	df 91       	pop	r29
     758:	08 95       	ret

0000075a <__vector_6>:
void displayLog(void);


// Port C Interrupt service Routine (ISR)
ISR (PCINT2_vect)
{
     75a:	1f 92       	push	r1
     75c:	0f 92       	push	r0
     75e:	0f b6       	in	r0, 0x3f	; 63
     760:	0f 92       	push	r0
     762:	11 24       	eor	r1, r1
     764:	2f 93       	push	r18
     766:	3f 93       	push	r19
     768:	4f 93       	push	r20
     76a:	5f 93       	push	r21
     76c:	6f 93       	push	r22
     76e:	7f 93       	push	r23
     770:	8f 93       	push	r24
     772:	9f 93       	push	r25
     774:	af 93       	push	r26
     776:	bf 93       	push	r27
     778:	ef 93       	push	r30
     77a:	ff 93       	push	r31
     77c:	df 93       	push	r29
     77e:	cf 93       	push	r28
     780:	cd b7       	in	r28, 0x3d	; 61
     782:	de b7       	in	r29, 0x3e	; 62
	//lcd_puts("I");
	//if(state==0)
		RTCgetTime();	//updates the time every 1 second
     784:	0e 94 09 06 	call	0xc12	; 0xc12 <RTCgetTime>

}
     788:	cf 91       	pop	r28
     78a:	df 91       	pop	r29
     78c:	ff 91       	pop	r31
     78e:	ef 91       	pop	r30
     790:	bf 91       	pop	r27
     792:	af 91       	pop	r26
     794:	9f 91       	pop	r25
     796:	8f 91       	pop	r24
     798:	7f 91       	pop	r23
     79a:	6f 91       	pop	r22
     79c:	5f 91       	pop	r21
     79e:	4f 91       	pop	r20
     7a0:	3f 91       	pop	r19
     7a2:	2f 91       	pop	r18
     7a4:	0f 90       	pop	r0
     7a6:	0f be       	out	0x3f, r0	; 63
     7a8:	0f 90       	pop	r0
     7aa:	1f 90       	pop	r1
     7ac:	18 95       	reti

000007ae <__vector_5>:

// Port B Interrupt service Routine (ISR)
ISR (PCINT1_vect)
{
     7ae:	1f 92       	push	r1
     7b0:	0f 92       	push	r0
     7b2:	0f b6       	in	r0, 0x3f	; 63
     7b4:	0f 92       	push	r0
     7b6:	11 24       	eor	r1, r1
     7b8:	2f 93       	push	r18
     7ba:	3f 93       	push	r19
     7bc:	4f 93       	push	r20
     7be:	5f 93       	push	r21
     7c0:	6f 93       	push	r22
     7c2:	7f 93       	push	r23
     7c4:	8f 93       	push	r24
     7c6:	9f 93       	push	r25
     7c8:	af 93       	push	r26
     7ca:	bf 93       	push	r27
     7cc:	ef 93       	push	r30
     7ce:	ff 93       	push	r31
     7d0:	df 93       	push	r29
     7d2:	cf 93       	push	r28
     7d4:	cd b7       	in	r28, 0x3d	; 61
     7d6:	de b7       	in	r29, 0x3e	; 62
    if(~PINB & 0b00000001){
     7d8:	e3 e2       	ldi	r30, 0x23	; 35
     7da:	f0 e0       	ldi	r31, 0x00	; 0
     7dc:	80 81       	ld	r24, Z
     7de:	88 2f       	mov	r24, r24
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	81 70       	andi	r24, 0x01	; 1
     7e4:	90 70       	andi	r25, 0x00	; 0
     7e6:	00 97       	sbiw	r24, 0x00	; 0
     7e8:	61 f4       	brne	.+24     	; 0x802 <__vector_5+0x54>

        if (state == 0){			// If button0 is pressed
     7ea:	80 91 24 01 	lds	r24, 0x0124
     7ee:	90 91 25 01 	lds	r25, 0x0125
     7f2:	00 97       	sbiw	r24, 0x00	; 0
     7f4:	31 f4       	brne	.+12     	; 0x802 <__vector_5+0x54>
            state = 1;			// Go to state 1
     7f6:	81 e0       	ldi	r24, 0x01	; 1
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	90 93 25 01 	sts	0x0125, r25
     7fe:	80 93 24 01 	sts	0x0124, r24
        }
    }
    if(~PINB & 0b00000010){
     802:	e3 e2       	ldi	r30, 0x23	; 35
     804:	f0 e0       	ldi	r31, 0x00	; 0
     806:	80 81       	ld	r24, Z
     808:	88 2f       	mov	r24, r24
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	82 70       	andi	r24, 0x02	; 2
     80e:	90 70       	andi	r25, 0x00	; 0
     810:	00 97       	sbiw	r24, 0x00	; 0
     812:	59 f4       	brne	.+22     	; 0x82a <__vector_5+0x7c>

        if (state == 3){
     814:	80 91 24 01 	lds	r24, 0x0124
     818:	90 91 25 01 	lds	r25, 0x0125
     81c:	83 30       	cpi	r24, 0x03	; 3
     81e:	91 05       	cpc	r25, r1
     820:	21 f4       	brne	.+8      	; 0x82a <__vector_5+0x7c>
            state = 0;
     822:	10 92 25 01 	sts	0x0125, r1
     826:	10 92 24 01 	sts	0x0124, r1
        }
    }
    if(~PINB & 0b00000100){
     82a:	e3 e2       	ldi	r30, 0x23	; 35
     82c:	f0 e0       	ldi	r31, 0x00	; 0
     82e:	80 81       	ld	r24, Z
     830:	88 2f       	mov	r24, r24
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	84 70       	andi	r24, 0x04	; 4
     836:	90 70       	andi	r25, 0x00	; 0
     838:	00 97       	sbiw	r24, 0x00	; 0
     83a:	b9 f4       	brne	.+46     	; 0x86a <__vector_5+0xbc>

	    if (state == 4){
     83c:	80 91 24 01 	lds	r24, 0x0124
     840:	90 91 25 01 	lds	r25, 0x0125
     844:	84 30       	cpi	r24, 0x04	; 4
     846:	91 05       	cpc	r25, r1
     848:	81 f4       	brne	.+32     	; 0x86a <__vector_5+0xbc>
		    currentSeconds = (currentSeconds + 1) % 60;         // Increase Seconds
     84a:	80 91 2a 01 	lds	r24, 0x012A
     84e:	90 91 2b 01 	lds	r25, 0x012B
     852:	01 96       	adiw	r24, 0x01	; 1
     854:	2c e3       	ldi	r18, 0x3C	; 60
     856:	30 e0       	ldi	r19, 0x00	; 0
     858:	b9 01       	movw	r22, r18
     85a:	0e 94 09 0b 	call	0x1612	; 0x1612 <__udivmodhi4>
     85e:	90 93 2b 01 	sts	0x012B, r25
     862:	80 93 2a 01 	sts	0x012A, r24
		    showTime();
     866:	0e 94 53 07 	call	0xea6	; 0xea6 <showTime>
    	}
    }
    if(~PINB & 0b00001000){
     86a:	e3 e2       	ldi	r30, 0x23	; 35
     86c:	f0 e0       	ldi	r31, 0x00	; 0
     86e:	80 81       	ld	r24, Z
     870:	88 2f       	mov	r24, r24
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	88 70       	andi	r24, 0x08	; 8
     876:	90 70       	andi	r25, 0x00	; 0
     878:	00 97       	sbiw	r24, 0x00	; 0
     87a:	b9 f4       	brne	.+46     	; 0x8aa <__vector_5+0xfc>

	    if (state == 4){
     87c:	80 91 24 01 	lds	r24, 0x0124
     880:	90 91 25 01 	lds	r25, 0x0125
     884:	84 30       	cpi	r24, 0x04	; 4
     886:	91 05       	cpc	r25, r1
     888:	81 f4       	brne	.+32     	; 0x8aa <__vector_5+0xfc>
	    	currentMinutes =(currentMinutes + 1) % 60;         // Increase Minutes
     88a:	80 91 22 01 	lds	r24, 0x0122
     88e:	90 91 23 01 	lds	r25, 0x0123
     892:	01 96       	adiw	r24, 0x01	; 1
     894:	2c e3       	ldi	r18, 0x3C	; 60
     896:	30 e0       	ldi	r19, 0x00	; 0
     898:	b9 01       	movw	r22, r18
     89a:	0e 94 09 0b 	call	0x1612	; 0x1612 <__udivmodhi4>
     89e:	90 93 23 01 	sts	0x0123, r25
     8a2:	80 93 22 01 	sts	0x0122, r24
	    	showTime();
     8a6:	0e 94 53 07 	call	0xea6	; 0xea6 <showTime>
	    }
    }
    if(~PINB & 0b00010000){
     8aa:	e3 e2       	ldi	r30, 0x23	; 35
     8ac:	f0 e0       	ldi	r31, 0x00	; 0
     8ae:	80 81       	ld	r24, Z
     8b0:	88 2f       	mov	r24, r24
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	80 71       	andi	r24, 0x10	; 16
     8b6:	90 70       	andi	r25, 0x00	; 0
     8b8:	00 97       	sbiw	r24, 0x00	; 0
     8ba:	b9 f4       	brne	.+46     	; 0x8ea <__vector_5+0x13c>

	    if (state == 4){
     8bc:	80 91 24 01 	lds	r24, 0x0124
     8c0:	90 91 25 01 	lds	r25, 0x0125
     8c4:	84 30       	cpi	r24, 0x04	; 4
     8c6:	91 05       	cpc	r25, r1
     8c8:	81 f4       	brne	.+32     	; 0x8ea <__vector_5+0x13c>
	    	currentHours = (currentHours + 1) % 24;           // Increase Hours
     8ca:	80 91 2e 01 	lds	r24, 0x012E
     8ce:	90 91 2f 01 	lds	r25, 0x012F
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	28 e1       	ldi	r18, 0x18	; 24
     8d6:	30 e0       	ldi	r19, 0x00	; 0
     8d8:	b9 01       	movw	r22, r18
     8da:	0e 94 09 0b 	call	0x1612	; 0x1612 <__udivmodhi4>
     8de:	90 93 2f 01 	sts	0x012F, r25
     8e2:	80 93 2e 01 	sts	0x012E, r24
	    	showTime();
     8e6:	0e 94 53 07 	call	0xea6	; 0xea6 <showTime>
	    }
    }
    if(~PINB & 0b00100000){			            // If Button5 is pressed
     8ea:	e3 e2       	ldi	r30, 0x23	; 35
     8ec:	f0 e0       	ldi	r31, 0x00	; 0
     8ee:	80 81       	ld	r24, Z
     8f0:	88 2f       	mov	r24, r24
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	80 72       	andi	r24, 0x20	; 32
     8f6:	90 70       	andi	r25, 0x00	; 0
     8f8:	00 97       	sbiw	r24, 0x00	; 0
     8fa:	31 f5       	brne	.+76     	; 0x948 <__stack+0x49>

    	if (state == 0){
     8fc:	80 91 24 01 	lds	r24, 0x0124
     900:	90 91 25 01 	lds	r25, 0x0125
     904:	00 97       	sbiw	r24, 0x00	; 0
     906:	31 f4       	brne	.+12     	; 0x914 <__stack+0x15>
		    state = 4;
     908:	84 e0       	ldi	r24, 0x04	; 4
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	90 93 25 01 	sts	0x0125, r25
     910:	80 93 24 01 	sts	0x0124, r24
	    }
	    if (state == 4){
     914:	80 91 24 01 	lds	r24, 0x0124
     918:	90 91 25 01 	lds	r25, 0x0125
     91c:	84 30       	cpi	r24, 0x04	; 4
     91e:	91 05       	cpc	r25, r1
     920:	99 f4       	brne	.+38     	; 0x948 <__stack+0x49>

            RTCsetTime(currentSeconds,currentMinutes,currentHours);
     922:	80 91 2a 01 	lds	r24, 0x012A
     926:	90 91 2b 01 	lds	r25, 0x012B
     92a:	20 91 22 01 	lds	r18, 0x0122
     92e:	30 91 23 01 	lds	r19, 0x0123
     932:	40 91 2e 01 	lds	r20, 0x012E
     936:	50 91 2f 01 	lds	r21, 0x012F
     93a:	b9 01       	movw	r22, r18
     93c:	0e 94 0a 07 	call	0xe14	; 0xe14 <RTCsetTime>
		    state = 0;
     940:	10 92 25 01 	sts	0x0125, r1
     944:	10 92 24 01 	sts	0x0124, r1
	    }
    }
    if(~PINB & 0b01000000){			// If Button6 is pressed
     948:	e3 e2       	ldi	r30, 0x23	; 35
     94a:	f0 e0       	ldi	r31, 0x00	; 0
     94c:	80 81       	ld	r24, Z
     94e:	88 2f       	mov	r24, r24
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	80 74       	andi	r24, 0x40	; 64
     954:	90 70       	andi	r25, 0x00	; 0
     956:	00 97       	sbiw	r24, 0x00	; 0
     958:	61 f4       	brne	.+24     	; 0x972 <__stack+0x73>

    	if (state == 0){
     95a:	80 91 24 01 	lds	r24, 0x0124
     95e:	90 91 25 01 	lds	r25, 0x0125
     962:	00 97       	sbiw	r24, 0x00	; 0
     964:	31 f4       	brne	.+12     	; 0x972 <__stack+0x73>
	        state = 3;
     966:	83 e0       	ldi	r24, 0x03	; 3
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	90 93 25 01 	sts	0x0125, r25
     96e:	80 93 24 01 	sts	0x0124, r24
	    }
    }
    if(~PINB & 0b10000000){			// If Button7 is pressed
     972:	e3 e2       	ldi	r30, 0x23	; 35
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	80 81       	ld	r24, Z
     978:	88 23       	and	r24, r24
     97a:	64 f0       	brlt	.+24     	; 0x994 <__stack+0x95>

    	if (state == 0){
     97c:	80 91 24 01 	lds	r24, 0x0124
     980:	90 91 25 01 	lds	r25, 0x0125
     984:	00 97       	sbiw	r24, 0x00	; 0
     986:	31 f4       	brne	.+12     	; 0x994 <__stack+0x95>
		    state = 2;
     988:	82 e0       	ldi	r24, 0x02	; 2
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	90 93 25 01 	sts	0x0125, r25
     990:	80 93 24 01 	sts	0x0124, r24
	    }
    }
    return;
}
     994:	cf 91       	pop	r28
     996:	df 91       	pop	r29
     998:	ff 91       	pop	r31
     99a:	ef 91       	pop	r30
     99c:	bf 91       	pop	r27
     99e:	af 91       	pop	r26
     9a0:	9f 91       	pop	r25
     9a2:	8f 91       	pop	r24
     9a4:	7f 91       	pop	r23
     9a6:	6f 91       	pop	r22
     9a8:	5f 91       	pop	r21
     9aa:	4f 91       	pop	r20
     9ac:	3f 91       	pop	r19
     9ae:	2f 91       	pop	r18
     9b0:	0f 90       	pop	r0
     9b2:	0f be       	out	0x3f, r0	; 63
     9b4:	0f 90       	pop	r0
     9b6:	1f 90       	pop	r1
     9b8:	18 95       	reti

000009ba <main>:

//entry point and task scheduler loop
int main(void)
{
     9ba:	df 93       	push	r29
     9bc:	cf 93       	push	r28
     9be:	00 d0       	rcall	.+0      	; 0x9c0 <main+0x6>
     9c0:	00 d0       	rcall	.+0      	; 0x9c2 <main+0x8>
     9c2:	cd b7       	in	r28, 0x3d	; 61
     9c4:	de b7       	in	r29, 0x3e	; 62
    initialize();					// Initialize to starting state
     9c6:	0e 94 33 05 	call	0xa66	; 0xa66 <initialize>
    while (1){
	    switch(state){
     9ca:	80 91 24 01 	lds	r24, 0x0124
     9ce:	90 91 25 01 	lds	r25, 0x0125
     9d2:	9c 83       	std	Y+4, r25	; 0x04
     9d4:	8b 83       	std	Y+3, r24	; 0x03
     9d6:	8b 81       	ldd	r24, Y+3	; 0x03
     9d8:	9c 81       	ldd	r25, Y+4	; 0x04
     9da:	82 30       	cpi	r24, 0x02	; 2
     9dc:	91 05       	cpc	r25, r1
     9de:	41 f1       	breq	.+80     	; 0xa30 <main+0x76>
     9e0:	8b 81       	ldd	r24, Y+3	; 0x03
     9e2:	9c 81       	ldd	r25, Y+4	; 0x04
     9e4:	83 30       	cpi	r24, 0x03	; 3
     9e6:	91 05       	cpc	r25, r1
     9e8:	50 f4       	brcc	.+20     	; 0x9fe <main+0x44>
     9ea:	8b 81       	ldd	r24, Y+3	; 0x03
     9ec:	9c 81       	ldd	r25, Y+4	; 0x04
     9ee:	00 97       	sbiw	r24, 0x00	; 0
     9f0:	89 f0       	breq	.+34     	; 0xa14 <main+0x5a>
     9f2:	8b 81       	ldd	r24, Y+3	; 0x03
     9f4:	9c 81       	ldd	r25, Y+4	; 0x04
     9f6:	81 30       	cpi	r24, 0x01	; 1
     9f8:	91 05       	cpc	r25, r1
     9fa:	79 f0       	breq	.+30     	; 0xa1a <main+0x60>
     9fc:	e6 cf       	rjmp	.-52     	; 0x9ca <main+0x10>
     9fe:	8b 81       	ldd	r24, Y+3	; 0x03
     a00:	9c 81       	ldd	r25, Y+4	; 0x04
     a02:	83 30       	cpi	r24, 0x03	; 3
     a04:	91 05       	cpc	r25, r1
     a06:	f1 f0       	breq	.+60     	; 0xa44 <main+0x8a>
     a08:	8b 81       	ldd	r24, Y+3	; 0x03
     a0a:	9c 81       	ldd	r25, Y+4	; 0x04
     a0c:	84 30       	cpi	r24, 0x04	; 4
     a0e:	91 05       	cpc	r25, r1
     a10:	19 f1       	breq	.+70     	; 0xa58 <main+0x9e>
     a12:	db cf       	rjmp	.-74     	; 0x9ca <main+0x10>
		  case 0:

	 		    showTime();
     a14:	0e 94 53 07 	call	0xea6	; 0xea6 <showTime>
     a18:	d8 cf       	rjmp	.-80     	; 0x9ca <main+0x10>
			    break;
		    case 1:
		    	lcd_puts("1");
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	91 e0       	ldi	r25, 0x01	; 1
     a1e:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <lcd_puts>
			    saveToLog();
     a22:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <saveToLog>
			    state = 0;
     a26:	10 92 25 01 	sts	0x0125, r1
     a2a:	10 92 24 01 	sts	0x0124, r1
     a2e:	cd cf       	rjmp	.-102    	; 0x9ca <main+0x10>
			    break;
		    case 2:
		    	lcd_puts("2");
     a30:	82 e0       	ldi	r24, 0x02	; 2
     a32:	91 e0       	ldi	r25, 0x01	; 1
     a34:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <lcd_puts>
		  	    showDate();
     a38:	0e 94 b2 07 	call	0xf64	; 0xf64 <showDate>
			    if (!~PINB & 0b10000000)
     a3c:	e3 e2       	ldi	r30, 0x23	; 35
     a3e:	f0 e0       	ldi	r31, 0x00	; 0
     a40:	90 81       	ld	r25, Z
     a42:	c3 cf       	rjmp	.-122    	; 0x9ca <main+0x10>
				state = 0;
			    break;
	  	    case 3:
	  	    	lcd_puts("3");
     a44:	84 e0       	ldi	r24, 0x04	; 4
     a46:	91 e0       	ldi	r25, 0x01	; 1
     a48:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <lcd_puts>
	  		    displayLog();
     a4c:	0e 94 38 09 	call	0x1270	; 0x1270 <displayLog>
			    if (!~PINB & 0b01000000)
     a50:	e3 e2       	ldi	r30, 0x23	; 35
     a52:	f0 e0       	ldi	r31, 0x00	; 0
     a54:	80 81       	ld	r24, Z
     a56:	b9 cf       	rjmp	.-142    	; 0x9ca <main+0x10>
				state = 0;
		  	    break;
		    case 4:
		    	lcd_puts("4");
     a58:	86 e0       	ldi	r24, 0x06	; 6
     a5a:	91 e0       	ldi	r25, 0x01	; 1
     a5c:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <lcd_puts>
                showTime();
     a60:	0e 94 53 07 	call	0xea6	; 0xea6 <showTime>
     a64:	b2 cf       	rjmp	.-156    	; 0x9ca <main+0x10>

00000a66 <initialize>:
//initialize()
//
// Sets up the initial conditions of the ports, timers, and interrupts.
// this function is also called to reset the program.
void initialize(void)
{
     a66:	df 93       	push	r29
     a68:	cf 93       	push	r28
     a6a:	cd b7       	in	r28, 0x3d	; 61
     a6c:	de b7       	in	r29, 0x3e	; 62
	state = 0;
     a6e:	10 92 25 01 	sts	0x0125, r1
     a72:	10 92 24 01 	sts	0x0124, r1

	//set up the ports
	DDRC=0x00;					// PORTC is input
     a76:	e7 e2       	ldi	r30, 0x27	; 39
     a78:	f0 e0       	ldi	r31, 0x00	; 0
     a7a:	10 82       	st	Z, r1
	DDRB=0x00; 					// PORTB is input
     a7c:	e4 e2       	ldi	r30, 0x24	; 36
     a7e:	f0 e0       	ldi	r31, 0x00	; 0
     a80:	10 82       	st	Z, r1

	lcd_init(LCD_DISP_ON);			// Turn on Display
     a82:	8c e0       	ldi	r24, 0x0C	; 12
     a84:	0e 94 33 03 	call	0x666	; 0x666 <lcd_init>
	lcd_clrscr();					// Clear Screen
     a88:	0e 94 a1 02 	call	0x542	; 0x542 <lcd_clrscr>
	i2c_init ();
     a8c:	0e 94 07 0a 	call	0x140e	; 0x140e <i2c_init>

	*Day =   0b00000010;		// Contains the current Day
     a90:	e0 91 28 01 	lds	r30, 0x0128
     a94:	f0 91 29 01 	lds	r31, 0x0129
     a98:	82 e0       	ldi	r24, 0x02	; 2
     a9a:	80 83       	st	Z, r24
	*Month = 0b00010001;		// Contains the current Month
     a9c:	e0 91 30 01 	lds	r30, 0x0130
     aa0:	f0 91 31 01 	lds	r31, 0x0131
     aa4:	81 e1       	ldi	r24, 0x11	; 17
     aa6:	80 83       	st	Z, r24
	*Year =  0b00010001;		// Contains the current Year
     aa8:	e0 91 2c 01 	lds	r30, 0x012C
     aac:	f0 91 2d 01 	lds	r31, 0x012D
     ab0:	81 e1       	ldi	r24, 0x11	; 17
     ab2:	80 83       	st	Z, r24
	addressCounter = 0;		// initalizes the address counter
     ab4:	10 92 37 01 	sts	0x0137, r1
     ab8:	10 92 36 01 	sts	0x0136, r1

	currentSeconds = 3;
     abc:	83 e0       	ldi	r24, 0x03	; 3
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	90 93 2b 01 	sts	0x012B, r25
     ac4:	80 93 2a 01 	sts	0x012A, r24

	//crank up the ISRs
	PCICR  =0b00000110;					// Enable Pin Change interrupt on Port C and Port B for CLKOUT and Switches respectively
     ac8:	e8 e6       	ldi	r30, 0x68	; 104
     aca:	f0 e0       	ldi	r31, 0x00	; 0
     acc:	86 e0       	ldi	r24, 0x06	; 6
     ace:	80 83       	st	Z, r24
	PCMSK2 =0b00000100;					// Enable Pin Change interrupt on PIN2 on Port C for CLKOUT
     ad0:	ed e6       	ldi	r30, 0x6D	; 109
     ad2:	f0 e0       	ldi	r31, 0x00	; 0
     ad4:	84 e0       	ldi	r24, 0x04	; 4
     ad6:	80 83       	st	Z, r24
	PCMSK1 =0b11111111;                  //Enable Pin Change interrupt on on PINS1-7 for switches
     ad8:	ec e6       	ldi	r30, 0x6C	; 108
     ada:	f0 e0       	ldi	r31, 0x00	; 0
     adc:	8f ef       	ldi	r24, 0xFF	; 255
     ade:	80 83       	st	Z, r24
	SREG   =0b10000011;
     ae0:	ef e5       	ldi	r30, 0x5F	; 95
     ae2:	f0 e0       	ldi	r31, 0x00	; 0
     ae4:	83 e8       	ldi	r24, 0x83	; 131
     ae6:	80 83       	st	Z, r24
	sei();
     ae8:	78 94       	sei

	i2c_start(PCF8653_BUS_ADDRESS+I2C_WRITE); // set RTC bus address and write mode
     aea:	82 ea       	ldi	r24, 0xA2	; 162
     aec:	0e 94 15 0a 	call	0x142a	; 0x142a <i2c_start>
	i2c_write(0x0D);// CLKOUT control register address
     af0:	8d e0       	ldi	r24, 0x0D	; 13
     af2:	0e 94 bc 0a 	call	0x1578	; 0x1578 <i2c_write>
	i2c_write(0b10000011);// sets the CLKOUT to 1khz
     af6:	83 e8       	ldi	r24, 0x83	; 131
     af8:	0e 94 bc 0a 	call	0x1578	; 0x1578 <i2c_write>
	i2c_stop();
     afc:	0e 94 a8 0a 	call	0x1550	; 0x1550 <i2c_stop>

	*Hours=   0b00000100;
     b00:	e0 91 20 01 	lds	r30, 0x0120
     b04:	f0 91 21 01 	lds	r31, 0x0121
     b08:	84 e0       	ldi	r24, 0x04	; 4
     b0a:	80 83       	st	Z, r24
	*Minutes= 0b00010100;
     b0c:	e0 91 32 01 	lds	r30, 0x0132
     b10:	f0 91 33 01 	lds	r31, 0x0133
     b14:	84 e1       	ldi	r24, 0x14	; 20
     b16:	80 83       	st	Z, r24
	*Seconds= 0b00010100;
     b18:	e0 91 34 01 	lds	r30, 0x0134
     b1c:	f0 91 35 01 	lds	r31, 0x0135
     b20:	84 e1       	ldi	r24, 0x14	; 20
     b22:	80 83       	st	Z, r24

}
     b24:	cf 91       	pop	r28
     b26:	df 91       	pop	r29
     b28:	08 95       	ret

00000b2a <AT24C64_byte_read>:



/* read a byte from the 24C64 EEPROM */
unsigned char AT24C64_byte_read(unsigned int address,unsigned char *data)
{
     b2a:	df 93       	push	r29
     b2c:	cf 93       	push	r28
     b2e:	00 d0       	rcall	.+0      	; 0xb30 <AT24C64_byte_read+0x6>
     b30:	00 d0       	rcall	.+0      	; 0xb32 <AT24C64_byte_read+0x8>
     b32:	0f 92       	push	r0
     b34:	cd b7       	in	r28, 0x3d	; 61
     b36:	de b7       	in	r29, 0x3e	; 62
     b38:	9a 83       	std	Y+2, r25	; 0x02
     b3a:	89 83       	std	Y+1, r24	; 0x01
     b3c:	7c 83       	std	Y+4, r23	; 0x04
     b3e:	6b 83       	std	Y+3, r22	; 0x03
	if(i2c_start(AT24C64_BUS_ADDRESS+I2C_WRITE)) // set device address and write mode
     b40:	80 ea       	ldi	r24, 0xA0	; 160
     b42:	0e 94 15 0a 	call	0x142a	; 0x142a <i2c_start>
     b46:	88 23       	and	r24, r24
     b48:	19 f0       	breq	.+6      	; 0xb50 <AT24C64_byte_read+0x26>
		return 1; // no ack from the 24C64
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	8d 83       	std	Y+5, r24	; 0x05
     b4e:	1e c0       	rjmp	.+60     	; 0xb8c <AT24C64_byte_read+0x62>
	if(i2c_write(address>>8)) // send the higher 8 bits of the address in the 24C64
     b50:	89 81       	ldd	r24, Y+1	; 0x01
     b52:	9a 81       	ldd	r25, Y+2	; 0x02
     b54:	89 2f       	mov	r24, r25
     b56:	99 27       	eor	r25, r25
     b58:	0e 94 bc 0a 	call	0x1578	; 0x1578 <i2c_write>
     b5c:	88 23       	and	r24, r24
     b5e:	19 f0       	breq	.+6      	; 0xb66 <AT24C64_byte_read+0x3c>
		return 1; // no ack from the 24C64
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	8d 83       	std	Y+5, r24	; 0x05
     b64:	13 c0       	rjmp	.+38     	; 0xb8c <AT24C64_byte_read+0x62>
	if(i2c_write(address&0x00FF)) // send the lower 8 bits of the address in the 24C64
     b66:	89 81       	ldd	r24, Y+1	; 0x01
     b68:	0e 94 bc 0a 	call	0x1578	; 0x1578 <i2c_write>
     b6c:	88 23       	and	r24, r24
     b6e:	19 f0       	breq	.+6      	; 0xb76 <AT24C64_byte_read+0x4c>
		return 1; // no ack from the 24C64
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	8d 83       	std	Y+5, r24	; 0x05
     b74:	0b c0       	rjmp	.+22     	; 0xb8c <AT24C64_byte_read+0x62>
	i2c_start(AT24C64_BUS_ADDRESS+I2C_READ); // set device address and read mode
     b76:	81 ea       	ldi	r24, 0xA1	; 161
     b78:	0e 94 15 0a 	call	0x142a	; 0x142a <i2c_start>
		*data=i2c_readNak(); // read and expect no ack from the MCU
     b7c:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <i2c_readNak>
     b80:	eb 81       	ldd	r30, Y+3	; 0x03
     b82:	fc 81       	ldd	r31, Y+4	; 0x04
     b84:	80 83       	st	Z, r24
	i2c_stop();
     b86:	0e 94 a8 0a 	call	0x1550	; 0x1550 <i2c_stop>

	return 0; /* successful read */
     b8a:	1d 82       	std	Y+5, r1	; 0x05
     b8c:	8d 81       	ldd	r24, Y+5	; 0x05
}
     b8e:	0f 90       	pop	r0
     b90:	0f 90       	pop	r0
     b92:	0f 90       	pop	r0
     b94:	0f 90       	pop	r0
     b96:	0f 90       	pop	r0
     b98:	cf 91       	pop	r28
     b9a:	df 91       	pop	r29
     b9c:	08 95       	ret

00000b9e <AT24C64_byte_write>:

/* write a byte to the EEPROM */
unsigned char AT24C64_byte_write(unsigned int address, unsigned char data)
{
     b9e:	df 93       	push	r29
     ba0:	cf 93       	push	r28
     ba2:	00 d0       	rcall	.+0      	; 0xba4 <AT24C64_byte_write+0x6>
     ba4:	00 d0       	rcall	.+0      	; 0xba6 <AT24C64_byte_write+0x8>
     ba6:	cd b7       	in	r28, 0x3d	; 61
     ba8:	de b7       	in	r29, 0x3e	; 62
     baa:	9a 83       	std	Y+2, r25	; 0x02
     bac:	89 83       	std	Y+1, r24	; 0x01
     bae:	6b 83       	std	Y+3, r22	; 0x03
	if(i2c_start(AT24C64_BUS_ADDRESS+I2C_WRITE)) // set device address and write mode
     bb0:	80 ea       	ldi	r24, 0xA0	; 160
     bb2:	0e 94 15 0a 	call	0x142a	; 0x142a <i2c_start>
     bb6:	88 23       	and	r24, r24
     bb8:	19 f0       	breq	.+6      	; 0xbc0 <AT24C64_byte_write+0x22>
		return 1; // no ack from the 24C64
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	8c 83       	std	Y+4, r24	; 0x04
     bbe:	21 c0       	rjmp	.+66     	; 0xc02 <AT24C64_byte_write+0x64>
	if(i2c_write(address>>8)) // send the higher 8 bits of the address in the 24C64
     bc0:	89 81       	ldd	r24, Y+1	; 0x01
     bc2:	9a 81       	ldd	r25, Y+2	; 0x02
     bc4:	89 2f       	mov	r24, r25
     bc6:	99 27       	eor	r25, r25
     bc8:	0e 94 bc 0a 	call	0x1578	; 0x1578 <i2c_write>
     bcc:	88 23       	and	r24, r24
     bce:	19 f0       	breq	.+6      	; 0xbd6 <AT24C64_byte_write+0x38>
		return 1; // no ack from the 24C64
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	8c 83       	std	Y+4, r24	; 0x04
     bd4:	16 c0       	rjmp	.+44     	; 0xc02 <AT24C64_byte_write+0x64>
	if(i2c_write(address&0x00FF)) // send the lower 8 bits of the address in the 24C64
     bd6:	89 81       	ldd	r24, Y+1	; 0x01
     bd8:	0e 94 bc 0a 	call	0x1578	; 0x1578 <i2c_write>
     bdc:	88 23       	and	r24, r24
     bde:	19 f0       	breq	.+6      	; 0xbe6 <AT24C64_byte_write+0x48>
		return 1; // no ack from the 24C64
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	8c 83       	std	Y+4, r24	; 0x04
     be4:	0e c0       	rjmp	.+28     	; 0xc02 <AT24C64_byte_write+0x64>
	if(i2c_write(data))
     be6:	8b 81       	ldd	r24, Y+3	; 0x03
     be8:	0e 94 bc 0a 	call	0x1578	; 0x1578 <i2c_write>
     bec:	88 23       	and	r24, r24
     bee:	19 f0       	breq	.+6      	; 0xbf6 <AT24C64_byte_write+0x58>
		return 1; // no ack from the 24C64
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	8c 83       	std	Y+4, r24	; 0x04
     bf4:	06 c0       	rjmp	.+12     	; 0xc02 <AT24C64_byte_write+0x64>
	i2c_stop();
     bf6:	0e 94 a8 0a 	call	0x1550	; 0x1550 <i2c_stop>
	i2c_start_wait(AT24C64_BUS_ADDRESS+I2C_WRITE); // acknowledge polling (see p.9 in AT24C64's datasheet)
     bfa:	80 ea       	ldi	r24, 0xA0	; 160
     bfc:	0e 94 56 0a 	call	0x14ac	; 0x14ac <i2c_start_wait>

  return 0; /* successful write */
     c00:	1c 82       	std	Y+4, r1	; 0x04
     c02:	8c 81       	ldd	r24, Y+4	; 0x04
}
     c04:	0f 90       	pop	r0
     c06:	0f 90       	pop	r0
     c08:	0f 90       	pop	r0
     c0a:	0f 90       	pop	r0
     c0c:	cf 91       	pop	r28
     c0e:	df 91       	pop	r29
     c10:	08 95       	ret

00000c12 <RTCgetTime>:


/* read a byte from the rtc */
void RTCgetTime()
{
     c12:	0f 93       	push	r16
     c14:	1f 93       	push	r17
     c16:	df 93       	push	r29
     c18:	cf 93       	push	r28
     c1a:	0f 92       	push	r0
     c1c:	cd b7       	in	r28, 0x3d	; 61
     c1e:	de b7       	in	r29, 0x3e	; 62
	volatile unsigned char temp;
	i2c_start(PCF8653_BUS_ADDRESS+I2C_WRITE); // set device address and write mode
     c20:	82 ea       	ldi	r24, 0xA2	; 162
     c22:	0e 94 15 0a 	call	0x142a	; 0x142a <i2c_start>
	i2c_write(0x02);// Seconds register address
     c26:	82 e0       	ldi	r24, 0x02	; 2
     c28:	0e 94 bc 0a 	call	0x1578	; 0x1578 <i2c_write>
	i2c_stop();
     c2c:	0e 94 a8 0a 	call	0x1550	; 0x1550 <i2c_stop>
	i2c_start(PCF8653_BUS_ADDRESS+I2C_READ);
     c30:	83 ea       	ldi	r24, 0xA3	; 163
     c32:	0e 94 15 0a 	call	0x142a	; 0x142a <i2c_start>
	*Seconds = i2c_readNak();
     c36:	00 91 34 01 	lds	r16, 0x0134
     c3a:	10 91 35 01 	lds	r17, 0x0135
     c3e:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <i2c_readNak>
     c42:	f8 01       	movw	r30, r16
     c44:	80 83       	st	Z, r24
	i2c_stop();
     c46:	0e 94 a8 0a 	call	0x1550	; 0x1550 <i2c_stop>

	i2c_start(PCF8653_BUS_ADDRESS+I2C_WRITE); // set device address and write mode
     c4a:	82 ea       	ldi	r24, 0xA2	; 162
     c4c:	0e 94 15 0a 	call	0x142a	; 0x142a <i2c_start>
	i2c_write(0x03);// Minutes register address
     c50:	83 e0       	ldi	r24, 0x03	; 3
     c52:	0e 94 bc 0a 	call	0x1578	; 0x1578 <i2c_write>
	i2c_stop();
     c56:	0e 94 a8 0a 	call	0x1550	; 0x1550 <i2c_stop>
	i2c_start(PCF8653_BUS_ADDRESS+I2C_READ);
     c5a:	83 ea       	ldi	r24, 0xA3	; 163
     c5c:	0e 94 15 0a 	call	0x142a	; 0x142a <i2c_start>
	*Minutes= i2c_readNak();
     c60:	00 91 32 01 	lds	r16, 0x0132
     c64:	10 91 33 01 	lds	r17, 0x0133
     c68:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <i2c_readNak>
     c6c:	f8 01       	movw	r30, r16
     c6e:	80 83       	st	Z, r24
	i2c_stop();
     c70:	0e 94 a8 0a 	call	0x1550	; 0x1550 <i2c_stop>

	i2c_start(PCF8653_BUS_ADDRESS+I2C_WRITE); // set device address and write mode
     c74:	82 ea       	ldi	r24, 0xA2	; 162
     c76:	0e 94 15 0a 	call	0x142a	; 0x142a <i2c_start>
	i2c_write(0x04);// Hours register address
     c7a:	84 e0       	ldi	r24, 0x04	; 4
     c7c:	0e 94 bc 0a 	call	0x1578	; 0x1578 <i2c_write>
	i2c_stop();
     c80:	0e 94 a8 0a 	call	0x1550	; 0x1550 <i2c_stop>
	i2c_start(PCF8653_BUS_ADDRESS+I2C_READ);
     c84:	83 ea       	ldi	r24, 0xA3	; 163
     c86:	0e 94 15 0a 	call	0x142a	; 0x142a <i2c_start>
	*Hours= i2c_readNak();
     c8a:	00 91 20 01 	lds	r16, 0x0120
     c8e:	10 91 21 01 	lds	r17, 0x0121
     c92:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <i2c_readNak>
     c96:	f8 01       	movw	r30, r16
     c98:	80 83       	st	Z, r24
	i2c_stop();
     c9a:	0e 94 a8 0a 	call	0x1550	; 0x1550 <i2c_stop>

	currentHours = *Hours;
     c9e:	e0 91 20 01 	lds	r30, 0x0120
     ca2:	f0 91 21 01 	lds	r31, 0x0121
     ca6:	80 81       	ld	r24, Z
     ca8:	88 2f       	mov	r24, r24
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	90 93 2f 01 	sts	0x012F, r25
     cb0:	80 93 2e 01 	sts	0x012E, r24
	temp = BCDtoINT(currentHours,0b00111111);
     cb4:	80 91 2e 01 	lds	r24, 0x012E
     cb8:	90 91 2f 01 	lds	r25, 0x012F
     cbc:	6f e3       	ldi	r22, 0x3F	; 63
     cbe:	0e 94 a3 06 	call	0xd46	; 0xd46 <BCDtoINT>
     cc2:	89 83       	std	Y+1, r24	; 0x01
	currentHours = temp;
     cc4:	89 81       	ldd	r24, Y+1	; 0x01
     cc6:	88 2f       	mov	r24, r24
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	90 93 2f 01 	sts	0x012F, r25
     cce:	80 93 2e 01 	sts	0x012E, r24

	currentHours = *Seconds;
     cd2:	e0 91 34 01 	lds	r30, 0x0134
     cd6:	f0 91 35 01 	lds	r31, 0x0135
     cda:	80 81       	ld	r24, Z
     cdc:	88 2f       	mov	r24, r24
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	90 93 2f 01 	sts	0x012F, r25
     ce4:	80 93 2e 01 	sts	0x012E, r24
		temp = BCDtoINT(currentHours,0b00111111);
     ce8:	80 91 2e 01 	lds	r24, 0x012E
     cec:	90 91 2f 01 	lds	r25, 0x012F
     cf0:	6f e3       	ldi	r22, 0x3F	; 63
     cf2:	0e 94 a3 06 	call	0xd46	; 0xd46 <BCDtoINT>
     cf6:	89 83       	std	Y+1, r24	; 0x01
		currentHours = temp;
     cf8:	89 81       	ldd	r24, Y+1	; 0x01
     cfa:	88 2f       	mov	r24, r24
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	90 93 2f 01 	sts	0x012F, r25
     d02:	80 93 2e 01 	sts	0x012E, r24

				currentHours = *Minutes;
     d06:	e0 91 32 01 	lds	r30, 0x0132
     d0a:	f0 91 33 01 	lds	r31, 0x0133
     d0e:	80 81       	ld	r24, Z
     d10:	88 2f       	mov	r24, r24
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	90 93 2f 01 	sts	0x012F, r25
     d18:	80 93 2e 01 	sts	0x012E, r24
					temp = BCDtoINT(currentHours,0b00111111);
     d1c:	80 91 2e 01 	lds	r24, 0x012E
     d20:	90 91 2f 01 	lds	r25, 0x012F
     d24:	6f e3       	ldi	r22, 0x3F	; 63
     d26:	0e 94 a3 06 	call	0xd46	; 0xd46 <BCDtoINT>
     d2a:	89 83       	std	Y+1, r24	; 0x01
					currentHours = temp;
     d2c:	89 81       	ldd	r24, Y+1	; 0x01
     d2e:	88 2f       	mov	r24, r24
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	90 93 2f 01 	sts	0x012F, r25
     d36:	80 93 2e 01 	sts	0x012E, r24



}
     d3a:	0f 90       	pop	r0
     d3c:	cf 91       	pop	r28
     d3e:	df 91       	pop	r29
     d40:	1f 91       	pop	r17
     d42:	0f 91       	pop	r16
     d44:	08 95       	ret

00000d46 <BCDtoINT>:
 /* converts BCD to integer*/
unsigned int BCDtoINT(unsigned int BCD, char bitMask)
	{
     d46:	df 93       	push	r29
     d48:	cf 93       	push	r28
     d4a:	00 d0       	rcall	.+0      	; 0xd4c <BCDtoINT+0x6>
     d4c:	00 d0       	rcall	.+0      	; 0xd4e <BCDtoINT+0x8>
     d4e:	0f 92       	push	r0
     d50:	cd b7       	in	r28, 0x3d	; 61
     d52:	de b7       	in	r29, 0x3e	; 62
     d54:	9c 83       	std	Y+4, r25	; 0x04
     d56:	8b 83       	std	Y+3, r24	; 0x03
     d58:	6d 83       	std	Y+5, r22	; 0x05

	 BCD &= bitMask;// masks the bits we don't need
     d5a:	8d 81       	ldd	r24, Y+5	; 0x05
     d5c:	28 2f       	mov	r18, r24
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	8b 81       	ldd	r24, Y+3	; 0x03
     d62:	9c 81       	ldd	r25, Y+4	; 0x04
     d64:	82 23       	and	r24, r18
     d66:	93 23       	and	r25, r19
     d68:	9c 83       	std	Y+4, r25	; 0x04
     d6a:	8b 83       	std	Y+3, r24	; 0x03
	 char lowerBits = BCD & 0x0F;// masks upper bits, and writes lower bits to loweBits
     d6c:	8b 81       	ldd	r24, Y+3	; 0x03
     d6e:	8f 70       	andi	r24, 0x0F	; 15
     d70:	8a 83       	std	Y+2, r24	; 0x02
	 char higherBits = (BCD >> 4);// sets higher bits
     d72:	8b 81       	ldd	r24, Y+3	; 0x03
     d74:	9c 81       	ldd	r25, Y+4	; 0x04
     d76:	92 95       	swap	r25
     d78:	82 95       	swap	r24
     d7a:	8f 70       	andi	r24, 0x0F	; 15
     d7c:	89 27       	eor	r24, r25
     d7e:	9f 70       	andi	r25, 0x0F	; 15
     d80:	89 27       	eor	r24, r25
     d82:	89 83       	std	Y+1, r24	; 0x01
	  return (higherBits * 10) + lowerBits; //multiplies the higher bits by 10 and adds the lower bits since both parts are being used
     d84:	89 81       	ldd	r24, Y+1	; 0x01
     d86:	88 2f       	mov	r24, r24
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	9c 01       	movw	r18, r24
     d8c:	22 0f       	add	r18, r18
     d8e:	33 1f       	adc	r19, r19
     d90:	c9 01       	movw	r24, r18
     d92:	88 0f       	add	r24, r24
     d94:	99 1f       	adc	r25, r25
     d96:	88 0f       	add	r24, r24
     d98:	99 1f       	adc	r25, r25
     d9a:	28 0f       	add	r18, r24
     d9c:	39 1f       	adc	r19, r25
     d9e:	8a 81       	ldd	r24, Y+2	; 0x02
     da0:	88 2f       	mov	r24, r24
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	82 0f       	add	r24, r18
     da6:	93 1f       	adc	r25, r19

	}
     da8:	0f 90       	pop	r0
     daa:	0f 90       	pop	r0
     dac:	0f 90       	pop	r0
     dae:	0f 90       	pop	r0
     db0:	0f 90       	pop	r0
     db2:	cf 91       	pop	r28
     db4:	df 91       	pop	r29
     db6:	08 95       	ret

00000db8 <INTtoBCD>:
unsigned char INTtoBCD(unsigned int BIN)
{
     db8:	df 93       	push	r29
     dba:	cf 93       	push	r28
     dbc:	00 d0       	rcall	.+0      	; 0xdbe <INTtoBCD+0x6>
     dbe:	00 d0       	rcall	.+0      	; 0xdc0 <INTtoBCD+0x8>
     dc0:	cd b7       	in	r28, 0x3d	; 61
     dc2:	de b7       	in	r29, 0x3e	; 62
     dc4:	9c 83       	std	Y+4, r25	; 0x04
     dc6:	8b 83       	std	Y+3, r24	; 0x03
	unsigned int temp;
	temp = (BIN/10)<<4;// sets the high bits
     dc8:	8b 81       	ldd	r24, Y+3	; 0x03
     dca:	9c 81       	ldd	r25, Y+4	; 0x04
     dcc:	2a e0       	ldi	r18, 0x0A	; 10
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	b9 01       	movw	r22, r18
     dd2:	0e 94 09 0b 	call	0x1612	; 0x1612 <__udivmodhi4>
     dd6:	cb 01       	movw	r24, r22
     dd8:	82 95       	swap	r24
     dda:	92 95       	swap	r25
     ddc:	90 7f       	andi	r25, 0xF0	; 240
     dde:	98 27       	eor	r25, r24
     de0:	80 7f       	andi	r24, 0xF0	; 240
     de2:	98 27       	eor	r25, r24
     de4:	9a 83       	std	Y+2, r25	; 0x02
     de6:	89 83       	std	Y+1, r24	; 0x01
	temp |= (BIN%10);// "ores" the low bits with the high bits
     de8:	8b 81       	ldd	r24, Y+3	; 0x03
     dea:	9c 81       	ldd	r25, Y+4	; 0x04
     dec:	2a e0       	ldi	r18, 0x0A	; 10
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	b9 01       	movw	r22, r18
     df2:	0e 94 09 0b 	call	0x1612	; 0x1612 <__udivmodhi4>
     df6:	9c 01       	movw	r18, r24
     df8:	89 81       	ldd	r24, Y+1	; 0x01
     dfa:	9a 81       	ldd	r25, Y+2	; 0x02
     dfc:	82 2b       	or	r24, r18
     dfe:	93 2b       	or	r25, r19
     e00:	9a 83       	std	Y+2, r25	; 0x02
     e02:	89 83       	std	Y+1, r24	; 0x01
	return temp;
     e04:	89 81       	ldd	r24, Y+1	; 0x01

}
     e06:	0f 90       	pop	r0
     e08:	0f 90       	pop	r0
     e0a:	0f 90       	pop	r0
     e0c:	0f 90       	pop	r0
     e0e:	cf 91       	pop	r28
     e10:	df 91       	pop	r29
     e12:	08 95       	ret

00000e14 <RTCsetTime>:

void RTCsetTime(unsigned int seconds, unsigned int minutes, unsigned int hours)
{
     e14:	df 93       	push	r29
     e16:	cf 93       	push	r28
     e18:	cd b7       	in	r28, 0x3d	; 61
     e1a:	de b7       	in	r29, 0x3e	; 62
     e1c:	27 97       	sbiw	r28, 0x07	; 7
     e1e:	0f b6       	in	r0, 0x3f	; 63
     e20:	f8 94       	cli
     e22:	de bf       	out	0x3e, r29	; 62
     e24:	0f be       	out	0x3f, r0	; 63
     e26:	cd bf       	out	0x3d, r28	; 61
     e28:	9b 83       	std	Y+3, r25	; 0x03
     e2a:	8a 83       	std	Y+2, r24	; 0x02
     e2c:	7d 83       	std	Y+5, r23	; 0x05
     e2e:	6c 83       	std	Y+4, r22	; 0x04
     e30:	5f 83       	std	Y+7, r21	; 0x07
     e32:	4e 83       	std	Y+6, r20	; 0x06
	unsigned char temp;

	i2c_start(PCF8653_BUS_ADDRESS+I2C_WRITE); // set device address and write mode
     e34:	82 ea       	ldi	r24, 0xA2	; 162
     e36:	0e 94 15 0a 	call	0x142a	; 0x142a <i2c_start>
	i2c_write(0x02);// Seconds register address
     e3a:	82 e0       	ldi	r24, 0x02	; 2
     e3c:	0e 94 bc 0a 	call	0x1578	; 0x1578 <i2c_write>
	temp = INTtoBCD (seconds);
     e40:	8a 81       	ldd	r24, Y+2	; 0x02
     e42:	9b 81       	ldd	r25, Y+3	; 0x03
     e44:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <INTtoBCD>
     e48:	89 83       	std	Y+1, r24	; 0x01
	i2c_write(temp);
     e4a:	89 81       	ldd	r24, Y+1	; 0x01
     e4c:	0e 94 bc 0a 	call	0x1578	; 0x1578 <i2c_write>
	i2c_stop();
     e50:	0e 94 a8 0a 	call	0x1550	; 0x1550 <i2c_stop>

	i2c_start(PCF8653_BUS_ADDRESS+I2C_WRITE); // set device address and write mode
     e54:	82 ea       	ldi	r24, 0xA2	; 162
     e56:	0e 94 15 0a 	call	0x142a	; 0x142a <i2c_start>
	i2c_write(0x03);// Minutes register address
     e5a:	83 e0       	ldi	r24, 0x03	; 3
     e5c:	0e 94 bc 0a 	call	0x1578	; 0x1578 <i2c_write>
	temp = INTtoBCD (minutes);
     e60:	8c 81       	ldd	r24, Y+4	; 0x04
     e62:	9d 81       	ldd	r25, Y+5	; 0x05
     e64:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <INTtoBCD>
     e68:	89 83       	std	Y+1, r24	; 0x01
	i2c_write(temp);
     e6a:	89 81       	ldd	r24, Y+1	; 0x01
     e6c:	0e 94 bc 0a 	call	0x1578	; 0x1578 <i2c_write>
	i2c_stop();
     e70:	0e 94 a8 0a 	call	0x1550	; 0x1550 <i2c_stop>


	i2c_start(PCF8653_BUS_ADDRESS+I2C_WRITE); // set device address and write mode
     e74:	82 ea       	ldi	r24, 0xA2	; 162
     e76:	0e 94 15 0a 	call	0x142a	; 0x142a <i2c_start>
	i2c_write(0x04);// Hours register address
     e7a:	84 e0       	ldi	r24, 0x04	; 4
     e7c:	0e 94 bc 0a 	call	0x1578	; 0x1578 <i2c_write>
	temp = INTtoBCD (hours);
     e80:	8e 81       	ldd	r24, Y+6	; 0x06
     e82:	9f 81       	ldd	r25, Y+7	; 0x07
     e84:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <INTtoBCD>
     e88:	89 83       	std	Y+1, r24	; 0x01
	i2c_write(temp);
     e8a:	89 81       	ldd	r24, Y+1	; 0x01
     e8c:	0e 94 bc 0a 	call	0x1578	; 0x1578 <i2c_write>
	i2c_stop();
     e90:	0e 94 a8 0a 	call	0x1550	; 0x1550 <i2c_stop>
}
     e94:	27 96       	adiw	r28, 0x07	; 7
     e96:	0f b6       	in	r0, 0x3f	; 63
     e98:	f8 94       	cli
     e9a:	de bf       	out	0x3e, r29	; 62
     e9c:	0f be       	out	0x3f, r0	; 63
     e9e:	cd bf       	out	0x3d, r28	; 61
     ea0:	cf 91       	pop	r28
     ea2:	df 91       	pop	r29
     ea4:	08 95       	ret

00000ea6 <showTime>:

void showTime(void)
{
     ea6:	df 93       	push	r29
     ea8:	cf 93       	push	r28
     eaa:	cd b7       	in	r28, 0x3d	; 61
     eac:	de b7       	in	r29, 0x3e	; 62
     eae:	62 97       	sbiw	r28, 0x12	; 18
     eb0:	0f b6       	in	r0, 0x3f	; 63
     eb2:	f8 94       	cli
     eb4:	de bf       	out	0x3e, r29	; 62
     eb6:	0f be       	out	0x3f, r0	; 63
     eb8:	cd bf       	out	0x3d, r28	; 61
	char hoursArray[6];// array to hold the current hours
	char minutesArray[6];// array to hold the current minutes
	char secondsArray[6];// array to hold the current seconds

	itoa(currentHours,hoursArray,10);//turns the current hours into a string
     eba:	80 91 2e 01 	lds	r24, 0x012E
     ebe:	90 91 2f 01 	lds	r25, 0x012F
     ec2:	9e 01       	movw	r18, r28
     ec4:	2f 5f       	subi	r18, 0xFF	; 255
     ec6:	3f 4f       	sbci	r19, 0xFF	; 255
     ec8:	b9 01       	movw	r22, r18
     eca:	4a e0       	ldi	r20, 0x0A	; 10
     ecc:	50 e0       	ldi	r21, 0x00	; 0
     ece:	0e 94 1d 0b 	call	0x163a	; 0x163a <itoa>

	lcd_gotoxy(0,0);// sets the lcd cursor to the starting position
     ed2:	80 e0       	ldi	r24, 0x00	; 0
     ed4:	60 e0       	ldi	r22, 0x00	; 0
     ed6:	0e 94 7e 02 	call	0x4fc	; 0x4fc <lcd_gotoxy>
	lcd_puts(hoursArray);// displays the hours
     eda:	ce 01       	movw	r24, r28
     edc:	01 96       	adiw	r24, 0x01	; 1
     ede:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <lcd_puts>

	lcd_gotoxy(2,0);// moves the cursor 2 positions to the right
     ee2:	82 e0       	ldi	r24, 0x02	; 2
     ee4:	60 e0       	ldi	r22, 0x00	; 0
     ee6:	0e 94 7e 02 	call	0x4fc	; 0x4fc <lcd_gotoxy>
	lcd_puts(":");// puts ":"
     eea:	88 e0       	ldi	r24, 0x08	; 8
     eec:	91 e0       	ldi	r25, 0x01	; 1
     eee:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <lcd_puts>

	itoa(currentMinutes,minutesArray,10);//turns the current minutes into a string
     ef2:	80 91 22 01 	lds	r24, 0x0122
     ef6:	90 91 23 01 	lds	r25, 0x0123
     efa:	9e 01       	movw	r18, r28
     efc:	29 5f       	subi	r18, 0xF9	; 249
     efe:	3f 4f       	sbci	r19, 0xFF	; 255
     f00:	b9 01       	movw	r22, r18
     f02:	4a e0       	ldi	r20, 0x0A	; 10
     f04:	50 e0       	ldi	r21, 0x00	; 0
     f06:	0e 94 1d 0b 	call	0x163a	; 0x163a <itoa>
	lcd_gotoxy(4,0);// moves the cursor another 2 positions
     f0a:	84 e0       	ldi	r24, 0x04	; 4
     f0c:	60 e0       	ldi	r22, 0x00	; 0
     f0e:	0e 94 7e 02 	call	0x4fc	; 0x4fc <lcd_gotoxy>
	lcd_puts(minutesArray);// displays the minutes
     f12:	ce 01       	movw	r24, r28
     f14:	07 96       	adiw	r24, 0x07	; 7
     f16:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <lcd_puts>

	lcd_gotoxy(6,0);// moves the cursor another 2 positions to the right
     f1a:	86 e0       	ldi	r24, 0x06	; 6
     f1c:	60 e0       	ldi	r22, 0x00	; 0
     f1e:	0e 94 7e 02 	call	0x4fc	; 0x4fc <lcd_gotoxy>
	lcd_puts(":");// puts ":"
     f22:	88 e0       	ldi	r24, 0x08	; 8
     f24:	91 e0       	ldi	r25, 0x01	; 1
     f26:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <lcd_puts>

	itoa(currentSeconds,secondsArray,10);//turns the current seconds into a string
     f2a:	80 91 2a 01 	lds	r24, 0x012A
     f2e:	90 91 2b 01 	lds	r25, 0x012B
     f32:	9e 01       	movw	r18, r28
     f34:	23 5f       	subi	r18, 0xF3	; 243
     f36:	3f 4f       	sbci	r19, 0xFF	; 255
     f38:	b9 01       	movw	r22, r18
     f3a:	4a e0       	ldi	r20, 0x0A	; 10
     f3c:	50 e0       	ldi	r21, 0x00	; 0
     f3e:	0e 94 1d 0b 	call	0x163a	; 0x163a <itoa>
	lcd_gotoxy(8,0);// moves the cursor another 2 positions
     f42:	88 e0       	ldi	r24, 0x08	; 8
     f44:	60 e0       	ldi	r22, 0x00	; 0
     f46:	0e 94 7e 02 	call	0x4fc	; 0x4fc <lcd_gotoxy>
	lcd_puts(secondsArray);// displays the seconds
     f4a:	ce 01       	movw	r24, r28
     f4c:	0d 96       	adiw	r24, 0x0d	; 13
     f4e:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <lcd_puts>
}
     f52:	62 96       	adiw	r28, 0x12	; 18
     f54:	0f b6       	in	r0, 0x3f	; 63
     f56:	f8 94       	cli
     f58:	de bf       	out	0x3e, r29	; 62
     f5a:	0f be       	out	0x3f, r0	; 63
     f5c:	cd bf       	out	0x3d, r28	; 61
     f5e:	cf 91       	pop	r28
     f60:	df 91       	pop	r29
     f62:	08 95       	ret

00000f64 <showDate>:

void showDate(void)
{
     f64:	0f 93       	push	r16
     f66:	1f 93       	push	r17
     f68:	df 93       	push	r29
     f6a:	cf 93       	push	r28
     f6c:	cd b7       	in	r28, 0x3d	; 61
     f6e:	de b7       	in	r29, 0x3e	; 62
     f70:	63 97       	sbiw	r28, 0x13	; 19
     f72:	0f b6       	in	r0, 0x3f	; 63
     f74:	f8 94       	cli
     f76:	de bf       	out	0x3e, r29	; 62
     f78:	0f be       	out	0x3f, r0	; 63
     f7a:	cd bf       	out	0x3d, r28	; 61
   unsigned char temp;

	i2c_start(PCF8653_BUS_ADDRESS+I2C_WRITE); // set device address and write mode
     f7c:	82 ea       	ldi	r24, 0xA2	; 162
     f7e:	0e 94 15 0a 	call	0x142a	; 0x142a <i2c_start>
	i2c_write(0x07);// Month register address
     f82:	87 e0       	ldi	r24, 0x07	; 7
     f84:	0e 94 bc 0a 	call	0x1578	; 0x1578 <i2c_write>
	i2c_stop();
     f88:	0e 94 a8 0a 	call	0x1550	; 0x1550 <i2c_stop>
	i2c_start(PCF8653_BUS_ADDRESS+I2C_READ);
     f8c:	83 ea       	ldi	r24, 0xA3	; 163
     f8e:	0e 94 15 0a 	call	0x142a	; 0x142a <i2c_start>
	*Month= i2c_readNak();
     f92:	00 91 30 01 	lds	r16, 0x0130
     f96:	10 91 31 01 	lds	r17, 0x0131
     f9a:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <i2c_readNak>
     f9e:	f8 01       	movw	r30, r16
     fa0:	80 83       	st	Z, r24
	i2c_stop();
     fa2:	0e 94 a8 0a 	call	0x1550	; 0x1550 <i2c_stop>

	i2c_start(PCF8653_BUS_ADDRESS+I2C_WRITE); // set device address and write mode
     fa6:	82 ea       	ldi	r24, 0xA2	; 162
     fa8:	0e 94 15 0a 	call	0x142a	; 0x142a <i2c_start>
	i2c_write(0x05);// Day register address
     fac:	85 e0       	ldi	r24, 0x05	; 5
     fae:	0e 94 bc 0a 	call	0x1578	; 0x1578 <i2c_write>
	i2c_stop();
     fb2:	0e 94 a8 0a 	call	0x1550	; 0x1550 <i2c_stop>
	i2c_start(PCF8653_BUS_ADDRESS+I2C_READ);
     fb6:	83 ea       	ldi	r24, 0xA3	; 163
     fb8:	0e 94 15 0a 	call	0x142a	; 0x142a <i2c_start>
	*Day= i2c_readNak();
     fbc:	00 91 28 01 	lds	r16, 0x0128
     fc0:	10 91 29 01 	lds	r17, 0x0129
     fc4:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <i2c_readNak>
     fc8:	f8 01       	movw	r30, r16
     fca:	80 83       	st	Z, r24
	i2c_stop();
     fcc:	0e 94 a8 0a 	call	0x1550	; 0x1550 <i2c_stop>

	i2c_start(PCF8653_BUS_ADDRESS+I2C_WRITE); // set device address and write mode
     fd0:	82 ea       	ldi	r24, 0xA2	; 162
     fd2:	0e 94 15 0a 	call	0x142a	; 0x142a <i2c_start>
	i2c_write(0x08);// Year register address
     fd6:	88 e0       	ldi	r24, 0x08	; 8
     fd8:	0e 94 bc 0a 	call	0x1578	; 0x1578 <i2c_write>
	i2c_stop();
     fdc:	0e 94 a8 0a 	call	0x1550	; 0x1550 <i2c_stop>
	i2c_start(PCF8653_BUS_ADDRESS+I2C_READ);
     fe0:	83 ea       	ldi	r24, 0xA3	; 163
     fe2:	0e 94 15 0a 	call	0x142a	; 0x142a <i2c_start>
	*Year= i2c_readNak();
     fe6:	00 91 2c 01 	lds	r16, 0x012C
     fea:	10 91 2d 01 	lds	r17, 0x012D
     fee:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <i2c_readNak>
     ff2:	f8 01       	movw	r30, r16
     ff4:	80 83       	st	Z, r24
	i2c_stop();
     ff6:	0e 94 a8 0a 	call	0x1550	; 0x1550 <i2c_stop>

	currentMonth = *Month;// sets the BCD value of current year to a type int so we can convert it
     ffa:	e0 91 30 01 	lds	r30, 0x0130
     ffe:	f0 91 31 01 	lds	r31, 0x0131
    1002:	80 81       	ld	r24, Z
    1004:	88 2f       	mov	r24, r24
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	90 93 39 01 	sts	0x0139, r25
    100c:	80 93 38 01 	sts	0x0138, r24
	temp = BCDtoINT (currentMonth, 0b00011111);// converts into an integer from a BCD
    1010:	80 91 38 01 	lds	r24, 0x0138
    1014:	90 91 39 01 	lds	r25, 0x0139
    1018:	6f e1       	ldi	r22, 0x1F	; 31
    101a:	0e 94 a3 06 	call	0xd46	; 0xd46 <BCDtoINT>
    101e:	89 83       	std	Y+1, r24	; 0x01
	currentMonth = temp;// sets the converted value back to an integer
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	88 2f       	mov	r24, r24
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	90 93 39 01 	sts	0x0139, r25
    102a:	80 93 38 01 	sts	0x0138, r24

	currentDay = *Day;// sets the BCD value of current year to a type int so we can convert it
    102e:	e0 91 28 01 	lds	r30, 0x0128
    1032:	f0 91 29 01 	lds	r31, 0x0129
    1036:	80 81       	ld	r24, Z
    1038:	88 2f       	mov	r24, r24
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	90 93 27 01 	sts	0x0127, r25
    1040:	80 93 26 01 	sts	0x0126, r24
	temp = BCDtoINT(currentDay,0b00111111);// masks the century bit in the current month
    1044:	80 91 26 01 	lds	r24, 0x0126
    1048:	90 91 27 01 	lds	r25, 0x0127
    104c:	6f e3       	ldi	r22, 0x3F	; 63
    104e:	0e 94 a3 06 	call	0xd46	; 0xd46 <BCDtoINT>
    1052:	89 83       	std	Y+1, r24	; 0x01
	currentDay = temp;// sets the converted value back to an integer
    1054:	89 81       	ldd	r24, Y+1	; 0x01
    1056:	88 2f       	mov	r24, r24
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	90 93 27 01 	sts	0x0127, r25
    105e:	80 93 26 01 	sts	0x0126, r24

	currentYear = *Year;;// sets the BCD value of current year to a type int so we can convert it
    1062:	e0 91 2c 01 	lds	r30, 0x012C
    1066:	f0 91 2d 01 	lds	r31, 0x012D
    106a:	80 81       	ld	r24, Z
    106c:	88 2f       	mov	r24, r24
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	90 93 1f 01 	sts	0x011F, r25
    1074:	80 93 1e 01 	sts	0x011E, r24
	temp = BCDtoINT(currentYear,0b11111111);// converts into an integer from a BCD
    1078:	80 91 1e 01 	lds	r24, 0x011E
    107c:	90 91 1f 01 	lds	r25, 0x011F
    1080:	6f ef       	ldi	r22, 0xFF	; 255
    1082:	0e 94 a3 06 	call	0xd46	; 0xd46 <BCDtoINT>
    1086:	89 83       	std	Y+1, r24	; 0x01
	currentYear = temp;// sets the converted value back to an integer
    1088:	89 81       	ldd	r24, Y+1	; 0x01
    108a:	88 2f       	mov	r24, r24
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	90 93 1f 01 	sts	0x011F, r25
    1092:	80 93 1e 01 	sts	0x011E, r24

	char MonthArray[6];// array to hold the current Month
	char DayArray[6];// array to hold the current Day
	char YearArray[6];// array to hold the current Year

	itoa(currentMonth,MonthArray,10);//turns the current hours into a string
    1096:	80 91 38 01 	lds	r24, 0x0138
    109a:	90 91 39 01 	lds	r25, 0x0139
    109e:	9e 01       	movw	r18, r28
    10a0:	2e 5f       	subi	r18, 0xFE	; 254
    10a2:	3f 4f       	sbci	r19, 0xFF	; 255
    10a4:	b9 01       	movw	r22, r18
    10a6:	4a e0       	ldi	r20, 0x0A	; 10
    10a8:	50 e0       	ldi	r21, 0x00	; 0
    10aa:	0e 94 1d 0b 	call	0x163a	; 0x163a <itoa>
	lcd_gotoxy(0,0);// sets the lcd cursor to the starting position
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	60 e0       	ldi	r22, 0x00	; 0
    10b2:	0e 94 7e 02 	call	0x4fc	; 0x4fc <lcd_gotoxy>
	lcd_puts(MonthArray);// displays the hours
    10b6:	ce 01       	movw	r24, r28
    10b8:	02 96       	adiw	r24, 0x02	; 2
    10ba:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <lcd_puts>

	itoa(currentDay,DayArray,10);//turns the current minutes into a string
    10be:	80 91 26 01 	lds	r24, 0x0126
    10c2:	90 91 27 01 	lds	r25, 0x0127
    10c6:	9e 01       	movw	r18, r28
    10c8:	28 5f       	subi	r18, 0xF8	; 248
    10ca:	3f 4f       	sbci	r19, 0xFF	; 255
    10cc:	b9 01       	movw	r22, r18
    10ce:	4a e0       	ldi	r20, 0x0A	; 10
    10d0:	50 e0       	ldi	r21, 0x00	; 0
    10d2:	0e 94 1d 0b 	call	0x163a	; 0x163a <itoa>
	lcd_gotoxy(3,0);// moves the cursor another 2 positions
    10d6:	83 e0       	ldi	r24, 0x03	; 3
    10d8:	60 e0       	ldi	r22, 0x00	; 0
    10da:	0e 94 7e 02 	call	0x4fc	; 0x4fc <lcd_gotoxy>
	lcd_puts(DayArray);// displays the current minute
    10de:	ce 01       	movw	r24, r28
    10e0:	08 96       	adiw	r24, 0x08	; 8
    10e2:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <lcd_puts>

	itoa(currentYear,YearArray,10);//turns the current seconds into a string
    10e6:	80 91 1e 01 	lds	r24, 0x011E
    10ea:	90 91 1f 01 	lds	r25, 0x011F
    10ee:	9e 01       	movw	r18, r28
    10f0:	22 5f       	subi	r18, 0xF2	; 242
    10f2:	3f 4f       	sbci	r19, 0xFF	; 255
    10f4:	b9 01       	movw	r22, r18
    10f6:	4a e0       	ldi	r20, 0x0A	; 10
    10f8:	50 e0       	ldi	r21, 0x00	; 0
    10fa:	0e 94 1d 0b 	call	0x163a	; 0x163a <itoa>
	lcd_gotoxy(6,0);// moves the cursor another 2 positions
    10fe:	86 e0       	ldi	r24, 0x06	; 6
    1100:	60 e0       	ldi	r22, 0x00	; 0
    1102:	0e 94 7e 02 	call	0x4fc	; 0x4fc <lcd_gotoxy>
	lcd_puts(YearArray);// displays the current year
    1106:	ce 01       	movw	r24, r28
    1108:	0e 96       	adiw	r24, 0x0e	; 14
    110a:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <lcd_puts>
}
    110e:	63 96       	adiw	r28, 0x13	; 19
    1110:	0f b6       	in	r0, 0x3f	; 63
    1112:	f8 94       	cli
    1114:	de bf       	out	0x3e, r29	; 62
    1116:	0f be       	out	0x3f, r0	; 63
    1118:	cd bf       	out	0x3d, r28	; 61
    111a:	cf 91       	pop	r28
    111c:	df 91       	pop	r29
    111e:	1f 91       	pop	r17
    1120:	0f 91       	pop	r16
    1122:	08 95       	ret

00001124 <setDate>:

void setDate (void)
{
    1124:	df 93       	push	r29
    1126:	cf 93       	push	r28
    1128:	0f 92       	push	r0
    112a:	cd b7       	in	r28, 0x3d	; 61
    112c:	de b7       	in	r29, 0x3e	; 62
	unsigned char temp;

		i2c_start(PCF8653_BUS_ADDRESS+I2C_WRITE); // set device address and write mode
    112e:	82 ea       	ldi	r24, 0xA2	; 162
    1130:	0e 94 15 0a 	call	0x142a	; 0x142a <i2c_start>
		i2c_write(0x07);// Month register address
    1134:	87 e0       	ldi	r24, 0x07	; 7
    1136:	0e 94 bc 0a 	call	0x1578	; 0x1578 <i2c_write>
		temp = INTtoBCD(currentMonth);
    113a:	80 91 38 01 	lds	r24, 0x0138
    113e:	90 91 39 01 	lds	r25, 0x0139
    1142:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <INTtoBCD>
    1146:	89 83       	std	Y+1, r24	; 0x01
		i2c_write(temp);
    1148:	89 81       	ldd	r24, Y+1	; 0x01
    114a:	0e 94 bc 0a 	call	0x1578	; 0x1578 <i2c_write>
		i2c_stop();
    114e:	0e 94 a8 0a 	call	0x1550	; 0x1550 <i2c_stop>

		i2c_start(PCF8653_BUS_ADDRESS+I2C_WRITE); // set device address and write mode
    1152:	82 ea       	ldi	r24, 0xA2	; 162
    1154:	0e 94 15 0a 	call	0x142a	; 0x142a <i2c_start>
		i2c_write(0x05);// Day register address
    1158:	85 e0       	ldi	r24, 0x05	; 5
    115a:	0e 94 bc 0a 	call	0x1578	; 0x1578 <i2c_write>
		temp = INTtoBCD (currentDay);
    115e:	80 91 26 01 	lds	r24, 0x0126
    1162:	90 91 27 01 	lds	r25, 0x0127
    1166:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <INTtoBCD>
    116a:	89 83       	std	Y+1, r24	; 0x01
		i2c_write(temp);
    116c:	89 81       	ldd	r24, Y+1	; 0x01
    116e:	0e 94 bc 0a 	call	0x1578	; 0x1578 <i2c_write>
		i2c_stop();
    1172:	0e 94 a8 0a 	call	0x1550	; 0x1550 <i2c_stop>


		i2c_start(PCF8653_BUS_ADDRESS+I2C_WRITE); // set device address and write mode
    1176:	82 ea       	ldi	r24, 0xA2	; 162
    1178:	0e 94 15 0a 	call	0x142a	; 0x142a <i2c_start>
		i2c_write(0x08);// Year register address
    117c:	88 e0       	ldi	r24, 0x08	; 8
    117e:	0e 94 bc 0a 	call	0x1578	; 0x1578 <i2c_write>
		temp = INTtoBCD (currentYear);
    1182:	80 91 1e 01 	lds	r24, 0x011E
    1186:	90 91 1f 01 	lds	r25, 0x011F
    118a:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <INTtoBCD>
    118e:	89 83       	std	Y+1, r24	; 0x01
		i2c_write(temp);
    1190:	89 81       	ldd	r24, Y+1	; 0x01
    1192:	0e 94 bc 0a 	call	0x1578	; 0x1578 <i2c_write>
		i2c_stop();
    1196:	0e 94 a8 0a 	call	0x1550	; 0x1550 <i2c_stop>
}
    119a:	0f 90       	pop	r0
    119c:	cf 91       	pop	r28
    119e:	df 91       	pop	r29
    11a0:	08 95       	ret

000011a2 <saveToLog>:

void saveToLog (void)// puts the time into the log backwards so its easier to read out
{
    11a2:	df 93       	push	r29
    11a4:	cf 93       	push	r28
    11a6:	00 d0       	rcall	.+0      	; 0x11a8 <saveToLog+0x6>
    11a8:	cd b7       	in	r28, 0x3d	; 61
    11aa:	de b7       	in	r29, 0x3e	; 62

 unsigned char check;
 unsigned char temp;

 	 	 	 	 temp=*Seconds;
    11ac:	e0 91 34 01 	lds	r30, 0x0134
    11b0:	f0 91 35 01 	lds	r31, 0x0135
    11b4:	80 81       	ld	r24, Z
    11b6:	89 83       	std	Y+1, r24	; 0x01
		 		check = AT24C64_byte_write(addressCounter, temp);// writes the second the button was pressed
    11b8:	80 91 36 01 	lds	r24, 0x0136
    11bc:	90 91 37 01 	lds	r25, 0x0137
    11c0:	69 81       	ldd	r22, Y+1	; 0x01
    11c2:	0e 94 cf 05 	call	0xb9e	; 0xb9e <AT24C64_byte_write>
    11c6:	8a 83       	std	Y+2, r24	; 0x02
		 		 if (check == 0)// checks to see if the EEPROM was successfully written to
    11c8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ca:	88 23       	and	r24, r24
    11cc:	51 f4       	brne	.+20     	; 0x11e2 <saveToLog+0x40>
		 		 addressCounter++;
    11ce:	80 91 36 01 	lds	r24, 0x0136
    11d2:	90 91 37 01 	lds	r25, 0x0137
    11d6:	01 96       	adiw	r24, 0x01	; 1
    11d8:	90 93 37 01 	sts	0x0137, r25
    11dc:	80 93 36 01 	sts	0x0136, r24
    11e0:	04 c0       	rjmp	.+8      	; 0x11ea <saveToLog+0x48>
		 	   else lcd_puts("error in EEPROM");// displays error message if unsuccessful write to the EEPROM occurred
    11e2:	8a e0       	ldi	r24, 0x0A	; 10
    11e4:	91 e0       	ldi	r25, 0x01	; 1
    11e6:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <lcd_puts>


		 		 	 	 	 	 temp=*Minutes;
    11ea:	e0 91 32 01 	lds	r30, 0x0132
    11ee:	f0 91 33 01 	lds	r31, 0x0133
    11f2:	80 81       	ld	r24, Z
    11f4:	89 83       	std	Y+1, r24	; 0x01
		 				 		check = AT24C64_byte_write(addressCounter, temp);// writes the minute the button was pressed
    11f6:	80 91 36 01 	lds	r24, 0x0136
    11fa:	90 91 37 01 	lds	r25, 0x0137
    11fe:	69 81       	ldd	r22, Y+1	; 0x01
    1200:	0e 94 cf 05 	call	0xb9e	; 0xb9e <AT24C64_byte_write>
    1204:	8a 83       	std	Y+2, r24	; 0x02
		 				 		 if (check == 0)// checks to see if the EEPROM was successfully written to
    1206:	8a 81       	ldd	r24, Y+2	; 0x02
    1208:	88 23       	and	r24, r24
    120a:	51 f4       	brne	.+20     	; 0x1220 <saveToLog+0x7e>
		 				 		 addressCounter++;
    120c:	80 91 36 01 	lds	r24, 0x0136
    1210:	90 91 37 01 	lds	r25, 0x0137
    1214:	01 96       	adiw	r24, 0x01	; 1
    1216:	90 93 37 01 	sts	0x0137, r25
    121a:	80 93 36 01 	sts	0x0136, r24
    121e:	04 c0       	rjmp	.+8      	; 0x1228 <saveToLog+0x86>
		 				 	   else lcd_puts("error in EEPROM");// displays error message if unsuccessful write to the EEPROM occurred
    1220:	8a e0       	ldi	r24, 0x0A	; 10
    1222:	91 e0       	ldi	r25, 0x01	; 1
    1224:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <lcd_puts>

		 				 		temp=*Hours;
    1228:	e0 91 20 01 	lds	r30, 0x0120
    122c:	f0 91 21 01 	lds	r31, 0x0121
    1230:	80 81       	ld	r24, Z
    1232:	89 83       	std	Y+1, r24	; 0x01
		 				 		 check = AT24C64_byte_write(addressCounter, temp);// writes the second the button was pressed (lower bits)
    1234:	80 91 36 01 	lds	r24, 0x0136
    1238:	90 91 37 01 	lds	r25, 0x0137
    123c:	69 81       	ldd	r22, Y+1	; 0x01
    123e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <AT24C64_byte_write>
    1242:	8a 83       	std	Y+2, r24	; 0x02
		 				 		if (check == 0)// checks to see if the EEPROM was successfully written to
    1244:	8a 81       	ldd	r24, Y+2	; 0x02
    1246:	88 23       	and	r24, r24
    1248:	51 f4       	brne	.+20     	; 0x125e <saveToLog+0xbc>
		 				 		addressCounter++;
    124a:	80 91 36 01 	lds	r24, 0x0136
    124e:	90 91 37 01 	lds	r25, 0x0137
    1252:	01 96       	adiw	r24, 0x01	; 1
    1254:	90 93 37 01 	sts	0x0137, r25
    1258:	80 93 36 01 	sts	0x0136, r24
    125c:	04 c0       	rjmp	.+8      	; 0x1266 <saveToLog+0xc4>
		 				 	     else lcd_puts("error in EEPROM");// displays error message if unsuccessful write to the EEPROM occurredsplays error message if unsuccessful write to the EEPROM occurred
    125e:	8a e0       	ldi	r24, 0x0A	; 10
    1260:	91 e0       	ldi	r25, 0x01	; 1
    1262:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <lcd_puts>

}
    1266:	0f 90       	pop	r0
    1268:	0f 90       	pop	r0
    126a:	cf 91       	pop	r28
    126c:	df 91       	pop	r29
    126e:	08 95       	ret

00001270 <displayLog>:

void displayLog (void)// displays the last 2 log values
{
    1270:	df 93       	push	r29
    1272:	cf 93       	push	r28
    1274:	cd b7       	in	r28, 0x3d	; 61
    1276:	de b7       	in	r29, 0x3e	; 62
    1278:	2f 97       	sbiw	r28, 0x0f	; 15
    127a:	0f b6       	in	r0, 0x3f	; 63
    127c:	f8 94       	cli
    127e:	de bf       	out	0x3e, r29	; 62
    1280:	0f be       	out	0x3f, r0	; 63
    1282:	cd bf       	out	0x3d, r28	; 61
	unsigned int tempAdressCounter;// takes the value of the address counter so it can be manipulated without changing the actual value
	unsigned char *data;// holds 1 byte of data from EEPROM at time
	*data=0x00;
    1284:	ee 81       	ldd	r30, Y+6	; 0x06
    1286:	ff 81       	ldd	r31, Y+7	; 0x07
    1288:	10 82       	st	Z, r1
		unsigned char temp;
	unsigned int currentData;
	int i;// used to move through the rows of the LCD
	tempAdressCounter = addressCounter; // sets the tempAdressCounter to addressCounter
    128a:	80 91 36 01 	lds	r24, 0x0136
    128e:	90 91 37 01 	lds	r25, 0x0137
    1292:	99 87       	std	Y+9, r25	; 0x09
    1294:	88 87       	std	Y+8, r24	; 0x08
    1296:	ad c0       	rjmp	.+346    	; 0x13f2 <displayLog+0x182>
    char dataArray[6];

		while(tempAdressCounter != 0)
		{
				AT24C64_byte_read(tempAdressCounter, data);// reads 1 byte from EEPROM
    1298:	88 85       	ldd	r24, Y+8	; 0x08
    129a:	99 85       	ldd	r25, Y+9	; 0x09
    129c:	2e 81       	ldd	r18, Y+6	; 0x06
    129e:	3f 81       	ldd	r19, Y+7	; 0x07
    12a0:	b9 01       	movw	r22, r18
    12a2:	0e 94 95 05 	call	0xb2a	; 0xb2a <AT24C64_byte_read>
				currentData = *data;// puts the data into an integer so we can convert from BCD
    12a6:	ee 81       	ldd	r30, Y+6	; 0x06
    12a8:	ff 81       	ldd	r31, Y+7	; 0x07
    12aa:	80 81       	ld	r24, Z
    12ac:	88 2f       	mov	r24, r24
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	9c 83       	std	Y+4, r25	; 0x04
    12b2:	8b 83       	std	Y+3, r24	; 0x03
				temp = BCDtoINT(currentData,0b00111111);// converts BCD log into int
    12b4:	8b 81       	ldd	r24, Y+3	; 0x03
    12b6:	9c 81       	ldd	r25, Y+4	; 0x04
    12b8:	6f e3       	ldi	r22, 0x3F	; 63
    12ba:	0e 94 a3 06 	call	0xd46	; 0xd46 <BCDtoINT>
    12be:	8d 83       	std	Y+5, r24	; 0x05
				currentData = temp;// assigns the converted value of the data into an int
    12c0:	8d 81       	ldd	r24, Y+5	; 0x05
    12c2:	88 2f       	mov	r24, r24
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	9c 83       	std	Y+4, r25	; 0x04
    12c8:	8b 83       	std	Y+3, r24	; 0x03
				itoa(currentData, dataArray, 10);// converts it into a string
    12ca:	8b 81       	ldd	r24, Y+3	; 0x03
    12cc:	9c 81       	ldd	r25, Y+4	; 0x04
    12ce:	9e 01       	movw	r18, r28
    12d0:	26 5f       	subi	r18, 0xF6	; 246
    12d2:	3f 4f       	sbci	r19, 0xFF	; 255
    12d4:	b9 01       	movw	r22, r18
    12d6:	4a e0       	ldi	r20, 0x0A	; 10
    12d8:	50 e0       	ldi	r21, 0x00	; 0
    12da:	0e 94 1d 0b 	call	0x163a	; 0x163a <itoa>
				lcd_gotoxy(0,1);// moves the cursor
    12de:	80 e0       	ldi	r24, 0x00	; 0
    12e0:	61 e0       	ldi	r22, 0x01	; 1
    12e2:	0e 94 7e 02 	call	0x4fc	; 0x4fc <lcd_gotoxy>
				lcd_puts(dataArray);// displays the last hour the button was pressed
    12e6:	ce 01       	movw	r24, r28
    12e8:	0a 96       	adiw	r24, 0x0a	; 10
    12ea:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <lcd_puts>
                lcd_gotoxy(1,i);//moves a space
    12ee:	99 81       	ldd	r25, Y+1	; 0x01
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	69 2f       	mov	r22, r25
    12f4:	0e 94 7e 02 	call	0x4fc	; 0x4fc <lcd_gotoxy>
				lcd_puts(":");//puts ":"
    12f8:	88 e0       	ldi	r24, 0x08	; 8
    12fa:	91 e0       	ldi	r25, 0x01	; 1
    12fc:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <lcd_puts>
				tempAdressCounter--;//Decrements the temporary address counter
    1300:	88 85       	ldd	r24, Y+8	; 0x08
    1302:	99 85       	ldd	r25, Y+9	; 0x09
    1304:	01 97       	sbiw	r24, 0x01	; 1
    1306:	99 87       	std	Y+9, r25	; 0x09
    1308:	88 87       	std	Y+8, r24	; 0x08


				AT24C64_byte_read(tempAdressCounter, data);// reads 1 byte from EEPROM
    130a:	88 85       	ldd	r24, Y+8	; 0x08
    130c:	99 85       	ldd	r25, Y+9	; 0x09
    130e:	2e 81       	ldd	r18, Y+6	; 0x06
    1310:	3f 81       	ldd	r19, Y+7	; 0x07
    1312:	b9 01       	movw	r22, r18
    1314:	0e 94 95 05 	call	0xb2a	; 0xb2a <AT24C64_byte_read>
				currentData = *data;// puts the data into an integer so we can convert from BCD
    1318:	ee 81       	ldd	r30, Y+6	; 0x06
    131a:	ff 81       	ldd	r31, Y+7	; 0x07
    131c:	80 81       	ld	r24, Z
    131e:	88 2f       	mov	r24, r24
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	9c 83       	std	Y+4, r25	; 0x04
    1324:	8b 83       	std	Y+3, r24	; 0x03
				temp = BCDtoINT(currentData,0b00111111);// converts BCD log into int
    1326:	8b 81       	ldd	r24, Y+3	; 0x03
    1328:	9c 81       	ldd	r25, Y+4	; 0x04
    132a:	6f e3       	ldi	r22, 0x3F	; 63
    132c:	0e 94 a3 06 	call	0xd46	; 0xd46 <BCDtoINT>
    1330:	8d 83       	std	Y+5, r24	; 0x05
				currentData = temp;// assigns the converted value of the data into an int
    1332:	8d 81       	ldd	r24, Y+5	; 0x05
    1334:	88 2f       	mov	r24, r24
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	9c 83       	std	Y+4, r25	; 0x04
    133a:	8b 83       	std	Y+3, r24	; 0x03
				itoa(currentData, dataArray, 10);// converts it into a string
    133c:	8b 81       	ldd	r24, Y+3	; 0x03
    133e:	9c 81       	ldd	r25, Y+4	; 0x04
    1340:	9e 01       	movw	r18, r28
    1342:	26 5f       	subi	r18, 0xF6	; 246
    1344:	3f 4f       	sbci	r19, 0xFF	; 255
    1346:	b9 01       	movw	r22, r18
    1348:	4a e0       	ldi	r20, 0x0A	; 10
    134a:	50 e0       	ldi	r21, 0x00	; 0
    134c:	0e 94 1d 0b 	call	0x163a	; 0x163a <itoa>
				lcd_gotoxy(2,1);// moves the cursor
    1350:	82 e0       	ldi	r24, 0x02	; 2
    1352:	61 e0       	ldi	r22, 0x01	; 1
    1354:	0e 94 7e 02 	call	0x4fc	; 0x4fc <lcd_gotoxy>
				lcd_puts(dataArray);// displays the last minute the button was pressed
    1358:	ce 01       	movw	r24, r28
    135a:	0a 96       	adiw	r24, 0x0a	; 10
    135c:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <lcd_puts>
                lcd_gotoxy(3,1);//moves a space
    1360:	83 e0       	ldi	r24, 0x03	; 3
    1362:	61 e0       	ldi	r22, 0x01	; 1
    1364:	0e 94 7e 02 	call	0x4fc	; 0x4fc <lcd_gotoxy>
				lcd_puts(":");//puts ":"
    1368:	88 e0       	ldi	r24, 0x08	; 8
    136a:	91 e0       	ldi	r25, 0x01	; 1
    136c:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <lcd_puts>
				tempAdressCounter--;//Decrements the temporary address counter
    1370:	88 85       	ldd	r24, Y+8	; 0x08
    1372:	99 85       	ldd	r25, Y+9	; 0x09
    1374:	01 97       	sbiw	r24, 0x01	; 1
    1376:	99 87       	std	Y+9, r25	; 0x09
    1378:	88 87       	std	Y+8, r24	; 0x08


				AT24C64_byte_read(tempAdressCounter, data);// reads 1 byte from EEPROM
    137a:	88 85       	ldd	r24, Y+8	; 0x08
    137c:	99 85       	ldd	r25, Y+9	; 0x09
    137e:	2e 81       	ldd	r18, Y+6	; 0x06
    1380:	3f 81       	ldd	r19, Y+7	; 0x07
    1382:	b9 01       	movw	r22, r18
    1384:	0e 94 95 05 	call	0xb2a	; 0xb2a <AT24C64_byte_read>
				currentData = *data;// puts the data into an integer so we can convert from BCD
    1388:	ee 81       	ldd	r30, Y+6	; 0x06
    138a:	ff 81       	ldd	r31, Y+7	; 0x07
    138c:	80 81       	ld	r24, Z
    138e:	88 2f       	mov	r24, r24
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	9c 83       	std	Y+4, r25	; 0x04
    1394:	8b 83       	std	Y+3, r24	; 0x03
				temp = BCDtoINT(currentData,0b00111111);// converts BCD log into int
    1396:	8b 81       	ldd	r24, Y+3	; 0x03
    1398:	9c 81       	ldd	r25, Y+4	; 0x04
    139a:	6f e3       	ldi	r22, 0x3F	; 63
    139c:	0e 94 a3 06 	call	0xd46	; 0xd46 <BCDtoINT>
    13a0:	8d 83       	std	Y+5, r24	; 0x05
				currentData = temp;// assigns the converted value of the data into an int
    13a2:	8d 81       	ldd	r24, Y+5	; 0x05
    13a4:	88 2f       	mov	r24, r24
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	9c 83       	std	Y+4, r25	; 0x04
    13aa:	8b 83       	std	Y+3, r24	; 0x03
				itoa(currentData, dataArray, 10);// converts it into a string
    13ac:	8b 81       	ldd	r24, Y+3	; 0x03
    13ae:	9c 81       	ldd	r25, Y+4	; 0x04
    13b0:	9e 01       	movw	r18, r28
    13b2:	26 5f       	subi	r18, 0xF6	; 246
    13b4:	3f 4f       	sbci	r19, 0xFF	; 255
    13b6:	b9 01       	movw	r22, r18
    13b8:	4a e0       	ldi	r20, 0x0A	; 10
    13ba:	50 e0       	ldi	r21, 0x00	; 0
    13bc:	0e 94 1d 0b 	call	0x163a	; 0x163a <itoa>
				lcd_gotoxy(4,1);// moves the cursor
    13c0:	84 e0       	ldi	r24, 0x04	; 4
    13c2:	61 e0       	ldi	r22, 0x01	; 1
    13c4:	0e 94 7e 02 	call	0x4fc	; 0x4fc <lcd_gotoxy>
				lcd_puts(dataArray);// displays the last hour the button was pressed
    13c8:	ce 01       	movw	r24, r28
    13ca:	0a 96       	adiw	r24, 0x0a	; 10
    13cc:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <lcd_puts>
                lcd_gotoxy(5,1);//moves a space
    13d0:	85 e0       	ldi	r24, 0x05	; 5
    13d2:	61 e0       	ldi	r22, 0x01	; 1
    13d4:	0e 94 7e 02 	call	0x4fc	; 0x4fc <lcd_gotoxy>
				lcd_puts(":");//puts ":"
    13d8:	88 e0       	ldi	r24, 0x08	; 8
    13da:	91 e0       	ldi	r25, 0x01	; 1
    13dc:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <lcd_puts>
				tempAdressCounter--;//Decrements the temporary address counter
    13e0:	88 85       	ldd	r24, Y+8	; 0x08
    13e2:	99 85       	ldd	r25, Y+9	; 0x09
    13e4:	01 97       	sbiw	r24, 0x01	; 1
    13e6:	99 87       	std	Y+9, r25	; 0x09
    13e8:	88 87       	std	Y+8, r24	; 0x08

				lcd_puts("/n");// goes to the next line
    13ea:	8a e1       	ldi	r24, 0x1A	; 26
    13ec:	91 e0       	ldi	r25, 0x01	; 1
    13ee:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <lcd_puts>
	unsigned int currentData;
	int i;// used to move through the rows of the LCD
	tempAdressCounter = addressCounter; // sets the tempAdressCounter to addressCounter
    char dataArray[6];

		while(tempAdressCounter != 0)
    13f2:	88 85       	ldd	r24, Y+8	; 0x08
    13f4:	99 85       	ldd	r25, Y+9	; 0x09
    13f6:	00 97       	sbiw	r24, 0x00	; 0
    13f8:	09 f0       	breq	.+2      	; 0x13fc <displayLog+0x18c>
    13fa:	4e cf       	rjmp	.-356    	; 0x1298 <displayLog+0x28>
		}




}
    13fc:	2f 96       	adiw	r28, 0x0f	; 15
    13fe:	0f b6       	in	r0, 0x3f	; 63
    1400:	f8 94       	cli
    1402:	de bf       	out	0x3e, r29	; 62
    1404:	0f be       	out	0x3f, r0	; 63
    1406:	cd bf       	out	0x3d, r28	; 61
    1408:	cf 91       	pop	r28
    140a:	df 91       	pop	r29
    140c:	08 95       	ret

0000140e <i2c_init>:

/*************************************************************************
 Initialization of the I2C bus interface. Need to be called only once
*************************************************************************/
void i2c_init(void)
{
    140e:	df 93       	push	r29
    1410:	cf 93       	push	r28
    1412:	cd b7       	in	r28, 0x3d	; 61
    1414:	de b7       	in	r29, 0x3e	; 62
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
    1416:	e9 eb       	ldi	r30, 0xB9	; 185
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	10 82       	st	Z, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    141c:	e8 eb       	ldi	r30, 0xB8	; 184
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	88 e4       	ldi	r24, 0x48	; 72
    1422:	80 83       	st	Z, r24

}/* i2c_init */
    1424:	cf 91       	pop	r28
    1426:	df 91       	pop	r29
    1428:	08 95       	ret

0000142a <i2c_start>:
/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
{
    142a:	df 93       	push	r29
    142c:	cf 93       	push	r28
    142e:	00 d0       	rcall	.+0      	; 0x1430 <i2c_start+0x6>
    1430:	0f 92       	push	r0
    1432:	cd b7       	in	r28, 0x3d	; 61
    1434:	de b7       	in	r29, 0x3e	; 62
    1436:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1438:	ec eb       	ldi	r30, 0xBC	; 188
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	84 ea       	ldi	r24, 0xA4	; 164
    143e:	80 83       	st	Z, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    1440:	ec eb       	ldi	r30, 0xBC	; 188
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	88 23       	and	r24, r24
    1448:	dc f7       	brge	.-10     	; 0x1440 <i2c_start+0x16>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    144a:	e9 eb       	ldi	r30, 0xB9	; 185
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	88 7f       	andi	r24, 0xF8	; 248
    1452:	89 83       	std	Y+1, r24	; 0x01
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    1454:	89 81       	ldd	r24, Y+1	; 0x01
    1456:	88 30       	cpi	r24, 0x08	; 8
    1458:	31 f0       	breq	.+12     	; 0x1466 <i2c_start+0x3c>
    145a:	89 81       	ldd	r24, Y+1	; 0x01
    145c:	80 31       	cpi	r24, 0x10	; 16
    145e:	19 f0       	breq	.+6      	; 0x1466 <i2c_start+0x3c>
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	8b 83       	std	Y+3, r24	; 0x03
    1464:	1c c0       	rjmp	.+56     	; 0x149e <i2c_start+0x74>

	// send device address
	TWDR = address;
    1466:	eb eb       	ldi	r30, 0xBB	; 187
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	8a 81       	ldd	r24, Y+2	; 0x02
    146c:	80 83       	st	Z, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    146e:	ec eb       	ldi	r30, 0xBC	; 188
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	84 e8       	ldi	r24, 0x84	; 132
    1474:	80 83       	st	Z, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    1476:	ec eb       	ldi	r30, 0xBC	; 188
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	88 23       	and	r24, r24
    147e:	dc f7       	brge	.-10     	; 0x1476 <i2c_start+0x4c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    1480:	e9 eb       	ldi	r30, 0xB9	; 185
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	88 7f       	andi	r24, 0xF8	; 248
    1488:	89 83       	std	Y+1, r24	; 0x01
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    148a:	89 81       	ldd	r24, Y+1	; 0x01
    148c:	88 31       	cpi	r24, 0x18	; 24
    148e:	31 f0       	breq	.+12     	; 0x149c <i2c_start+0x72>
    1490:	89 81       	ldd	r24, Y+1	; 0x01
    1492:	80 34       	cpi	r24, 0x40	; 64
    1494:	19 f0       	breq	.+6      	; 0x149c <i2c_start+0x72>
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	8b 83       	std	Y+3, r24	; 0x03
    149a:	01 c0       	rjmp	.+2      	; 0x149e <i2c_start+0x74>

	return 0;
    149c:	1b 82       	std	Y+3, r1	; 0x03
    149e:	8b 81       	ldd	r24, Y+3	; 0x03

}/* i2c_start */
    14a0:	0f 90       	pop	r0
    14a2:	0f 90       	pop	r0
    14a4:	0f 90       	pop	r0
    14a6:	cf 91       	pop	r28
    14a8:	df 91       	pop	r29
    14aa:	08 95       	ret

000014ac <i2c_start_wait>:
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
    14ac:	df 93       	push	r29
    14ae:	cf 93       	push	r28
    14b0:	00 d0       	rcall	.+0      	; 0x14b2 <i2c_start_wait+0x6>
    14b2:	cd b7       	in	r28, 0x3d	; 61
    14b4:	de b7       	in	r29, 0x3e	; 62
    14b6:	8a 83       	std	Y+2, r24	; 0x02


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    14b8:	ec eb       	ldi	r30, 0xBC	; 188
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	84 ea       	ldi	r24, 0xA4	; 164
    14be:	80 83       	st	Z, r24
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    14c0:	ec eb       	ldi	r30, 0xBC	; 188
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	88 23       	and	r24, r24
    14c8:	dc f7       	brge	.-10     	; 0x14c0 <i2c_start_wait+0x14>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    14ca:	e9 eb       	ldi	r30, 0xB9	; 185
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	88 7f       	andi	r24, 0xF8	; 248
    14d2:	89 83       	std	Y+1, r24	; 0x01
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    14d4:	89 81       	ldd	r24, Y+1	; 0x01
    14d6:	88 30       	cpi	r24, 0x08	; 8
    14d8:	19 f0       	breq	.+6      	; 0x14e0 <i2c_start_wait+0x34>
    14da:	89 81       	ldd	r24, Y+1	; 0x01
    14dc:	80 31       	cpi	r24, 0x10	; 16
    14de:	61 f7       	brne	.-40     	; 0x14b8 <i2c_start_wait+0xc>
    
    	// send device address
    	TWDR = address;
    14e0:	eb eb       	ldi	r30, 0xBB	; 187
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	8a 81       	ldd	r24, Y+2	; 0x02
    14e6:	80 83       	st	Z, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    14e8:	ec eb       	ldi	r30, 0xBC	; 188
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	84 e8       	ldi	r24, 0x84	; 132
    14ee:	80 83       	st	Z, r24
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    14f0:	ec eb       	ldi	r30, 0xBC	; 188
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	88 23       	and	r24, r24
    14f8:	dc f7       	brge	.-10     	; 0x14f0 <i2c_start_wait+0x44>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    14fa:	e9 eb       	ldi	r30, 0xB9	; 185
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	88 7f       	andi	r24, 0xF8	; 248
    1502:	89 83       	std	Y+1, r24	; 0x01
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    1504:	89 81       	ldd	r24, Y+1	; 0x01
    1506:	80 32       	cpi	r24, 0x20	; 32
    1508:	19 f0       	breq	.+6      	; 0x1510 <i2c_start_wait+0x64>
    150a:	89 81       	ldd	r24, Y+1	; 0x01
    150c:	88 35       	cpi	r24, 0x58	; 88
    150e:	71 f4       	brne	.+28     	; 0x152c <i2c_start_wait+0x80>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1510:	ec eb       	ldi	r30, 0xBC	; 188
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	84 e9       	ldi	r24, 0x94	; 148
    1516:	80 83       	st	Z, r24
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    1518:	ec eb       	ldi	r30, 0xBC	; 188
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 81       	ld	r24, Z
    151e:	88 2f       	mov	r24, r24
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	80 71       	andi	r24, 0x10	; 16
    1524:	90 70       	andi	r25, 0x00	; 0
    1526:	00 97       	sbiw	r24, 0x00	; 0
    1528:	b9 f7       	brne	.-18     	; 0x1518 <i2c_start_wait+0x6c>
    152a:	c6 cf       	rjmp	.-116    	; 0x14b8 <i2c_start_wait+0xc>
	        
    	    continue;
    	}
    	//if( twst != TW_MT_SLA_ACK) return 1;
    	break;
     }
    152c:	0f 90       	pop	r0
    152e:	0f 90       	pop	r0
    1530:	cf 91       	pop	r28
    1532:	df 91       	pop	r29
    1534:	08 95       	ret

00001536 <i2c_rep_start>:
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    1536:	df 93       	push	r29
    1538:	cf 93       	push	r28
    153a:	0f 92       	push	r0
    153c:	cd b7       	in	r28, 0x3d	; 61
    153e:	de b7       	in	r29, 0x3e	; 62
    1540:	89 83       	std	Y+1, r24	; 0x01
    return i2c_start( address );
    1542:	89 81       	ldd	r24, Y+1	; 0x01
    1544:	0e 94 15 0a 	call	0x142a	; 0x142a <i2c_start>

}/* i2c_rep_start */
    1548:	0f 90       	pop	r0
    154a:	cf 91       	pop	r28
    154c:	df 91       	pop	r29
    154e:	08 95       	ret

00001550 <i2c_stop>:

/*************************************************************************
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    1550:	df 93       	push	r29
    1552:	cf 93       	push	r28
    1554:	cd b7       	in	r28, 0x3d	; 61
    1556:	de b7       	in	r29, 0x3e	; 62
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1558:	ec eb       	ldi	r30, 0xBC	; 188
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	84 e9       	ldi	r24, 0x94	; 148
    155e:	80 83       	st	Z, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    1560:	ec eb       	ldi	r30, 0xBC	; 188
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	80 81       	ld	r24, Z
    1566:	88 2f       	mov	r24, r24
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	80 71       	andi	r24, 0x10	; 16
    156c:	90 70       	andi	r25, 0x00	; 0
    156e:	00 97       	sbiw	r24, 0x00	; 0
    1570:	b9 f7       	brne	.-18     	; 0x1560 <i2c_stop+0x10>

}/* i2c_stop */
    1572:	cf 91       	pop	r28
    1574:	df 91       	pop	r29
    1576:	08 95       	ret

00001578 <i2c_write>:
  Input:    byte to be transfered
  Return:   0 write successful 
            1 write failed
*************************************************************************/
unsigned char i2c_write( unsigned char data )
{	
    1578:	df 93       	push	r29
    157a:	cf 93       	push	r28
    157c:	00 d0       	rcall	.+0      	; 0x157e <i2c_write+0x6>
    157e:	0f 92       	push	r0
    1580:	cd b7       	in	r28, 0x3d	; 61
    1582:	de b7       	in	r29, 0x3e	; 62
    1584:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    1586:	eb eb       	ldi	r30, 0xBB	; 187
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	8a 81       	ldd	r24, Y+2	; 0x02
    158c:	80 83       	st	Z, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    158e:	ec eb       	ldi	r30, 0xBC	; 188
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	84 e8       	ldi	r24, 0x84	; 132
    1594:	80 83       	st	Z, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    1596:	ec eb       	ldi	r30, 0xBC	; 188
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	88 23       	and	r24, r24
    159e:	dc f7       	brge	.-10     	; 0x1596 <i2c_write+0x1e>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    15a0:	e9 eb       	ldi	r30, 0xB9	; 185
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	88 7f       	andi	r24, 0xF8	; 248
    15a8:	89 83       	std	Y+1, r24	; 0x01
	if( twst != TW_MT_DATA_ACK) return 1;
    15aa:	89 81       	ldd	r24, Y+1	; 0x01
    15ac:	88 32       	cpi	r24, 0x28	; 40
    15ae:	19 f0       	breq	.+6      	; 0x15b6 <i2c_write+0x3e>
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	8b 83       	std	Y+3, r24	; 0x03
    15b4:	01 c0       	rjmp	.+2      	; 0x15b8 <i2c_write+0x40>
	return 0;
    15b6:	1b 82       	std	Y+3, r1	; 0x03
    15b8:	8b 81       	ldd	r24, Y+3	; 0x03

}/* i2c_write */
    15ba:	0f 90       	pop	r0
    15bc:	0f 90       	pop	r0
    15be:	0f 90       	pop	r0
    15c0:	cf 91       	pop	r28
    15c2:	df 91       	pop	r29
    15c4:	08 95       	ret

000015c6 <i2c_readAck>:
 Read one byte from the I2C device, request more data from device 
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
    15c6:	df 93       	push	r29
    15c8:	cf 93       	push	r28
    15ca:	cd b7       	in	r28, 0x3d	; 61
    15cc:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    15ce:	ec eb       	ldi	r30, 0xBC	; 188
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	84 ec       	ldi	r24, 0xC4	; 196
    15d4:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT)));    
    15d6:	ec eb       	ldi	r30, 0xBC	; 188
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	88 23       	and	r24, r24
    15de:	dc f7       	brge	.-10     	; 0x15d6 <i2c_readAck+0x10>

    return TWDR;
    15e0:	eb eb       	ldi	r30, 0xBB	; 187
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	80 81       	ld	r24, Z

}/* i2c_readAck */
    15e6:	cf 91       	pop	r28
    15e8:	df 91       	pop	r29
    15ea:	08 95       	ret

000015ec <i2c_readNak>:
 Read one byte from the I2C device, read is followed by a stop condition 
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
    15ec:	df 93       	push	r29
    15ee:	cf 93       	push	r28
    15f0:	cd b7       	in	r28, 0x3d	; 61
    15f2:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT) | (1<<TWEN);
    15f4:	ec eb       	ldi	r30, 0xBC	; 188
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	84 e8       	ldi	r24, 0x84	; 132
    15fa:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT)));
    15fc:	ec eb       	ldi	r30, 0xBC	; 188
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	88 23       	and	r24, r24
    1604:	dc f7       	brge	.-10     	; 0x15fc <i2c_readNak+0x10>
	
    return TWDR;
    1606:	eb eb       	ldi	r30, 0xBB	; 187
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	80 81       	ld	r24, Z

}/* i2c_readNak */
    160c:	cf 91       	pop	r28
    160e:	df 91       	pop	r29
    1610:	08 95       	ret

00001612 <__udivmodhi4>:
    1612:	aa 1b       	sub	r26, r26
    1614:	bb 1b       	sub	r27, r27
    1616:	51 e1       	ldi	r21, 0x11	; 17
    1618:	07 c0       	rjmp	.+14     	; 0x1628 <__udivmodhi4_ep>

0000161a <__udivmodhi4_loop>:
    161a:	aa 1f       	adc	r26, r26
    161c:	bb 1f       	adc	r27, r27
    161e:	a6 17       	cp	r26, r22
    1620:	b7 07       	cpc	r27, r23
    1622:	10 f0       	brcs	.+4      	; 0x1628 <__udivmodhi4_ep>
    1624:	a6 1b       	sub	r26, r22
    1626:	b7 0b       	sbc	r27, r23

00001628 <__udivmodhi4_ep>:
    1628:	88 1f       	adc	r24, r24
    162a:	99 1f       	adc	r25, r25
    162c:	5a 95       	dec	r21
    162e:	a9 f7       	brne	.-22     	; 0x161a <__udivmodhi4_loop>
    1630:	80 95       	com	r24
    1632:	90 95       	com	r25
    1634:	bc 01       	movw	r22, r24
    1636:	cd 01       	movw	r24, r26
    1638:	08 95       	ret

0000163a <itoa>:
    163a:	fb 01       	movw	r30, r22
    163c:	9f 01       	movw	r18, r30
    163e:	e8 94       	clt
    1640:	42 30       	cpi	r20, 0x02	; 2
    1642:	c4 f0       	brlt	.+48     	; 0x1674 <itoa+0x3a>
    1644:	45 32       	cpi	r20, 0x25	; 37
    1646:	b4 f4       	brge	.+44     	; 0x1674 <itoa+0x3a>
    1648:	4a 30       	cpi	r20, 0x0A	; 10
    164a:	29 f4       	brne	.+10     	; 0x1656 <itoa+0x1c>
    164c:	97 fb       	bst	r25, 7
    164e:	1e f4       	brtc	.+6      	; 0x1656 <itoa+0x1c>
    1650:	90 95       	com	r25
    1652:	81 95       	neg	r24
    1654:	9f 4f       	sbci	r25, 0xFF	; 255
    1656:	64 2f       	mov	r22, r20
    1658:	77 27       	eor	r23, r23
    165a:	0e 94 09 0b 	call	0x1612	; 0x1612 <__udivmodhi4>
    165e:	80 5d       	subi	r24, 0xD0	; 208
    1660:	8a 33       	cpi	r24, 0x3A	; 58
    1662:	0c f0       	brlt	.+2      	; 0x1666 <itoa+0x2c>
    1664:	89 5d       	subi	r24, 0xD9	; 217
    1666:	81 93       	st	Z+, r24
    1668:	cb 01       	movw	r24, r22
    166a:	00 97       	sbiw	r24, 0x00	; 0
    166c:	a1 f7       	brne	.-24     	; 0x1656 <itoa+0x1c>
    166e:	16 f4       	brtc	.+4      	; 0x1674 <itoa+0x3a>
    1670:	5d e2       	ldi	r21, 0x2D	; 45
    1672:	51 93       	st	Z+, r21
    1674:	10 82       	st	Z, r1
    1676:	c9 01       	movw	r24, r18
    1678:	0c 94 3e 0b 	jmp	0x167c	; 0x167c <strrev>

0000167c <strrev>:
    167c:	dc 01       	movw	r26, r24
    167e:	fc 01       	movw	r30, r24
    1680:	67 2f       	mov	r22, r23
    1682:	71 91       	ld	r23, Z+
    1684:	77 23       	and	r23, r23
    1686:	e1 f7       	brne	.-8      	; 0x1680 <strrev+0x4>
    1688:	32 97       	sbiw	r30, 0x02	; 2
    168a:	04 c0       	rjmp	.+8      	; 0x1694 <strrev+0x18>
    168c:	7c 91       	ld	r23, X
    168e:	6d 93       	st	X+, r22
    1690:	70 83       	st	Z, r23
    1692:	62 91       	ld	r22, -Z
    1694:	ae 17       	cp	r26, r30
    1696:	bf 07       	cpc	r27, r31
    1698:	c8 f3       	brcs	.-14     	; 0x168c <strrev+0x10>
    169a:	08 95       	ret

0000169c <_exit>:
    169c:	f8 94       	cli

0000169e <__stop_program>:
    169e:	ff cf       	rjmp	.-2      	; 0x169e <__stop_program>
